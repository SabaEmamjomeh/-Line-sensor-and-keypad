
LAB1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088a4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  08008aa4  08008aa4  00018aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c98  08008c98  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008c98  08008c98  00018c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ca0  08008ca0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ca0  08008ca0  00018ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ca4  08008ca4  00018ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008ca8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008a8  20000074  08008d1c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000091c  08008d1c  0002091c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016b86  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b77  00000000  00000000  00036c6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001420  00000000  00000000  000397e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fdb  00000000  00000000  0003ac08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029f22  00000000  00000000  0003bbe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018cfd  00000000  00000000  00065b05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00105ea1  00000000  00000000  0007e802  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006188  00000000  00000000  001846a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0018a82c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	08008a8c 	.word	0x08008a8c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	08008a8c 	.word	0x08008a8c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005f2:	f002 f8f2 	bl	80027da <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005f6:	f000 fa0f 	bl	8000a18 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	initialise_monitor_handles();
 80005fa:	f007 f9a9 	bl	8007950 <initialise_monitor_handles>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005fe:	f001 f839 	bl	8001674 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8000602:	f001 f807 	bl	8001614 <MX_USART3_UART_Init>
	MX_ADC1_Init();
 8000606:	f000 fa79 	bl	8000afc <MX_ADC1_Init>
	MX_I2C1_Init();
 800060a:	f000 fac9 	bl	8000ba0 <MX_I2C1_Init>
	MX_I2C2_Init();
 800060e:	f000 fb07 	bl	8000c20 <MX_I2C2_Init>
	MX_SPI1_Init();
 8000612:	f000 fb45 	bl	8000ca0 <MX_SPI1_Init>
	MX_TIM1_Init();
 8000616:	f000 fb81 	bl	8000d1c <MX_TIM1_Init>
	MX_TIM2_Init();
 800061a:	f000 fc4f 	bl	8000ebc <MX_TIM2_Init>
	MX_TIM3_Init();
 800061e:	f000 fce7 	bl	8000ff0 <MX_TIM3_Init>
	MX_TIM4_Init();
 8000622:	f000 fd3b 	bl	800109c <MX_TIM4_Init>
	MX_TIM5_Init();
 8000626:	f000 fd8f 	bl	8001148 <MX_TIM5_Init>
	MX_TIM8_Init();
 800062a:	f000 fe3d 	bl	80012a8 <MX_TIM8_Init>
	MX_UART4_Init();
 800062e:	f000 ff31 	bl	8001494 <MX_UART4_Init>
	MX_UART5_Init();
 8000632:	f000 ff5f 	bl	80014f4 <MX_UART5_Init>
	MX_USART1_UART_Init();
 8000636:	f000 ff8d 	bl	8001554 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800063a:	f000 ffbb 	bl	80015b4 <MX_USART2_UART_Init>
	MX_TIM7_Init();
 800063e:	f000 fdfb 	bl	8001238 <MX_TIM7_Init>
	MX_TIM10_Init();
 8000642:	f000 ff03 	bl	800144c <MX_TIM10_Init>
	/* USER CODE BEGIN 2 */

	/* Disable LCD SPI SS */
	HAL_GPIO_WritePin(GPIO_OUT_SPI_CS_LCD_GPIO_Port, GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_SET);
 8000646:	2201      	movs	r2, #1
 8000648:	2110      	movs	r1, #16
 800064a:	48bc      	ldr	r0, [pc, #752]	; (800093c <main+0x350>)
 800064c:	f002 feca 	bl	80033e4 <HAL_GPIO_WritePin>

	/* Disable EXTI4_IRQ during SX1509 initialization */
	HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8000650:	200a      	movs	r0, #10
 8000652:	f002 fd00 	bl	8003056 <HAL_NVIC_DisableIRQ>

	/* Software reset */
	data = 0x12;
 8000656:	2312      	movs	r3, #18
 8000658:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 800065a:	23c8      	movs	r3, #200	; 0xc8
 800065c:	9302      	str	r3, [sp, #8]
 800065e:	2301      	movs	r3, #1
 8000660:	9301      	str	r3, [sp, #4]
 8000662:	1dbb      	adds	r3, r7, #6
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2301      	movs	r3, #1
 8000668:	227d      	movs	r2, #125	; 0x7d
 800066a:	217e      	movs	r1, #126	; 0x7e
 800066c:	48b4      	ldr	r0, [pc, #720]	; (8000940 <main+0x354>)
 800066e:	f002 ff95 	bl	800359c <HAL_I2C_Mem_Write>
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d004      	beq.n	8000686 <main+0x9a>
		printf("I2C communication error (%X).\n", status);
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	4619      	mov	r1, r3
 8000680:	48b0      	ldr	r0, [pc, #704]	; (8000944 <main+0x358>)
 8000682:	f007 fb33 	bl	8007cec <iprintf>

	data = 0x34;
 8000686:	2334      	movs	r3, #52	; 0x34
 8000688:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 800068a:	23c8      	movs	r3, #200	; 0xc8
 800068c:	9302      	str	r3, [sp, #8]
 800068e:	2301      	movs	r3, #1
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	1dbb      	adds	r3, r7, #6
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	2301      	movs	r3, #1
 8000698:	227d      	movs	r2, #125	; 0x7d
 800069a:	217e      	movs	r1, #126	; 0x7e
 800069c:	48a8      	ldr	r0, [pc, #672]	; (8000940 <main+0x354>)
 800069e:	f002 ff7d 	bl	800359c <HAL_I2C_Mem_Write>
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d004      	beq.n	80006b6 <main+0xca>
		printf("I2C communication error (%X).\n", status);
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	4619      	mov	r1, r3
 80006b0:	48a4      	ldr	r0, [pc, #656]	; (8000944 <main+0x358>)
 80006b2:	f007 fb1b 	bl	8007cec <iprintf>

	HAL_Delay(100);
 80006b6:	2064      	movs	r0, #100	; 0x64
 80006b8:	f002 f8ec 	bl	8002894 <HAL_Delay>

	/* Set KeyPad scanning engine */

	/* Set RegClock to 0x40 (enable internal oscillator; 2MHz freq) */
	data = 0x40;
 80006bc:	2340      	movs	r3, #64	; 0x40
 80006be:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_CLOCK, 1, &data, 1, I2C_TIMEOUT);
 80006c0:	23c8      	movs	r3, #200	; 0xc8
 80006c2:	9302      	str	r3, [sp, #8]
 80006c4:	2301      	movs	r3, #1
 80006c6:	9301      	str	r3, [sp, #4]
 80006c8:	1dbb      	adds	r3, r7, #6
 80006ca:	9300      	str	r3, [sp, #0]
 80006cc:	2301      	movs	r3, #1
 80006ce:	221e      	movs	r2, #30
 80006d0:	217e      	movs	r1, #126	; 0x7e
 80006d2:	489b      	ldr	r0, [pc, #620]	; (8000940 <main+0x354>)
 80006d4:	f002 ff62 	bl	800359c <HAL_I2C_Mem_Write>
 80006d8:	4603      	mov	r3, r0
 80006da:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d004      	beq.n	80006ec <main+0x100>
		printf("I2C communication error (%X).\n", status);
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	4619      	mov	r1, r3
 80006e6:	4897      	ldr	r0, [pc, #604]	; (8000944 <main+0x358>)
 80006e8:	f007 fb00 	bl	8007cec <iprintf>

	/* Set Bank A RegDir to 0xF0 (IO[0:3] as out) */
	data = 0xF0;
 80006ec:	23f0      	movs	r3, #240	; 0xf0
 80006ee:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DIR_A, 1, &data, 1, I2C_TIMEOUT);
 80006f0:	23c8      	movs	r3, #200	; 0xc8
 80006f2:	9302      	str	r3, [sp, #8]
 80006f4:	2301      	movs	r3, #1
 80006f6:	9301      	str	r3, [sp, #4]
 80006f8:	1dbb      	adds	r3, r7, #6
 80006fa:	9300      	str	r3, [sp, #0]
 80006fc:	2301      	movs	r3, #1
 80006fe:	220f      	movs	r2, #15
 8000700:	217e      	movs	r1, #126	; 0x7e
 8000702:	488f      	ldr	r0, [pc, #572]	; (8000940 <main+0x354>)
 8000704:	f002 ff4a 	bl	800359c <HAL_I2C_Mem_Write>
 8000708:	4603      	mov	r3, r0
 800070a:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d004      	beq.n	800071c <main+0x130>
		printf("I2C communication error (%X).\n", status);
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	4619      	mov	r1, r3
 8000716:	488b      	ldr	r0, [pc, #556]	; (8000944 <main+0x358>)
 8000718:	f007 fae8 	bl	8007cec <iprintf>

	/* Set Bank B RegDir to 0x0F (IO[8:11] as in) */
	data = 0x0F;
 800071c:	230f      	movs	r3, #15
 800071e:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DIR_B, 1, &data, 1, I2C_TIMEOUT);
 8000720:	23c8      	movs	r3, #200	; 0xc8
 8000722:	9302      	str	r3, [sp, #8]
 8000724:	2301      	movs	r3, #1
 8000726:	9301      	str	r3, [sp, #4]
 8000728:	1dbb      	adds	r3, r7, #6
 800072a:	9300      	str	r3, [sp, #0]
 800072c:	2301      	movs	r3, #1
 800072e:	220e      	movs	r2, #14
 8000730:	217e      	movs	r1, #126	; 0x7e
 8000732:	4883      	ldr	r0, [pc, #524]	; (8000940 <main+0x354>)
 8000734:	f002 ff32 	bl	800359c <HAL_I2C_Mem_Write>
 8000738:	4603      	mov	r3, r0
 800073a:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d004      	beq.n	800074c <main+0x160>
		printf("I2C communication error (%X).\n", status);
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	4619      	mov	r1, r3
 8000746:	487f      	ldr	r0, [pc, #508]	; (8000944 <main+0x358>)
 8000748:	f007 fad0 	bl	8007cec <iprintf>

	/* Set Bank A RegOpenDrain to 0x0F (IO[0:3] as open-drain outputs) */
	data = 0x0F;
 800074c:	230f      	movs	r3, #15
 800074e:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_OPEN_DRAIN_A, 1, &data, 1, I2C_TIMEOUT);
 8000750:	23c8      	movs	r3, #200	; 0xc8
 8000752:	9302      	str	r3, [sp, #8]
 8000754:	2301      	movs	r3, #1
 8000756:	9301      	str	r3, [sp, #4]
 8000758:	1dbb      	adds	r3, r7, #6
 800075a:	9300      	str	r3, [sp, #0]
 800075c:	2301      	movs	r3, #1
 800075e:	220b      	movs	r2, #11
 8000760:	217e      	movs	r1, #126	; 0x7e
 8000762:	4877      	ldr	r0, [pc, #476]	; (8000940 <main+0x354>)
 8000764:	f002 ff1a 	bl	800359c <HAL_I2C_Mem_Write>
 8000768:	4603      	mov	r3, r0
 800076a:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d004      	beq.n	800077c <main+0x190>
		printf("I2C communication error (%X).\n", status);
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	4619      	mov	r1, r3
 8000776:	4873      	ldr	r0, [pc, #460]	; (8000944 <main+0x358>)
 8000778:	f007 fab8 	bl	8007cec <iprintf>

	/* Set Bank B RegPullup to 0x0F (pull-ups enabled on inputs IO[8:11]) */
	data = 0x0F;
 800077c:	230f      	movs	r3, #15
 800077e:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_PULL_UP_B, 1, &data, 1, I2C_TIMEOUT);
 8000780:	23c8      	movs	r3, #200	; 0xc8
 8000782:	9302      	str	r3, [sp, #8]
 8000784:	2301      	movs	r3, #1
 8000786:	9301      	str	r3, [sp, #4]
 8000788:	1dbb      	adds	r3, r7, #6
 800078a:	9300      	str	r3, [sp, #0]
 800078c:	2301      	movs	r3, #1
 800078e:	2206      	movs	r2, #6
 8000790:	217e      	movs	r1, #126	; 0x7e
 8000792:	486b      	ldr	r0, [pc, #428]	; (8000940 <main+0x354>)
 8000794:	f002 ff02 	bl	800359c <HAL_I2C_Mem_Write>
 8000798:	4603      	mov	r3, r0
 800079a:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d004      	beq.n	80007ac <main+0x1c0>
		printf("I2C communication error (%X).\n", status);
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	4619      	mov	r1, r3
 80007a6:	4867      	ldr	r0, [pc, #412]	; (8000944 <main+0x358>)
 80007a8:	f007 faa0 	bl	8007cec <iprintf>

	/* Set Bank B RegDebounceEnable to 0x0F (enable debouncing on IO[8:11]) */
	data = 0x0F;
 80007ac:	230f      	movs	r3, #15
 80007ae:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DEBOUNCE_ENABLE_B, 1, &data, 1, I2C_TIMEOUT);
 80007b0:	23c8      	movs	r3, #200	; 0xc8
 80007b2:	9302      	str	r3, [sp, #8]
 80007b4:	2301      	movs	r3, #1
 80007b6:	9301      	str	r3, [sp, #4]
 80007b8:	1dbb      	adds	r3, r7, #6
 80007ba:	9300      	str	r3, [sp, #0]
 80007bc:	2301      	movs	r3, #1
 80007be:	2223      	movs	r2, #35	; 0x23
 80007c0:	217e      	movs	r1, #126	; 0x7e
 80007c2:	485f      	ldr	r0, [pc, #380]	; (8000940 <main+0x354>)
 80007c4:	f002 feea 	bl	800359c <HAL_I2C_Mem_Write>
 80007c8:	4603      	mov	r3, r0
 80007ca:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d004      	beq.n	80007dc <main+0x1f0>
		printf("I2C communication error (%X).\n", status);
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	4619      	mov	r1, r3
 80007d6:	485b      	ldr	r0, [pc, #364]	; (8000944 <main+0x358>)
 80007d8:	f007 fa88 	bl	8007cec <iprintf>

	/* Set RegDebounceConfig to 0x05 (16ms debounce time) */
	data = 0x05;
 80007dc:	2305      	movs	r3, #5
 80007de:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DEBOUNCE_CONFIG, 1, &data, 1, I2C_TIMEOUT);
 80007e0:	23c8      	movs	r3, #200	; 0xc8
 80007e2:	9302      	str	r3, [sp, #8]
 80007e4:	2301      	movs	r3, #1
 80007e6:	9301      	str	r3, [sp, #4]
 80007e8:	1dbb      	adds	r3, r7, #6
 80007ea:	9300      	str	r3, [sp, #0]
 80007ec:	2301      	movs	r3, #1
 80007ee:	2222      	movs	r2, #34	; 0x22
 80007f0:	217e      	movs	r1, #126	; 0x7e
 80007f2:	4853      	ldr	r0, [pc, #332]	; (8000940 <main+0x354>)
 80007f4:	f002 fed2 	bl	800359c <HAL_I2C_Mem_Write>
 80007f8:	4603      	mov	r3, r0
 80007fa:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d004      	beq.n	800080c <main+0x220>
		printf("I2C communication error (%X).\n", status);
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	4619      	mov	r1, r3
 8000806:	484f      	ldr	r0, [pc, #316]	; (8000944 <main+0x358>)
 8000808:	f007 fa70 	bl	8007cec <iprintf>

	/* Set RegKeyConfig1 to 0x7D (8s auto-sleep; 32ms scan time per row) */
	data = 0x7D;
 800080c:	237d      	movs	r3, #125	; 0x7d
 800080e:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_CONFIG_1, 1, &data, 1, I2C_TIMEOUT);
 8000810:	23c8      	movs	r3, #200	; 0xc8
 8000812:	9302      	str	r3, [sp, #8]
 8000814:	2301      	movs	r3, #1
 8000816:	9301      	str	r3, [sp, #4]
 8000818:	1dbb      	adds	r3, r7, #6
 800081a:	9300      	str	r3, [sp, #0]
 800081c:	2301      	movs	r3, #1
 800081e:	2225      	movs	r2, #37	; 0x25
 8000820:	217e      	movs	r1, #126	; 0x7e
 8000822:	4847      	ldr	r0, [pc, #284]	; (8000940 <main+0x354>)
 8000824:	f002 feba 	bl	800359c <HAL_I2C_Mem_Write>
 8000828:	4603      	mov	r3, r0
 800082a:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d004      	beq.n	800083c <main+0x250>
		printf("I2C communication error (%X).\n", status);
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	4619      	mov	r1, r3
 8000836:	4843      	ldr	r0, [pc, #268]	; (8000944 <main+0x358>)
 8000838:	f007 fa58 	bl	8007cec <iprintf>

	/* Set RegKeyConfig2 to 0x1B (4 rows; 4 columns) */
	data = 0x1B;
 800083c:	231b      	movs	r3, #27
 800083e:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_CONFIG_2, 1, &data, 1, I2C_TIMEOUT);
 8000840:	23c8      	movs	r3, #200	; 0xc8
 8000842:	9302      	str	r3, [sp, #8]
 8000844:	2301      	movs	r3, #1
 8000846:	9301      	str	r3, [sp, #4]
 8000848:	1dbb      	adds	r3, r7, #6
 800084a:	9300      	str	r3, [sp, #0]
 800084c:	2301      	movs	r3, #1
 800084e:	2226      	movs	r2, #38	; 0x26
 8000850:	217e      	movs	r1, #126	; 0x7e
 8000852:	483b      	ldr	r0, [pc, #236]	; (8000940 <main+0x354>)
 8000854:	f002 fea2 	bl	800359c <HAL_I2C_Mem_Write>
 8000858:	4603      	mov	r3, r0
 800085a:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d004      	beq.n	800086c <main+0x280>
		printf("I2C communication error (%X).\n", status);
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	4619      	mov	r1, r3
 8000866:	4837      	ldr	r0, [pc, #220]	; (8000944 <main+0x358>)
 8000868:	f007 fa40 	bl	8007cec <iprintf>

	/* Enable EXTI4_IRQ after SX1509 initialization */
	HAL_Delay(100);
 800086c:	2064      	movs	r0, #100	; 0x64
 800086e:	f002 f811 	bl	8002894 <HAL_Delay>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000872:	200a      	movs	r0, #10
 8000874:	f002 fbe1 	bl	800303a <HAL_NVIC_EnableIRQ>

	/* Disable EXTI2_IRQ during SX1509 initialization */
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 8000878:	2008      	movs	r0, #8
 800087a:	f002 fbec 	bl	8003056 <HAL_NVIC_DisableIRQ>

	/* Software reset */
	data = 0x12;
 800087e:	2312      	movs	r3, #18
 8000880:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8000882:	23c8      	movs	r3, #200	; 0xc8
 8000884:	9302      	str	r3, [sp, #8]
 8000886:	2301      	movs	r3, #1
 8000888:	9301      	str	r3, [sp, #4]
 800088a:	1dbb      	adds	r3, r7, #6
 800088c:	9300      	str	r3, [sp, #0]
 800088e:	2301      	movs	r3, #1
 8000890:	227d      	movs	r2, #125	; 0x7d
 8000892:	217c      	movs	r1, #124	; 0x7c
 8000894:	482a      	ldr	r0, [pc, #168]	; (8000940 <main+0x354>)
 8000896:	f002 fe81 	bl	800359c <HAL_I2C_Mem_Write>
 800089a:	4603      	mov	r3, r0
 800089c:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d004      	beq.n	80008ae <main+0x2c2>
		printf("I2C communication error (%X).\n", status);
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	4619      	mov	r1, r3
 80008a8:	4826      	ldr	r0, [pc, #152]	; (8000944 <main+0x358>)
 80008aa:	f007 fa1f 	bl	8007cec <iprintf>

	data = 0x34;
 80008ae:	2334      	movs	r3, #52	; 0x34
 80008b0:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 80008b2:	23c8      	movs	r3, #200	; 0xc8
 80008b4:	9302      	str	r3, [sp, #8]
 80008b6:	2301      	movs	r3, #1
 80008b8:	9301      	str	r3, [sp, #4]
 80008ba:	1dbb      	adds	r3, r7, #6
 80008bc:	9300      	str	r3, [sp, #0]
 80008be:	2301      	movs	r3, #1
 80008c0:	227d      	movs	r2, #125	; 0x7d
 80008c2:	217c      	movs	r1, #124	; 0x7c
 80008c4:	481e      	ldr	r0, [pc, #120]	; (8000940 <main+0x354>)
 80008c6:	f002 fe69 	bl	800359c <HAL_I2C_Mem_Write>
 80008ca:	4603      	mov	r3, r0
 80008cc:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d004      	beq.n	80008de <main+0x2f2>
		printf("I2C communication error (%X).\n", status);
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	4619      	mov	r1, r3
 80008d8:	481a      	ldr	r0, [pc, #104]	; (8000944 <main+0x358>)
 80008da:	f007 fa07 	bl	8007cec <iprintf>

	HAL_Delay(100);
 80008de:	2064      	movs	r0, #100	; 0x64
 80008e0:	f001 ffd8 	bl	8002894 <HAL_Delay>

	/* Set RegDirA to 0xFF (all IO of Bank A configured as inputs) */
	data = 0xFF; // 0 = out; 1 = in
 80008e4:	23ff      	movs	r3, #255	; 0xff
 80008e6:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_A, 1, &data, 1, I2C_TIMEOUT);
 80008e8:	23c8      	movs	r3, #200	; 0xc8
 80008ea:	9302      	str	r3, [sp, #8]
 80008ec:	2301      	movs	r3, #1
 80008ee:	9301      	str	r3, [sp, #4]
 80008f0:	1dbb      	adds	r3, r7, #6
 80008f2:	9300      	str	r3, [sp, #0]
 80008f4:	2301      	movs	r3, #1
 80008f6:	220f      	movs	r2, #15
 80008f8:	217c      	movs	r1, #124	; 0x7c
 80008fa:	4811      	ldr	r0, [pc, #68]	; (8000940 <main+0x354>)
 80008fc:	f002 fe4e 	bl	800359c <HAL_I2C_Mem_Write>
 8000900:	4603      	mov	r3, r0
 8000902:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d004      	beq.n	8000914 <main+0x328>
		printf("I2C communication error (%X).\n", status);
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	4619      	mov	r1, r3
 800090e:	480d      	ldr	r0, [pc, #52]	; (8000944 <main+0x358>)
 8000910:	f007 f9ec 	bl	8007cec <iprintf>

	/* Set RegDirB to 0xFF (all IO of Bank B configured as inputs) */
	data = 0xFF; // 0 = out; 1 = in
 8000914:	23ff      	movs	r3, #255	; 0xff
 8000916:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_B, 1, &data, 1, I2C_TIMEOUT);
 8000918:	23c8      	movs	r3, #200	; 0xc8
 800091a:	9302      	str	r3, [sp, #8]
 800091c:	2301      	movs	r3, #1
 800091e:	9301      	str	r3, [sp, #4]
 8000920:	1dbb      	adds	r3, r7, #6
 8000922:	9300      	str	r3, [sp, #0]
 8000924:	2301      	movs	r3, #1
 8000926:	220e      	movs	r2, #14
 8000928:	217c      	movs	r1, #124	; 0x7c
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <main+0x354>)
 800092c:	f002 fe36 	bl	800359c <HAL_I2C_Mem_Write>
 8000930:	4603      	mov	r3, r0
 8000932:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	2b00      	cmp	r3, #0
 8000938:	e006      	b.n	8000948 <main+0x35c>
 800093a:	bf00      	nop
 800093c:	40021000 	.word	0x40021000
 8000940:	200000d8 	.word	0x200000d8
 8000944:	08008aa4 	.word	0x08008aa4
 8000948:	d004      	beq.n	8000954 <main+0x368>
		printf("I2C communication error (%X).\n", status);
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	4619      	mov	r1, r3
 800094e:	482d      	ldr	r0, [pc, #180]	; (8000a04 <main+0x418>)
 8000950:	f007 f9cc 	bl	8007cec <iprintf>

	/* Set RegInterruptMaskA to 0x00 (all IO of Bank A will trigger an interrupt) */
	data = 0x00;
 8000954:	2300      	movs	r3, #0
 8000956:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_INTERRUPT_MASK_A, 1, &data, 1, I2C_TIMEOUT);
 8000958:	23c8      	movs	r3, #200	; 0xc8
 800095a:	9302      	str	r3, [sp, #8]
 800095c:	2301      	movs	r3, #1
 800095e:	9301      	str	r3, [sp, #4]
 8000960:	1dbb      	adds	r3, r7, #6
 8000962:	9300      	str	r3, [sp, #0]
 8000964:	2301      	movs	r3, #1
 8000966:	2213      	movs	r2, #19
 8000968:	217c      	movs	r1, #124	; 0x7c
 800096a:	4827      	ldr	r0, [pc, #156]	; (8000a08 <main+0x41c>)
 800096c:	f002 fe16 	bl	800359c <HAL_I2C_Mem_Write>
 8000970:	4603      	mov	r3, r0
 8000972:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d004      	beq.n	8000984 <main+0x398>
		printf("I2C communication error (%X).\n", status);
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	4619      	mov	r1, r3
 800097e:	4821      	ldr	r0, [pc, #132]	; (8000a04 <main+0x418>)
 8000980:	f007 f9b4 	bl	8007cec <iprintf>

	/* Set RegSenseHighA to 0xAA (IO[7:4] of Bank A will trigger an interrupt on falling edge) */
	data = 0xAA;
 8000984:	23aa      	movs	r3, #170	; 0xaa
 8000986:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_SENSE_HIGH_A, 1, &data, 1, I2C_TIMEOUT);
 8000988:	23c8      	movs	r3, #200	; 0xc8
 800098a:	9302      	str	r3, [sp, #8]
 800098c:	2301      	movs	r3, #1
 800098e:	9301      	str	r3, [sp, #4]
 8000990:	1dbb      	adds	r3, r7, #6
 8000992:	9300      	str	r3, [sp, #0]
 8000994:	2301      	movs	r3, #1
 8000996:	2216      	movs	r2, #22
 8000998:	217c      	movs	r1, #124	; 0x7c
 800099a:	481b      	ldr	r0, [pc, #108]	; (8000a08 <main+0x41c>)
 800099c:	f002 fdfe 	bl	800359c <HAL_I2C_Mem_Write>
 80009a0:	4603      	mov	r3, r0
 80009a2:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d004      	beq.n	80009b4 <main+0x3c8>
		printf("I2C communication error (%X).\n", status);
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	4619      	mov	r1, r3
 80009ae:	4815      	ldr	r0, [pc, #84]	; (8000a04 <main+0x418>)
 80009b0:	f007 f99c 	bl	8007cec <iprintf>

	/* Set RegSenseLowA to 0xAA (IO[3:0] of Bank A will trigger an interrupt on falling edge) */
	data = 0xAA;
 80009b4:	23aa      	movs	r3, #170	; 0xaa
 80009b6:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_SENSE_LOW_A, 1, &data, 1, I2C_TIMEOUT);
 80009b8:	23c8      	movs	r3, #200	; 0xc8
 80009ba:	9302      	str	r3, [sp, #8]
 80009bc:	2301      	movs	r3, #1
 80009be:	9301      	str	r3, [sp, #4]
 80009c0:	1dbb      	adds	r3, r7, #6
 80009c2:	9300      	str	r3, [sp, #0]
 80009c4:	2301      	movs	r3, #1
 80009c6:	2217      	movs	r2, #23
 80009c8:	217c      	movs	r1, #124	; 0x7c
 80009ca:	480f      	ldr	r0, [pc, #60]	; (8000a08 <main+0x41c>)
 80009cc:	f002 fde6 	bl	800359c <HAL_I2C_Mem_Write>
 80009d0:	4603      	mov	r3, r0
 80009d2:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d004      	beq.n	80009e4 <main+0x3f8>
		printf("I2C communication error (%X).\n", status);
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	4619      	mov	r1, r3
 80009de:	4809      	ldr	r0, [pc, #36]	; (8000a04 <main+0x418>)
 80009e0:	f007 f984 	bl	8007cec <iprintf>

	/* Enable EXTI2_IRQ after SX1509 initialization */
	HAL_Delay(100);
 80009e4:	2064      	movs	r0, #100	; 0x64
 80009e6:	f001 ff55 	bl	8002894 <HAL_Delay>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80009ea:	2008      	movs	r0, #8
 80009ec:	f002 fb25 	bl	800303a <HAL_NVIC_EnableIRQ>


	printf("Ready\n");
 80009f0:	4806      	ldr	r0, [pc, #24]	; (8000a0c <main+0x420>)
 80009f2:	f007 f9e1 	bl	8007db8 <puts>

	HAL_TIM_Base_Start_IT(&htim7);
 80009f6:	4806      	ldr	r0, [pc, #24]	; (8000a10 <main+0x424>)
 80009f8:	f004 fd8e 	bl	8005518 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim10);
 80009fc:	4805      	ldr	r0, [pc, #20]	; (8000a14 <main+0x428>)
 80009fe:	f004 fd8b 	bl	8005518 <HAL_TIM_Base_Start_IT>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000a02:	e7fe      	b.n	8000a02 <main+0x416>
 8000a04:	08008aa4 	.word	0x08008aa4
 8000a08:	200000d8 	.word	0x200000d8
 8000a0c:	08008ac4 	.word	0x08008ac4
 8000a10:	20000360 	.word	0x20000360
 8000a14:	200003f8 	.word	0x200003f8

08000a18 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b094      	sub	sp, #80	; 0x50
 8000a1c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	2234      	movs	r2, #52	; 0x34
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f007 faa6 	bl	8007f78 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a2c:	f107 0308 	add.w	r3, r7, #8
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000a3c:	f003 fb0e 	bl	800405c <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000a40:	4b2c      	ldr	r3, [pc, #176]	; (8000af4 <SystemClock_Config+0xdc>)
 8000a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a44:	4a2b      	ldr	r2, [pc, #172]	; (8000af4 <SystemClock_Config+0xdc>)
 8000a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4c:	4b29      	ldr	r3, [pc, #164]	; (8000af4 <SystemClock_Config+0xdc>)
 8000a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a58:	4b27      	ldr	r3, [pc, #156]	; (8000af8 <SystemClock_Config+0xe0>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a60:	4a25      	ldr	r2, [pc, #148]	; (8000af8 <SystemClock_Config+0xe0>)
 8000a62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a66:	6013      	str	r3, [r2, #0]
 8000a68:	4b23      	ldr	r3, [pc, #140]	; (8000af8 <SystemClock_Config+0xe0>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a70:	603b      	str	r3, [r7, #0]
 8000a72:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a74:	2301      	movs	r3, #1
 8000a76:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a78:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a7c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a86:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000a88:	2304      	movs	r3, #4
 8000a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 96;
 8000a8c:	2360      	movs	r3, #96	; 0x60
 8000a8e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a90:	2302      	movs	r3, #2
 8000a92:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a94:	2304      	movs	r3, #4
 8000a96:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a9c:	f107 031c 	add.w	r3, r7, #28
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f003 fb3b 	bl	800411c <HAL_RCC_OscConfig>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <SystemClock_Config+0x98>
	{
		Error_Handler();
 8000aac:	f000 ff78 	bl	80019a0 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ab0:	f003 fae4 	bl	800407c <HAL_PWREx_EnableOverDrive>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <SystemClock_Config+0xa6>
	{
		Error_Handler();
 8000aba:	f000 ff71 	bl	80019a0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000abe:	230f      	movs	r3, #15
 8000ac0:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ace:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ad4:	f107 0308 	add.w	r3, r7, #8
 8000ad8:	2103      	movs	r1, #3
 8000ada:	4618      	mov	r0, r3
 8000adc:	f003 fdcc 	bl	8004678 <HAL_RCC_ClockConfig>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <SystemClock_Config+0xd2>
	{
		Error_Handler();
 8000ae6:	f000 ff5b 	bl	80019a0 <Error_Handler>
	}
}
 8000aea:	bf00      	nop
 8000aec:	3750      	adds	r7, #80	; 0x50
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40007000 	.word	0x40007000

08000afc <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8000b02:	463b      	mov	r3, r7
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000b0e:	4b21      	ldr	r3, [pc, #132]	; (8000b94 <MX_ADC1_Init+0x98>)
 8000b10:	4a21      	ldr	r2, [pc, #132]	; (8000b98 <MX_ADC1_Init+0x9c>)
 8000b12:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b14:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <MX_ADC1_Init+0x98>)
 8000b16:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b1a:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b1c:	4b1d      	ldr	r3, [pc, #116]	; (8000b94 <MX_ADC1_Init+0x98>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b22:	4b1c      	ldr	r3, [pc, #112]	; (8000b94 <MX_ADC1_Init+0x98>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000b28:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <MX_ADC1_Init+0x98>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b2e:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <MX_ADC1_Init+0x98>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b36:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <MX_ADC1_Init+0x98>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b3c:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <MX_ADC1_Init+0x98>)
 8000b3e:	4a17      	ldr	r2, [pc, #92]	; (8000b9c <MX_ADC1_Init+0xa0>)
 8000b40:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b42:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <MX_ADC1_Init+0x98>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <MX_ADC1_Init+0x98>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <MX_ADC1_Init+0x98>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b56:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <MX_ADC1_Init+0x98>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b5c:	480d      	ldr	r0, [pc, #52]	; (8000b94 <MX_ADC1_Init+0x98>)
 8000b5e:	f001 febd 	bl	80028dc <HAL_ADC_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_ADC1_Init+0x70>
	{
		Error_Handler();
 8000b68:	f000 ff1a 	bl	80019a0 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b70:	2301      	movs	r3, #1
 8000b72:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b78:	463b      	mov	r3, r7
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4805      	ldr	r0, [pc, #20]	; (8000b94 <MX_ADC1_Init+0x98>)
 8000b7e:	f001 fef1 	bl	8002964 <HAL_ADC_ConfigChannel>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_ADC1_Init+0x90>
	{
		Error_Handler();
 8000b88:	f000 ff0a 	bl	80019a0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000b8c:	bf00      	nop
 8000b8e:	3710      	adds	r7, #16
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000090 	.word	0x20000090
 8000b98:	40012000 	.word	0x40012000
 8000b9c:	0f000001 	.word	0x0f000001

08000ba0 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000ba4:	4b1b      	ldr	r3, [pc, #108]	; (8000c14 <MX_I2C1_Init+0x74>)
 8000ba6:	4a1c      	ldr	r2, [pc, #112]	; (8000c18 <MX_I2C1_Init+0x78>)
 8000ba8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x20303E5D;
 8000baa:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <MX_I2C1_Init+0x74>)
 8000bac:	4a1b      	ldr	r2, [pc, #108]	; (8000c1c <MX_I2C1_Init+0x7c>)
 8000bae:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000bb0:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <MX_I2C1_Init+0x74>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bb6:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <MX_I2C1_Init+0x74>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bbc:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <MX_I2C1_Init+0x74>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000bc2:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <MX_I2C1_Init+0x74>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <MX_I2C1_Init+0x74>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <MX_I2C1_Init+0x74>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <MX_I2C1_Init+0x74>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bda:	480e      	ldr	r0, [pc, #56]	; (8000c14 <MX_I2C1_Init+0x74>)
 8000bdc:	f002 fc4e 	bl	800347c <HAL_I2C_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 8000be6:	f000 fedb 	bl	80019a0 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bea:	2100      	movs	r1, #0
 8000bec:	4809      	ldr	r0, [pc, #36]	; (8000c14 <MX_I2C1_Init+0x74>)
 8000bee:	f003 f99d 	bl	8003f2c <HAL_I2CEx_ConfigAnalogFilter>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8000bf8:	f000 fed2 	bl	80019a0 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	4805      	ldr	r0, [pc, #20]	; (8000c14 <MX_I2C1_Init+0x74>)
 8000c00:	f003 f9df 	bl	8003fc2 <HAL_I2CEx_ConfigDigitalFilter>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 8000c0a:	f000 fec9 	bl	80019a0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	200000d8 	.word	0x200000d8
 8000c18:	40005400 	.word	0x40005400
 8000c1c:	20303e5d 	.word	0x20303e5d

08000c20 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8000c24:	4b1b      	ldr	r3, [pc, #108]	; (8000c94 <MX_I2C2_Init+0x74>)
 8000c26:	4a1c      	ldr	r2, [pc, #112]	; (8000c98 <MX_I2C2_Init+0x78>)
 8000c28:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x20303E5D;
 8000c2a:	4b1a      	ldr	r3, [pc, #104]	; (8000c94 <MX_I2C2_Init+0x74>)
 8000c2c:	4a1b      	ldr	r2, [pc, #108]	; (8000c9c <MX_I2C2_Init+0x7c>)
 8000c2e:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 8000c30:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <MX_I2C2_Init+0x74>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c36:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <MX_I2C2_Init+0x74>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c3c:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <MX_I2C2_Init+0x74>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 8000c42:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <MX_I2C2_Init+0x74>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c48:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <MX_I2C2_Init+0x74>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c4e:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <MX_I2C2_Init+0x74>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c54:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <MX_I2C2_Init+0x74>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c5a:	480e      	ldr	r0, [pc, #56]	; (8000c94 <MX_I2C2_Init+0x74>)
 8000c5c:	f002 fc0e 	bl	800347c <HAL_I2C_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_I2C2_Init+0x4a>
	{
		Error_Handler();
 8000c66:	f000 fe9b 	bl	80019a0 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4809      	ldr	r0, [pc, #36]	; (8000c94 <MX_I2C2_Init+0x74>)
 8000c6e:	f003 f95d 	bl	8003f2c <HAL_I2CEx_ConfigAnalogFilter>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_I2C2_Init+0x5c>
	{
		Error_Handler();
 8000c78:	f000 fe92 	bl	80019a0 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4805      	ldr	r0, [pc, #20]	; (8000c94 <MX_I2C2_Init+0x74>)
 8000c80:	f003 f99f 	bl	8003fc2 <HAL_I2CEx_ConfigDigitalFilter>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_I2C2_Init+0x6e>
	{
		Error_Handler();
 8000c8a:	f000 fe89 	bl	80019a0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	2000012c 	.word	0x2000012c
 8000c98:	40005800 	.word	0x40005800
 8000c9c:	20303e5d 	.word	0x20303e5d

08000ca0 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000ca4:	4b1b      	ldr	r3, [pc, #108]	; (8000d14 <MX_SPI1_Init+0x74>)
 8000ca6:	4a1c      	ldr	r2, [pc, #112]	; (8000d18 <MX_SPI1_Init+0x78>)
 8000ca8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000caa:	4b1a      	ldr	r3, [pc, #104]	; (8000d14 <MX_SPI1_Init+0x74>)
 8000cac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cb0:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cb2:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <MX_SPI1_Init+0x74>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000cb8:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <MX_SPI1_Init+0x74>)
 8000cba:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000cbe:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cc0:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <MX_SPI1_Init+0x74>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cc6:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <MX_SPI1_Init+0x74>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <MX_SPI1_Init+0x74>)
 8000cce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cd2:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cd4:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <MX_SPI1_Init+0x74>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cda:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <MX_SPI1_Init+0x74>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <MX_SPI1_Init+0x74>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <MX_SPI1_Init+0x74>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8000cec:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <MX_SPI1_Init+0x74>)
 8000cee:	2207      	movs	r2, #7
 8000cf0:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cf2:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <MX_SPI1_Init+0x74>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <MX_SPI1_Init+0x74>)
 8000cfa:	2208      	movs	r2, #8
 8000cfc:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cfe:	4805      	ldr	r0, [pc, #20]	; (8000d14 <MX_SPI1_Init+0x74>)
 8000d00:	f004 fb08 	bl	8005314 <HAL_SPI_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_SPI1_Init+0x6e>
	{
		Error_Handler();
 8000d0a:	f000 fe49 	bl	80019a0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000180 	.word	0x20000180
 8000d18:	40013000 	.word	0x40013000

08000d1c <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b09a      	sub	sp, #104	; 0x68
 8000d20:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d22:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d30:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000d3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
 8000d4c:	615a      	str	r2, [r3, #20]
 8000d4e:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	222c      	movs	r2, #44	; 0x2c
 8000d54:	2100      	movs	r1, #0
 8000d56:	4618      	mov	r0, r3
 8000d58:	f007 f90e 	bl	8007f78 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000d5c:	4b55      	ldr	r3, [pc, #340]	; (8000eb4 <MX_TIM1_Init+0x198>)
 8000d5e:	4a56      	ldr	r2, [pc, #344]	; (8000eb8 <MX_TIM1_Init+0x19c>)
 8000d60:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = TIM1_PSC_VALUE;
 8000d62:	4b54      	ldr	r3, [pc, #336]	; (8000eb4 <MX_TIM1_Init+0x198>)
 8000d64:	f240 32bf 	movw	r2, #959	; 0x3bf
 8000d68:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d6a:	4b52      	ldr	r3, [pc, #328]	; (8000eb4 <MX_TIM1_Init+0x198>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = TIM1_ARR_VALUE;
 8000d70:	4b50      	ldr	r3, [pc, #320]	; (8000eb4 <MX_TIM1_Init+0x198>)
 8000d72:	22c8      	movs	r2, #200	; 0xc8
 8000d74:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d76:	4b4f      	ldr	r3, [pc, #316]	; (8000eb4 <MX_TIM1_Init+0x198>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000d7c:	4b4d      	ldr	r3, [pc, #308]	; (8000eb4 <MX_TIM1_Init+0x198>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d82:	4b4c      	ldr	r3, [pc, #304]	; (8000eb4 <MX_TIM1_Init+0x198>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d88:	484a      	ldr	r0, [pc, #296]	; (8000eb4 <MX_TIM1_Init+0x198>)
 8000d8a:	f004 fb6e 	bl	800546a <HAL_TIM_Base_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM1_Init+0x7c>
	{
		Error_Handler();
 8000d94:	f000 fe04 	bl	80019a0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d9c:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d9e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000da2:	4619      	mov	r1, r3
 8000da4:	4843      	ldr	r0, [pc, #268]	; (8000eb4 <MX_TIM1_Init+0x198>)
 8000da6:	f005 f867 	bl	8005e78 <HAL_TIM_ConfigClockSource>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_TIM1_Init+0x98>
	{
		Error_Handler();
 8000db0:	f000 fdf6 	bl	80019a0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000db4:	483f      	ldr	r0, [pc, #252]	; (8000eb4 <MX_TIM1_Init+0x198>)
 8000db6:	f004 fc27 	bl	8005608 <HAL_TIM_PWM_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_TIM1_Init+0xa8>
	{
		Error_Handler();
 8000dc0:	f000 fdee 	bl	80019a0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dd0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4837      	ldr	r0, [pc, #220]	; (8000eb4 <MX_TIM1_Init+0x198>)
 8000dd8:	f005 fe02 	bl	80069e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_TIM1_Init+0xca>
	{
		Error_Handler();
 8000de2:	f000 fddd 	bl	80019a0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000de6:	2360      	movs	r3, #96	; 0x60
 8000de8:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dee:	2300      	movs	r3, #0
 8000df0:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000df2:	2300      	movs	r3, #0
 8000df4:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e06:	2200      	movs	r2, #0
 8000e08:	4619      	mov	r1, r3
 8000e0a:	482a      	ldr	r0, [pc, #168]	; (8000eb4 <MX_TIM1_Init+0x198>)
 8000e0c:	f004 ff20 	bl	8005c50 <HAL_TIM_PWM_ConfigChannel>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM1_Init+0xfe>
	{
		Error_Handler();
 8000e16:	f000 fdc3 	bl	80019a0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e1e:	2204      	movs	r2, #4
 8000e20:	4619      	mov	r1, r3
 8000e22:	4824      	ldr	r0, [pc, #144]	; (8000eb4 <MX_TIM1_Init+0x198>)
 8000e24:	f004 ff14 	bl	8005c50 <HAL_TIM_PWM_ConfigChannel>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM1_Init+0x116>
	{
		Error_Handler();
 8000e2e:	f000 fdb7 	bl	80019a0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e36:	2208      	movs	r2, #8
 8000e38:	4619      	mov	r1, r3
 8000e3a:	481e      	ldr	r0, [pc, #120]	; (8000eb4 <MX_TIM1_Init+0x198>)
 8000e3c:	f004 ff08 	bl	8005c50 <HAL_TIM_PWM_ConfigChannel>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_TIM1_Init+0x12e>
	{
		Error_Handler();
 8000e46:	f000 fdab 	bl	80019a0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e4e:	220c      	movs	r2, #12
 8000e50:	4619      	mov	r1, r3
 8000e52:	4818      	ldr	r0, [pc, #96]	; (8000eb4 <MX_TIM1_Init+0x198>)
 8000e54:	f004 fefc 	bl	8005c50 <HAL_TIM_PWM_ConfigChannel>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM1_Init+0x146>
	{
		Error_Handler();
 8000e5e:	f000 fd9f 	bl	80019a0 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e62:	2300      	movs	r3, #0
 8000e64:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e7a:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e80:	2300      	movs	r3, #0
 8000e82:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	4619      	mov	r1, r3
 8000e96:	4807      	ldr	r0, [pc, #28]	; (8000eb4 <MX_TIM1_Init+0x198>)
 8000e98:	f005 fe30 	bl	8006afc <HAL_TIMEx_ConfigBreakDeadTime>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_TIM1_Init+0x18a>
	{
		Error_Handler();
 8000ea2:	f000 fd7d 	bl	80019a0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000ea6:	4803      	ldr	r0, [pc, #12]	; (8000eb4 <MX_TIM1_Init+0x198>)
 8000ea8:	f001 f840 	bl	8001f2c <HAL_TIM_MspPostInit>

}
 8000eac:	bf00      	nop
 8000eae:	3768      	adds	r7, #104	; 0x68
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	200001e4 	.word	0x200001e4
 8000eb8:	40010000 	.word	0x40010000

08000ebc <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b092      	sub	sp, #72	; 0x48
 8000ec0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ec2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000edc:	f107 0310 	add.w	r3, r7, #16
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
 8000eec:	615a      	str	r2, [r3, #20]
 8000eee:	619a      	str	r2, [r3, #24]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8000ef0:	463b      	mov	r3, r7
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000efc:	4b3b      	ldr	r3, [pc, #236]	; (8000fec <MX_TIM2_Init+0x130>)
 8000efe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f02:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8000f04:	4b39      	ldr	r3, [pc, #228]	; (8000fec <MX_TIM2_Init+0x130>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f0a:	4b38      	ldr	r3, [pc, #224]	; (8000fec <MX_TIM2_Init+0x130>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8000f10:	4b36      	ldr	r3, [pc, #216]	; (8000fec <MX_TIM2_Init+0x130>)
 8000f12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f16:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f18:	4b34      	ldr	r3, [pc, #208]	; (8000fec <MX_TIM2_Init+0x130>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f1e:	4b33      	ldr	r3, [pc, #204]	; (8000fec <MX_TIM2_Init+0x130>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f24:	4831      	ldr	r0, [pc, #196]	; (8000fec <MX_TIM2_Init+0x130>)
 8000f26:	f004 faa0 	bl	800546a <HAL_TIM_Base_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_TIM2_Init+0x78>
	{
		Error_Handler();
 8000f30:	f000 fd36 	bl	80019a0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f38:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f3a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f3e:	4619      	mov	r1, r3
 8000f40:	482a      	ldr	r0, [pc, #168]	; (8000fec <MX_TIM2_Init+0x130>)
 8000f42:	f004 ff99 	bl	8005e78 <HAL_TIM_ConfigClockSource>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_TIM2_Init+0x94>
	{
		Error_Handler();
 8000f4c:	f000 fd28 	bl	80019a0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f50:	4826      	ldr	r0, [pc, #152]	; (8000fec <MX_TIM2_Init+0x130>)
 8000f52:	f004 fb59 	bl	8005608 <HAL_TIM_PWM_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_TIM2_Init+0xa4>
	{
		Error_Handler();
 8000f5c:	f000 fd20 	bl	80019a0 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000f60:	4822      	ldr	r0, [pc, #136]	; (8000fec <MX_TIM2_Init+0x130>)
 8000f62:	f004 fbb2 	bl	80056ca <HAL_TIM_IC_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_TIM2_Init+0xb4>
	{
		Error_Handler();
 8000f6c:	f000 fd18 	bl	80019a0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f70:	2300      	movs	r3, #0
 8000f72:	62fb      	str	r3, [r7, #44]	; 0x2c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f74:	2300      	movs	r3, #0
 8000f76:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	481b      	ldr	r0, [pc, #108]	; (8000fec <MX_TIM2_Init+0x130>)
 8000f80:	f005 fd2e 	bl	80069e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM2_Init+0xd2>
	{
		Error_Handler();
 8000f8a:	f000 fd09 	bl	80019a0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f8e:	2360      	movs	r3, #96	; 0x60
 8000f90:	613b      	str	r3, [r7, #16]
	sConfigOC.Pulse = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61bb      	str	r3, [r7, #24]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	623b      	str	r3, [r7, #32]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f9e:	f107 0310 	add.w	r3, r7, #16
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4811      	ldr	r0, [pc, #68]	; (8000fec <MX_TIM2_Init+0x130>)
 8000fa8:	f004 fe52 	bl	8005c50 <HAL_TIM_PWM_ConfigChannel>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_TIM2_Init+0xfa>
	{
		Error_Handler();
 8000fb2:	f000 fcf5 	bl	80019a0 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	2208      	movs	r2, #8
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4807      	ldr	r0, [pc, #28]	; (8000fec <MX_TIM2_Init+0x130>)
 8000fce:	f004 fda2 	bl	8005b16 <HAL_TIM_IC_ConfigChannel>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_TIM2_Init+0x120>
	{
		Error_Handler();
 8000fd8:	f000 fce2 	bl	80019a0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8000fdc:	4803      	ldr	r0, [pc, #12]	; (8000fec <MX_TIM2_Init+0x130>)
 8000fde:	f000 ffa5 	bl	8001f2c <HAL_TIM_MspPostInit>

}
 8000fe2:	bf00      	nop
 8000fe4:	3748      	adds	r7, #72	; 0x48
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000230 	.word	0x20000230

08000ff0 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08c      	sub	sp, #48	; 0x30
 8000ff4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 8000ff6:	f107 030c 	add.w	r3, r7, #12
 8000ffa:	2224      	movs	r2, #36	; 0x24
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f006 ffba 	bl	8007f78 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001004:	463b      	mov	r3, r7
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800100e:	4b21      	ldr	r3, [pc, #132]	; (8001094 <MX_TIM3_Init+0xa4>)
 8001010:	4a21      	ldr	r2, [pc, #132]	; (8001098 <MX_TIM3_Init+0xa8>)
 8001012:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8001014:	4b1f      	ldr	r3, [pc, #124]	; (8001094 <MX_TIM3_Init+0xa4>)
 8001016:	2200      	movs	r2, #0
 8001018:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800101a:	4b1e      	ldr	r3, [pc, #120]	; (8001094 <MX_TIM3_Init+0xa4>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8001020:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <MX_TIM3_Init+0xa4>)
 8001022:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001026:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001028:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <MX_TIM3_Init+0xa4>)
 800102a:	2200      	movs	r2, #0
 800102c:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800102e:	4b19      	ldr	r3, [pc, #100]	; (8001094 <MX_TIM3_Init+0xa4>)
 8001030:	2200      	movs	r2, #0
 8001032:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001034:	2301      	movs	r3, #1
 8001036:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001038:	2300      	movs	r3, #0
 800103a:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800103c:	2301      	movs	r3, #1
 800103e:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001040:	2300      	movs	r3, #0
 8001042:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001048:	2300      	movs	r3, #0
 800104a:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800104c:	2301      	movs	r3, #1
 800104e:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001050:	2300      	movs	r3, #0
 8001052:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	4619      	mov	r1, r3
 800105e:	480d      	ldr	r0, [pc, #52]	; (8001094 <MX_TIM3_Init+0xa4>)
 8001060:	f004 fb94 	bl	800578c <HAL_TIM_Encoder_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_TIM3_Init+0x7e>
	{
		Error_Handler();
 800106a:	f000 fc99 	bl	80019a0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800106e:	2300      	movs	r3, #0
 8001070:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001072:	2300      	movs	r3, #0
 8001074:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001076:	463b      	mov	r3, r7
 8001078:	4619      	mov	r1, r3
 800107a:	4806      	ldr	r0, [pc, #24]	; (8001094 <MX_TIM3_Init+0xa4>)
 800107c:	f005 fcb0 	bl	80069e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_TIM3_Init+0x9a>
	{
		Error_Handler();
 8001086:	f000 fc8b 	bl	80019a0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800108a:	bf00      	nop
 800108c:	3730      	adds	r7, #48	; 0x30
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	2000027c 	.word	0x2000027c
 8001098:	40000400 	.word	0x40000400

0800109c <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08c      	sub	sp, #48	; 0x30
 80010a0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 80010a2:	f107 030c 	add.w	r3, r7, #12
 80010a6:	2224      	movs	r2, #36	; 0x24
 80010a8:	2100      	movs	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f006 ff64 	bl	8007f78 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010b0:	463b      	mov	r3, r7
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80010ba:	4b21      	ldr	r3, [pc, #132]	; (8001140 <MX_TIM4_Init+0xa4>)
 80010bc:	4a21      	ldr	r2, [pc, #132]	; (8001144 <MX_TIM4_Init+0xa8>)
 80010be:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 80010c0:	4b1f      	ldr	r3, [pc, #124]	; (8001140 <MX_TIM4_Init+0xa4>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c6:	4b1e      	ldr	r3, [pc, #120]	; (8001140 <MX_TIM4_Init+0xa4>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 80010cc:	4b1c      	ldr	r3, [pc, #112]	; (8001140 <MX_TIM4_Init+0xa4>)
 80010ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010d2:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d4:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <MX_TIM4_Init+0xa4>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010da:	4b19      	ldr	r3, [pc, #100]	; (8001140 <MX_TIM4_Init+0xa4>)
 80010dc:	2200      	movs	r2, #0
 80010de:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80010e0:	2301      	movs	r3, #1
 80010e2:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010e4:	2300      	movs	r3, #0
 80010e6:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010e8:	2301      	movs	r3, #1
 80010ea:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010f4:	2300      	movs	r3, #0
 80010f6:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010f8:	2301      	movs	r3, #1
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010fc:	2300      	movs	r3, #0
 80010fe:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	4619      	mov	r1, r3
 800110a:	480d      	ldr	r0, [pc, #52]	; (8001140 <MX_TIM4_Init+0xa4>)
 800110c:	f004 fb3e 	bl	800578c <HAL_TIM_Encoder_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_TIM4_Init+0x7e>
	{
		Error_Handler();
 8001116:	f000 fc43 	bl	80019a0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800111a:	2300      	movs	r3, #0
 800111c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800111e:	2300      	movs	r3, #0
 8001120:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001122:	463b      	mov	r3, r7
 8001124:	4619      	mov	r1, r3
 8001126:	4806      	ldr	r0, [pc, #24]	; (8001140 <MX_TIM4_Init+0xa4>)
 8001128:	f005 fc5a 	bl	80069e0 <HAL_TIMEx_MasterConfigSynchronization>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_TIM4_Init+0x9a>
	{
		Error_Handler();
 8001132:	f000 fc35 	bl	80019a0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8001136:	bf00      	nop
 8001138:	3730      	adds	r7, #48	; 0x30
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200002c8 	.word	0x200002c8
 8001144:	40000800 	.word	0x40000800

08001148 <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08e      	sub	sp, #56	; 0x38
 800114c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800114e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800115c:	f107 031c 	add.w	r3, r7, #28
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001168:	463b      	mov	r3, r7
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
 8001174:	611a      	str	r2, [r3, #16]
 8001176:	615a      	str	r2, [r3, #20]
 8001178:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 800117a:	4b2d      	ldr	r3, [pc, #180]	; (8001230 <MX_TIM5_Init+0xe8>)
 800117c:	4a2d      	ldr	r2, [pc, #180]	; (8001234 <MX_TIM5_Init+0xec>)
 800117e:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8001180:	4b2b      	ldr	r3, [pc, #172]	; (8001230 <MX_TIM5_Init+0xe8>)
 8001182:	2200      	movs	r2, #0
 8001184:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001186:	4b2a      	ldr	r3, [pc, #168]	; (8001230 <MX_TIM5_Init+0xe8>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 800118c:	4b28      	ldr	r3, [pc, #160]	; (8001230 <MX_TIM5_Init+0xe8>)
 800118e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001192:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001194:	4b26      	ldr	r3, [pc, #152]	; (8001230 <MX_TIM5_Init+0xe8>)
 8001196:	2200      	movs	r2, #0
 8001198:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800119a:	4b25      	ldr	r3, [pc, #148]	; (8001230 <MX_TIM5_Init+0xe8>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80011a0:	4823      	ldr	r0, [pc, #140]	; (8001230 <MX_TIM5_Init+0xe8>)
 80011a2:	f004 f962 	bl	800546a <HAL_TIM_Base_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_TIM5_Init+0x68>
	{
		Error_Handler();
 80011ac:	f000 fbf8 	bl	80019a0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b4:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80011b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ba:	4619      	mov	r1, r3
 80011bc:	481c      	ldr	r0, [pc, #112]	; (8001230 <MX_TIM5_Init+0xe8>)
 80011be:	f004 fe5b 	bl	8005e78 <HAL_TIM_ConfigClockSource>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM5_Init+0x84>
	{
		Error_Handler();
 80011c8:	f000 fbea 	bl	80019a0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80011cc:	4818      	ldr	r0, [pc, #96]	; (8001230 <MX_TIM5_Init+0xe8>)
 80011ce:	f004 fa1b 	bl	8005608 <HAL_TIM_PWM_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM5_Init+0x94>
	{
		Error_Handler();
 80011d8:	f000 fbe2 	bl	80019a0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011dc:	2300      	movs	r3, #0
 80011de:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	4619      	mov	r1, r3
 80011ea:	4811      	ldr	r0, [pc, #68]	; (8001230 <MX_TIM5_Init+0xe8>)
 80011ec:	f005 fbf8 	bl	80069e0 <HAL_TIMEx_MasterConfigSynchronization>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM5_Init+0xb2>
	{
		Error_Handler();
 80011f6:	f000 fbd3 	bl	80019a0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011fa:	2360      	movs	r3, #96	; 0x60
 80011fc:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001202:	2300      	movs	r3, #0
 8001204:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800120a:	463b      	mov	r3, r7
 800120c:	2200      	movs	r2, #0
 800120e:	4619      	mov	r1, r3
 8001210:	4807      	ldr	r0, [pc, #28]	; (8001230 <MX_TIM5_Init+0xe8>)
 8001212:	f004 fd1d 	bl	8005c50 <HAL_TIM_PWM_ConfigChannel>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM5_Init+0xd8>
	{
		Error_Handler();
 800121c:	f000 fbc0 	bl	80019a0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */
	HAL_TIM_MspPostInit(&htim5);
 8001220:	4803      	ldr	r0, [pc, #12]	; (8001230 <MX_TIM5_Init+0xe8>)
 8001222:	f000 fe83 	bl	8001f2c <HAL_TIM_MspPostInit>

}
 8001226:	bf00      	nop
 8001228:	3738      	adds	r7, #56	; 0x38
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000314 	.word	0x20000314
 8001234:	40000c00 	.word	0x40000c00

08001238 <MX_TIM7_Init>:
 * @brief TIM7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM7_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	htim7.Instance = TIM7;
 8001248:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <MX_TIM7_Init+0x68>)
 800124a:	4a16      	ldr	r2, [pc, #88]	; (80012a4 <MX_TIM7_Init+0x6c>)
 800124c:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 1000-1;
 800124e:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <MX_TIM7_Init+0x68>)
 8001250:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001254:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001256:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <MX_TIM7_Init+0x68>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 9600-1;
 800125c:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <MX_TIM7_Init+0x68>)
 800125e:	f242 527f 	movw	r2, #9599	; 0x257f
 8001262:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001264:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <MX_TIM7_Init+0x68>)
 8001266:	2200      	movs	r2, #0
 8001268:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800126a:	480d      	ldr	r0, [pc, #52]	; (80012a0 <MX_TIM7_Init+0x68>)
 800126c:	f004 f8fd 	bl	800546a <HAL_TIM_Base_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM7_Init+0x42>
	{
		Error_Handler();
 8001276:	f000 fb93 	bl	80019a0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	4619      	mov	r1, r3
 8001286:	4806      	ldr	r0, [pc, #24]	; (80012a0 <MX_TIM7_Init+0x68>)
 8001288:	f005 fbaa 	bl	80069e0 <HAL_TIMEx_MasterConfigSynchronization>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM7_Init+0x5e>
	{
		Error_Handler();
 8001292:	f000 fb85 	bl	80019a0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM7_Init 2 */

	/* USER CODE END TIM7_Init 2 */

}
 8001296:	bf00      	nop
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000360 	.word	0x20000360
 80012a4:	40001400 	.word	0x40001400

080012a8 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b09a      	sub	sp, #104	; 0x68
 80012ac:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80012c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
 80012d8:	615a      	str	r2, [r3, #20]
 80012da:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	222c      	movs	r2, #44	; 0x2c
 80012e0:	2100      	movs	r1, #0
 80012e2:	4618      	mov	r0, r3
 80012e4:	f006 fe48 	bl	8007f78 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 80012e8:	4b56      	ldr	r3, [pc, #344]	; (8001444 <MX_TIM8_Init+0x19c>)
 80012ea:	4a57      	ldr	r2, [pc, #348]	; (8001448 <MX_TIM8_Init+0x1a0>)
 80012ec:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = TIM8_PSC_VALUE;
 80012ee:	4b55      	ldr	r3, [pc, #340]	; (8001444 <MX_TIM8_Init+0x19c>)
 80012f0:	f240 32bf 	movw	r2, #959	; 0x3bf
 80012f4:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f6:	4b53      	ldr	r3, [pc, #332]	; (8001444 <MX_TIM8_Init+0x19c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = TIM8_ARR_VALUE;
 80012fc:	4b51      	ldr	r3, [pc, #324]	; (8001444 <MX_TIM8_Init+0x19c>)
 80012fe:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001302:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001304:	4b4f      	ldr	r3, [pc, #316]	; (8001444 <MX_TIM8_Init+0x19c>)
 8001306:	2200      	movs	r2, #0
 8001308:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 800130a:	4b4e      	ldr	r3, [pc, #312]	; (8001444 <MX_TIM8_Init+0x19c>)
 800130c:	2200      	movs	r2, #0
 800130e:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001310:	4b4c      	ldr	r3, [pc, #304]	; (8001444 <MX_TIM8_Init+0x19c>)
 8001312:	2200      	movs	r2, #0
 8001314:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001316:	484b      	ldr	r0, [pc, #300]	; (8001444 <MX_TIM8_Init+0x19c>)
 8001318:	f004 f8a7 	bl	800546a <HAL_TIM_Base_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM8_Init+0x7e>
	{
		Error_Handler();
 8001322:	f000 fb3d 	bl	80019a0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001326:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800132a:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800132c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001330:	4619      	mov	r1, r3
 8001332:	4844      	ldr	r0, [pc, #272]	; (8001444 <MX_TIM8_Init+0x19c>)
 8001334:	f004 fda0 	bl	8005e78 <HAL_TIM_ConfigClockSource>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM8_Init+0x9a>
	{
		Error_Handler();
 800133e:	f000 fb2f 	bl	80019a0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001342:	4840      	ldr	r0, [pc, #256]	; (8001444 <MX_TIM8_Init+0x19c>)
 8001344:	f004 f960 	bl	8005608 <HAL_TIM_PWM_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM8_Init+0xaa>
	{
		Error_Handler();
 800134e:	f000 fb27 	bl	80019a0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001352:	2300      	movs	r3, #0
 8001354:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001356:	2300      	movs	r3, #0
 8001358:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800135a:	2300      	movs	r3, #0
 800135c:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800135e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001362:	4619      	mov	r1, r3
 8001364:	4837      	ldr	r0, [pc, #220]	; (8001444 <MX_TIM8_Init+0x19c>)
 8001366:	f005 fb3b 	bl	80069e0 <HAL_TIMEx_MasterConfigSynchronization>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM8_Init+0xcc>
	{
		Error_Handler();
 8001370:	f000 fb16 	bl	80019a0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001374:	2360      	movs	r3, #96	; 0x60
 8001376:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800137c:	2300      	movs	r3, #0
 800137e:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001380:	2300      	movs	r3, #0
 8001382:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001384:	2300      	movs	r3, #0
 8001386:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001388:	2300      	movs	r3, #0
 800138a:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800138c:	2300      	movs	r3, #0
 800138e:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001390:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001394:	2200      	movs	r2, #0
 8001396:	4619      	mov	r1, r3
 8001398:	482a      	ldr	r0, [pc, #168]	; (8001444 <MX_TIM8_Init+0x19c>)
 800139a:	f004 fc59 	bl	8005c50 <HAL_TIM_PWM_ConfigChannel>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM8_Init+0x100>
	{
		Error_Handler();
 80013a4:	f000 fafc 	bl	80019a0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013ac:	2204      	movs	r2, #4
 80013ae:	4619      	mov	r1, r3
 80013b0:	4824      	ldr	r0, [pc, #144]	; (8001444 <MX_TIM8_Init+0x19c>)
 80013b2:	f004 fc4d 	bl	8005c50 <HAL_TIM_PWM_ConfigChannel>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM8_Init+0x118>
	{
		Error_Handler();
 80013bc:	f000 faf0 	bl	80019a0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013c4:	2208      	movs	r2, #8
 80013c6:	4619      	mov	r1, r3
 80013c8:	481e      	ldr	r0, [pc, #120]	; (8001444 <MX_TIM8_Init+0x19c>)
 80013ca:	f004 fc41 	bl	8005c50 <HAL_TIM_PWM_ConfigChannel>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM8_Init+0x130>
	{
		Error_Handler();
 80013d4:	f000 fae4 	bl	80019a0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013dc:	220c      	movs	r2, #12
 80013de:	4619      	mov	r1, r3
 80013e0:	4818      	ldr	r0, [pc, #96]	; (8001444 <MX_TIM8_Init+0x19c>)
 80013e2:	f004 fc35 	bl	8005c50 <HAL_TIM_PWM_ConfigChannel>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM8_Init+0x148>
	{
		Error_Handler();
 80013ec:	f000 fad8 	bl	80019a0 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013f0:	2300      	movs	r3, #0
 80013f2:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001404:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001408:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800140e:	2300      	movs	r3, #0
 8001410:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001412:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001416:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001418:	2300      	movs	r3, #0
 800141a:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800141c:	2300      	movs	r3, #0
 800141e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	4619      	mov	r1, r3
 8001424:	4807      	ldr	r0, [pc, #28]	; (8001444 <MX_TIM8_Init+0x19c>)
 8001426:	f005 fb69 	bl	8006afc <HAL_TIMEx_ConfigBreakDeadTime>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM8_Init+0x18c>
	{
		Error_Handler();
 8001430:	f000 fab6 	bl	80019a0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 8001434:	4803      	ldr	r0, [pc, #12]	; (8001444 <MX_TIM8_Init+0x19c>)
 8001436:	f000 fd79 	bl	8001f2c <HAL_TIM_MspPostInit>

}
 800143a:	bf00      	nop
 800143c:	3768      	adds	r7, #104	; 0x68
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200003ac 	.word	0x200003ac
 8001448:	40010400 	.word	0x40010400

0800144c <MX_TIM10_Init>:
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
	/* USER CODE END TIM10_Init 0 */

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 8001450:	4b0e      	ldr	r3, [pc, #56]	; (800148c <MX_TIM10_Init+0x40>)
 8001452:	4a0f      	ldr	r2, [pc, #60]	; (8001490 <MX_TIM10_Init+0x44>)
 8001454:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 1000-1;
 8001456:	4b0d      	ldr	r3, [pc, #52]	; (800148c <MX_TIM10_Init+0x40>)
 8001458:	f240 32e7 	movw	r2, #999	; 0x3e7
 800145c:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145e:	4b0b      	ldr	r3, [pc, #44]	; (800148c <MX_TIM10_Init+0x40>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 9600-1;
 8001464:	4b09      	ldr	r3, [pc, #36]	; (800148c <MX_TIM10_Init+0x40>)
 8001466:	f242 527f 	movw	r2, #9599	; 0x257f
 800146a:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800146c:	4b07      	ldr	r3, [pc, #28]	; (800148c <MX_TIM10_Init+0x40>)
 800146e:	2200      	movs	r2, #0
 8001470:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001472:	4b06      	ldr	r3, [pc, #24]	; (800148c <MX_TIM10_Init+0x40>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001478:	4804      	ldr	r0, [pc, #16]	; (800148c <MX_TIM10_Init+0x40>)
 800147a:	f003 fff6 	bl	800546a <HAL_TIM_Base_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM10_Init+0x3c>
	{
		Error_Handler();
 8001484:	f000 fa8c 	bl	80019a0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */

}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}
 800148c:	200003f8 	.word	0x200003f8
 8001490:	40014400 	.word	0x40014400

08001494 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8001498:	4b14      	ldr	r3, [pc, #80]	; (80014ec <MX_UART4_Init+0x58>)
 800149a:	4a15      	ldr	r2, [pc, #84]	; (80014f0 <MX_UART4_Init+0x5c>)
 800149c:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 9600;
 800149e:	4b13      	ldr	r3, [pc, #76]	; (80014ec <MX_UART4_Init+0x58>)
 80014a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80014a4:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80014a6:	4b11      	ldr	r3, [pc, #68]	; (80014ec <MX_UART4_Init+0x58>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 80014ac:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <MX_UART4_Init+0x58>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 80014b2:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <MX_UART4_Init+0x58>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <MX_UART4_Init+0x58>)
 80014ba:	220c      	movs	r2, #12
 80014bc:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014be:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <MX_UART4_Init+0x58>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c4:	4b09      	ldr	r3, [pc, #36]	; (80014ec <MX_UART4_Init+0x58>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ca:	4b08      	ldr	r3, [pc, #32]	; (80014ec <MX_UART4_Init+0x58>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	621a      	str	r2, [r3, #32]
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <MX_UART4_Init+0x58>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart4) != HAL_OK)
 80014d6:	4805      	ldr	r0, [pc, #20]	; (80014ec <MX_UART4_Init+0x58>)
 80014d8:	f005 fbac 	bl	8006c34 <HAL_UART_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_UART4_Init+0x52>
	{
		Error_Handler();
 80014e2:	f000 fa5d 	bl	80019a0 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000444 	.word	0x20000444
 80014f0:	40004c00 	.word	0x40004c00

080014f4 <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 80014f8:	4b14      	ldr	r3, [pc, #80]	; (800154c <MX_UART5_Init+0x58>)
 80014fa:	4a15      	ldr	r2, [pc, #84]	; (8001550 <MX_UART5_Init+0x5c>)
 80014fc:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 80014fe:	4b13      	ldr	r3, [pc, #76]	; (800154c <MX_UART5_Init+0x58>)
 8001500:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001504:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001506:	4b11      	ldr	r3, [pc, #68]	; (800154c <MX_UART5_Init+0x58>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 800150c:	4b0f      	ldr	r3, [pc, #60]	; (800154c <MX_UART5_Init+0x58>)
 800150e:	2200      	movs	r2, #0
 8001510:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 8001512:	4b0e      	ldr	r3, [pc, #56]	; (800154c <MX_UART5_Init+0x58>)
 8001514:	2200      	movs	r2, #0
 8001516:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8001518:	4b0c      	ldr	r3, [pc, #48]	; (800154c <MX_UART5_Init+0x58>)
 800151a:	220c      	movs	r2, #12
 800151c:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800151e:	4b0b      	ldr	r3, [pc, #44]	; (800154c <MX_UART5_Init+0x58>)
 8001520:	2200      	movs	r2, #0
 8001522:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001524:	4b09      	ldr	r3, [pc, #36]	; (800154c <MX_UART5_Init+0x58>)
 8001526:	2200      	movs	r2, #0
 8001528:	61da      	str	r2, [r3, #28]
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800152a:	4b08      	ldr	r3, [pc, #32]	; (800154c <MX_UART5_Init+0x58>)
 800152c:	2200      	movs	r2, #0
 800152e:	621a      	str	r2, [r3, #32]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <MX_UART5_Init+0x58>)
 8001532:	2200      	movs	r2, #0
 8001534:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart5) != HAL_OK)
 8001536:	4805      	ldr	r0, [pc, #20]	; (800154c <MX_UART5_Init+0x58>)
 8001538:	f005 fb7c 	bl	8006c34 <HAL_UART_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_UART5_Init+0x52>
	{
		Error_Handler();
 8001542:	f000 fa2d 	bl	80019a0 <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	200004cc 	.word	0x200004cc
 8001550:	40005000 	.word	0x40005000

08001554 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001558:	4b14      	ldr	r3, [pc, #80]	; (80015ac <MX_USART1_UART_Init+0x58>)
 800155a:	4a15      	ldr	r2, [pc, #84]	; (80015b0 <MX_USART1_UART_Init+0x5c>)
 800155c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800155e:	4b13      	ldr	r3, [pc, #76]	; (80015ac <MX_USART1_UART_Init+0x58>)
 8001560:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001564:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001566:	4b11      	ldr	r3, [pc, #68]	; (80015ac <MX_USART1_UART_Init+0x58>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800156c:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <MX_USART1_UART_Init+0x58>)
 800156e:	2200      	movs	r2, #0
 8001570:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001572:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <MX_USART1_UART_Init+0x58>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <MX_USART1_UART_Init+0x58>)
 800157a:	220c      	movs	r2, #12
 800157c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <MX_USART1_UART_Init+0x58>)
 8001580:	2200      	movs	r2, #0
 8001582:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001584:	4b09      	ldr	r3, [pc, #36]	; (80015ac <MX_USART1_UART_Init+0x58>)
 8001586:	2200      	movs	r2, #0
 8001588:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800158a:	4b08      	ldr	r3, [pc, #32]	; (80015ac <MX_USART1_UART_Init+0x58>)
 800158c:	2200      	movs	r2, #0
 800158e:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <MX_USART1_UART_Init+0x58>)
 8001592:	2200      	movs	r2, #0
 8001594:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001596:	4805      	ldr	r0, [pc, #20]	; (80015ac <MX_USART1_UART_Init+0x58>)
 8001598:	f005 fb4c 	bl	8006c34 <HAL_UART_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 80015a2:	f000 f9fd 	bl	80019a0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000554 	.word	0x20000554
 80015b0:	40011000 	.word	0x40011000

080015b4 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80015b8:	4b14      	ldr	r3, [pc, #80]	; (800160c <MX_USART2_UART_Init+0x58>)
 80015ba:	4a15      	ldr	r2, [pc, #84]	; (8001610 <MX_USART2_UART_Init+0x5c>)
 80015bc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80015be:	4b13      	ldr	r3, [pc, #76]	; (800160c <MX_USART2_UART_Init+0x58>)
 80015c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015c4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <MX_USART2_UART_Init+0x58>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80015cc:	4b0f      	ldr	r3, [pc, #60]	; (800160c <MX_USART2_UART_Init+0x58>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80015d2:	4b0e      	ldr	r3, [pc, #56]	; (800160c <MX_USART2_UART_Init+0x58>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80015d8:	4b0c      	ldr	r3, [pc, #48]	; (800160c <MX_USART2_UART_Init+0x58>)
 80015da:	220c      	movs	r2, #12
 80015dc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015de:	4b0b      	ldr	r3, [pc, #44]	; (800160c <MX_USART2_UART_Init+0x58>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e4:	4b09      	ldr	r3, [pc, #36]	; (800160c <MX_USART2_UART_Init+0x58>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ea:	4b08      	ldr	r3, [pc, #32]	; (800160c <MX_USART2_UART_Init+0x58>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <MX_USART2_UART_Init+0x58>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80015f6:	4805      	ldr	r0, [pc, #20]	; (800160c <MX_USART2_UART_Init+0x58>)
 80015f8:	f005 fb1c 	bl	8006c34 <HAL_UART_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 8001602:	f000 f9cd 	bl	80019a0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	200005dc 	.word	0x200005dc
 8001610:	40004400 	.word	0x40004400

08001614 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001618:	4b14      	ldr	r3, [pc, #80]	; (800166c <MX_USART3_UART_Init+0x58>)
 800161a:	4a15      	ldr	r2, [pc, #84]	; (8001670 <MX_USART3_UART_Init+0x5c>)
 800161c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800161e:	4b13      	ldr	r3, [pc, #76]	; (800166c <MX_USART3_UART_Init+0x58>)
 8001620:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001624:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001626:	4b11      	ldr	r3, [pc, #68]	; (800166c <MX_USART3_UART_Init+0x58>)
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800162c:	4b0f      	ldr	r3, [pc, #60]	; (800166c <MX_USART3_UART_Init+0x58>)
 800162e:	2200      	movs	r2, #0
 8001630:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <MX_USART3_UART_Init+0x58>)
 8001634:	2200      	movs	r2, #0
 8001636:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <MX_USART3_UART_Init+0x58>)
 800163a:	220c      	movs	r2, #12
 800163c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800163e:	4b0b      	ldr	r3, [pc, #44]	; (800166c <MX_USART3_UART_Init+0x58>)
 8001640:	2200      	movs	r2, #0
 8001642:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001644:	4b09      	ldr	r3, [pc, #36]	; (800166c <MX_USART3_UART_Init+0x58>)
 8001646:	2200      	movs	r2, #0
 8001648:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800164a:	4b08      	ldr	r3, [pc, #32]	; (800166c <MX_USART3_UART_Init+0x58>)
 800164c:	2200      	movs	r2, #0
 800164e:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <MX_USART3_UART_Init+0x58>)
 8001652:	2200      	movs	r2, #0
 8001654:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8001656:	4805      	ldr	r0, [pc, #20]	; (800166c <MX_USART3_UART_Init+0x58>)
 8001658:	f005 faec 	bl	8006c34 <HAL_UART_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_USART3_UART_Init+0x52>
	{
		Error_Handler();
 8001662:	f000 f99d 	bl	80019a0 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000664 	.word	0x20000664
 8001670:	40004800 	.word	0x40004800

08001674 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08e      	sub	sp, #56	; 0x38
 8001678:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	605a      	str	r2, [r3, #4]
 8001684:	609a      	str	r2, [r3, #8]
 8001686:	60da      	str	r2, [r3, #12]
 8001688:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800168a:	4b97      	ldr	r3, [pc, #604]	; (80018e8 <MX_GPIO_Init+0x274>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a96      	ldr	r2, [pc, #600]	; (80018e8 <MX_GPIO_Init+0x274>)
 8001690:	f043 0310 	orr.w	r3, r3, #16
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b94      	ldr	r3, [pc, #592]	; (80018e8 <MX_GPIO_Init+0x274>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0310 	and.w	r3, r3, #16
 800169e:	623b      	str	r3, [r7, #32]
 80016a0:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80016a2:	4b91      	ldr	r3, [pc, #580]	; (80018e8 <MX_GPIO_Init+0x274>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a90      	ldr	r2, [pc, #576]	; (80018e8 <MX_GPIO_Init+0x274>)
 80016a8:	f043 0304 	orr.w	r3, r3, #4
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b8e      	ldr	r3, [pc, #568]	; (80018e8 <MX_GPIO_Init+0x274>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	61fb      	str	r3, [r7, #28]
 80016b8:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80016ba:	4b8b      	ldr	r3, [pc, #556]	; (80018e8 <MX_GPIO_Init+0x274>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	4a8a      	ldr	r2, [pc, #552]	; (80018e8 <MX_GPIO_Init+0x274>)
 80016c0:	f043 0320 	orr.w	r3, r3, #32
 80016c4:	6313      	str	r3, [r2, #48]	; 0x30
 80016c6:	4b88      	ldr	r3, [pc, #544]	; (80018e8 <MX_GPIO_Init+0x274>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	f003 0320 	and.w	r3, r3, #32
 80016ce:	61bb      	str	r3, [r7, #24]
 80016d0:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80016d2:	4b85      	ldr	r3, [pc, #532]	; (80018e8 <MX_GPIO_Init+0x274>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a84      	ldr	r2, [pc, #528]	; (80018e8 <MX_GPIO_Init+0x274>)
 80016d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b82      	ldr	r3, [pc, #520]	; (80018e8 <MX_GPIO_Init+0x274>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80016ea:	4b7f      	ldr	r3, [pc, #508]	; (80018e8 <MX_GPIO_Init+0x274>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	4a7e      	ldr	r2, [pc, #504]	; (80018e8 <MX_GPIO_Init+0x274>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6313      	str	r3, [r2, #48]	; 0x30
 80016f6:	4b7c      	ldr	r3, [pc, #496]	; (80018e8 <MX_GPIO_Init+0x274>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	613b      	str	r3, [r7, #16]
 8001700:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001702:	4b79      	ldr	r3, [pc, #484]	; (80018e8 <MX_GPIO_Init+0x274>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	4a78      	ldr	r2, [pc, #480]	; (80018e8 <MX_GPIO_Init+0x274>)
 8001708:	f043 0302 	orr.w	r3, r3, #2
 800170c:	6313      	str	r3, [r2, #48]	; 0x30
 800170e:	4b76      	ldr	r3, [pc, #472]	; (80018e8 <MX_GPIO_Init+0x274>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800171a:	4b73      	ldr	r3, [pc, #460]	; (80018e8 <MX_GPIO_Init+0x274>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	4a72      	ldr	r2, [pc, #456]	; (80018e8 <MX_GPIO_Init+0x274>)
 8001720:	f043 0308 	orr.w	r3, r3, #8
 8001724:	6313      	str	r3, [r2, #48]	; 0x30
 8001726:	4b70      	ldr	r3, [pc, #448]	; (80018e8 <MX_GPIO_Init+0x274>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	f003 0308 	and.w	r3, r3, #8
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001732:	4b6d      	ldr	r3, [pc, #436]	; (80018e8 <MX_GPIO_Init+0x274>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a6c      	ldr	r2, [pc, #432]	; (80018e8 <MX_GPIO_Init+0x274>)
 8001738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4b6a      	ldr	r3, [pc, #424]	; (80018e8 <MX_GPIO_Init+0x274>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800174a:	2200      	movs	r2, #0
 800174c:	2178      	movs	r1, #120	; 0x78
 800174e:	4867      	ldr	r0, [pc, #412]	; (80018ec <MX_GPIO_Init+0x278>)
 8001750:	f001 fe48 	bl	80033e4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001754:	2200      	movs	r2, #0
 8001756:	f244 0181 	movw	r1, #16513	; 0x4081
 800175a:	4865      	ldr	r0, [pc, #404]	; (80018f0 <MX_GPIO_Init+0x27c>)
 800175c:	f001 fe42 	bl	80033e4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001760:	2200      	movs	r2, #0
 8001762:	2140      	movs	r1, #64	; 0x40
 8001764:	4863      	ldr	r0, [pc, #396]	; (80018f4 <MX_GPIO_Init+0x280>)
 8001766:	f001 fe3d 	bl	80033e4 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : GPIO_OUT_SPI_CS_SDCARD_Pin GPIO_OUT_SPI_CS_LCD_Pin PE5 PE6 */
	GPIO_InitStruct.Pin = GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin|GPIO_PIN_5|GPIO_PIN_6;
 800176a:	2378      	movs	r3, #120	; 0x78
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176e:	2301      	movs	r3, #1
 8001770:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001776:	2300      	movs	r3, #0
 8001778:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800177a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800177e:	4619      	mov	r1, r3
 8001780:	485a      	ldr	r0, [pc, #360]	; (80018ec <MX_GPIO_Init+0x278>)
 8001782:	f001 fc83 	bl	800308c <HAL_GPIO_Init>

	/*Configure GPIO pins : GPIO_EXTI3_IMU_IRQ_Pin GPIO_EXTI8_USER_BUT1_IRQ_Pin GPIO_EXTI9_USER_BUT2_IRQ_Pin GPIO_EXTI10_BUMP1_IRQ_Pin
                           GPIO_EXTI11_BUMP2_IRQ_Pin GPIO_EXTI12_BUMP3_IRQ_Pin GPIO_EXTI13_BUMP4_IRQ_Pin */
	GPIO_InitStruct.Pin = GPIO_EXTI3_IMU_IRQ_Pin|GPIO_EXTI8_USER_BUT1_IRQ_Pin|GPIO_EXTI9_USER_BUT2_IRQ_Pin|GPIO_EXTI10_BUMP1_IRQ_Pin
 8001786:	f643 7308 	movw	r3, #16136	; 0x3f08
 800178a:	627b      	str	r3, [r7, #36]	; 0x24
			|GPIO_EXTI11_BUMP2_IRQ_Pin|GPIO_EXTI12_BUMP3_IRQ_Pin|GPIO_EXTI13_BUMP4_IRQ_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800178c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001790:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800179a:	4619      	mov	r1, r3
 800179c:	4856      	ldr	r0, [pc, #344]	; (80018f8 <MX_GPIO_Init+0x284>)
 800179e:	f001 fc75 	bl	800308c <HAL_GPIO_Init>

	/*Configure GPIO pin : GPIO_EXTI4_KPAD_IRQ_Pin */
	GPIO_InitStruct.Pin = GPIO_EXTI4_KPAD_IRQ_Pin;
 80017a2:	2310      	movs	r3, #16
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017a6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80017aa:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIO_EXTI4_KPAD_IRQ_GPIO_Port, &GPIO_InitStruct);
 80017b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b4:	4619      	mov	r1, r3
 80017b6:	4850      	ldr	r0, [pc, #320]	; (80018f8 <MX_GPIO_Init+0x284>)
 80017b8:	f001 fc68 	bl	800308c <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80017bc:	2332      	movs	r3, #50	; 0x32
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c0:	2302      	movs	r3, #2
 80017c2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c8:	2303      	movs	r3, #3
 80017ca:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017cc:	230b      	movs	r3, #11
 80017ce:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d4:	4619      	mov	r1, r3
 80017d6:	4849      	ldr	r0, [pc, #292]	; (80018fc <MX_GPIO_Init+0x288>)
 80017d8:	f001 fc58 	bl	800308c <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80017dc:	2386      	movs	r3, #134	; 0x86
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e0:	2302      	movs	r3, #2
 80017e2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e8:	2303      	movs	r3, #3
 80017ea:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017ec:	230b      	movs	r3, #11
 80017ee:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f4:	4619      	mov	r1, r3
 80017f6:	4842      	ldr	r0, [pc, #264]	; (8001900 <MX_GPIO_Init+0x28c>)
 80017f8:	f001 fc48 	bl	800308c <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80017fc:	f244 0381 	movw	r3, #16513	; 0x4081
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001802:	2301      	movs	r3, #1
 8001804:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180a:	2300      	movs	r3, #0
 800180c:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001812:	4619      	mov	r1, r3
 8001814:	4836      	ldr	r0, [pc, #216]	; (80018f0 <MX_GPIO_Init+0x27c>)
 8001816:	f001 fc39 	bl	800308c <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_TXD1_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800181a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800181e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001820:	2302      	movs	r3, #2
 8001822:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001828:	2303      	movs	r3, #3
 800182a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800182c:	230b      	movs	r3, #11
 800182e:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001834:	4619      	mov	r1, r3
 8001836:	482e      	ldr	r0, [pc, #184]	; (80018f0 <MX_GPIO_Init+0x27c>)
 8001838:	f001 fc28 	bl	800308c <HAL_GPIO_Init>

	/*Configure GPIO pin : PG6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 800183c:	2340      	movs	r3, #64	; 0x40
 800183e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001840:	2301      	movs	r3, #1
 8001842:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001848:	2300      	movs	r3, #0
 800184a:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800184c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001850:	4619      	mov	r1, r3
 8001852:	4828      	ldr	r0, [pc, #160]	; (80018f4 <MX_GPIO_Init+0x280>)
 8001854:	f001 fc1a 	bl	800308c <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001858:	2380      	movs	r3, #128	; 0x80
 800185a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800185c:	2300      	movs	r3, #0
 800185e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001868:	4619      	mov	r1, r3
 800186a:	4822      	ldr	r0, [pc, #136]	; (80018f4 <MX_GPIO_Init+0x280>)
 800186c:	f001 fc0e 	bl	800308c <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
	GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001870:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001874:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001876:	2302      	movs	r3, #2
 8001878:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187e:	2303      	movs	r3, #3
 8001880:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001882:	230a      	movs	r3, #10
 8001884:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800188a:	4619      	mov	r1, r3
 800188c:	481c      	ldr	r0, [pc, #112]	; (8001900 <MX_GPIO_Init+0x28c>)
 800188e:	f001 fbfd 	bl	800308c <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_VBUS_Pin */
	GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001892:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001898:	2300      	movs	r3, #0
 800189a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80018a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018a4:	4619      	mov	r1, r3
 80018a6:	4816      	ldr	r0, [pc, #88]	; (8001900 <MX_GPIO_Init+0x28c>)
 80018a8:	f001 fbf0 	bl	800308c <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80018ac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b2:	2302      	movs	r3, #2
 80018b4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ba:	2303      	movs	r3, #3
 80018bc:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018be:	230b      	movs	r3, #11
 80018c0:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018c6:	4619      	mov	r1, r3
 80018c8:	480a      	ldr	r0, [pc, #40]	; (80018f4 <MX_GPIO_Init+0x280>)
 80018ca:	f001 fbdf 	bl	800308c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 80018ce:	2200      	movs	r2, #0
 80018d0:	2101      	movs	r1, #1
 80018d2:	200a      	movs	r0, #10
 80018d4:	f001 fb95 	bl	8003002 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80018d8:	200a      	movs	r0, #10
 80018da:	f001 fbae 	bl	800303a <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80018de:	bf00      	nop
 80018e0:	3738      	adds	r7, #56	; 0x38
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40023800 	.word	0x40023800
 80018ec:	40021000 	.word	0x40021000
 80018f0:	40020400 	.word	0x40020400
 80018f4:	40021800 	.word	0x40021800
 80018f8:	40021400 	.word	0x40021400
 80018fc:	40020800 	.word	0x40020800
 8001900:	40020000 	.word	0x40020000

08001904 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af04      	add	r7, sp, #16
 800190a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a14      	ldr	r2, [pc, #80]	; (8001964 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d10b      	bne.n	800192e <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		//printf("Add code for line reading \n");
		static uint8_t line_data[1];
		HAL_I2C_Mem_Read(&hi2c1, SX1509_I2C_ADDR1 << 1, 0x10, 1, line_data, 1, 100);
 8001916:	2364      	movs	r3, #100	; 0x64
 8001918:	9302      	str	r3, [sp, #8]
 800191a:	2301      	movs	r3, #1
 800191c:	9301      	str	r3, [sp, #4]
 800191e:	4b12      	ldr	r3, [pc, #72]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	2301      	movs	r3, #1
 8001924:	2210      	movs	r2, #16
 8001926:	217c      	movs	r1, #124	; 0x7c
 8001928:	4810      	ldr	r0, [pc, #64]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x68>)
 800192a:	f001 ff4b 	bl	80037c4 <HAL_I2C_Mem_Read>
//printf("Pololu QTR Reflectance Sensor reading: %d \n", (int8_t)line_data[0]);

	}

	if(htim->Instance == TIM10)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a0f      	ldr	r2, [pc, #60]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d110      	bne.n	800195a <HAL_TIM_PeriodElapsedCallback+0x56>
	{
		__HAL_TIM_SET_PRESCALER(&htim10,LED_PRESC); //values for LED_PRESC are in ms
 8001938:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_5);
 8001942:	2120      	movs	r1, #32
 8001944:	480d      	ldr	r0, [pc, #52]	; (800197c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001946:	f001 fd66 	bl	8003416 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_6);
 800194a:	2140      	movs	r1, #64	; 0x40
 800194c:	480b      	ldr	r0, [pc, #44]	; (800197c <HAL_TIM_PeriodElapsedCallback+0x78>)
 800194e:	f001 fd62 	bl	8003416 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001952:	2101      	movs	r1, #1
 8001954:	480a      	ldr	r0, [pc, #40]	; (8001980 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001956:	f001 fd5e 	bl	8003416 <HAL_GPIO_TogglePin>
	}
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40001400 	.word	0x40001400
 8001968:	200006ec 	.word	0x200006ec
 800196c:	200000d8 	.word	0x200000d8
 8001970:	40014400 	.word	0x40014400
 8001974:	20000000 	.word	0x20000000
 8001978:	200003f8 	.word	0x200003f8
 800197c:	40021000 	.word	0x40021000
 8001980:	40020400 	.word	0x40020400

08001984 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	80fb      	strh	r3, [r7, #6]
	//printf("Interrupt on pin (%d).\n", GPIO_Pin);
	if(GPIO_Pin == GPIO_EXTI4_KPAD_IRQ_Pin){
 800198e:	88fb      	ldrh	r3, [r7, #6]
 8001990:	2b10      	cmp	r3, #16
 8001992:	d101      	bne.n	8001998 <HAL_GPIO_EXTI_Callback+0x14>
		keyPad_read();
 8001994:	f000 fe44 	bl	8002620 <keyPad_read>
	}
}
 8001998:	bf00      	nop
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a4:	b672      	cpsid	i
}
 80019a6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80019a8:	e7fe      	b.n	80019a8 <Error_Handler+0x8>
	...

080019ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80019b2:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <HAL_MspInit+0x44>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	4a0e      	ldr	r2, [pc, #56]	; (80019f0 <HAL_MspInit+0x44>)
 80019b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019bc:	6413      	str	r3, [r2, #64]	; 0x40
 80019be:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <HAL_MspInit+0x44>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ca:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <HAL_MspInit+0x44>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	4a08      	ldr	r2, [pc, #32]	; (80019f0 <HAL_MspInit+0x44>)
 80019d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d4:	6453      	str	r3, [r2, #68]	; 0x44
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <HAL_MspInit+0x44>)
 80019d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);

  /* USER CODE BEGIN MspInit 1 */

 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40023800 	.word	0x40023800

080019f4 <HAL_ADC_MspInit>:
/**
* @brief ADC MSP Initialization
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08a      	sub	sp, #40	; 0x28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
{
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a15      	ldr	r2, [pc, #84]	; (8001a68 <HAL_ADC_MspInit+0x74>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d123      	bne.n	8001a5e <HAL_ADC_MspInit+0x6a>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
 8001a16:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <HAL_ADC_MspInit+0x78>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	4a14      	ldr	r2, [pc, #80]	; (8001a6c <HAL_ADC_MspInit+0x78>)
 8001a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a20:	6453      	str	r3, [r2, #68]	; 0x44
 8001a22:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <HAL_ADC_MspInit+0x78>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	693b      	ldr	r3, [r7, #16]
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a2e:	4b0f      	ldr	r3, [pc, #60]	; (8001a6c <HAL_ADC_MspInit+0x78>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	4a0e      	ldr	r2, [pc, #56]	; (8001a6c <HAL_ADC_MspInit+0x78>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3a:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <HAL_ADC_MspInit+0x78>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
 8001a46:	2308      	movs	r3, #8
 8001a48:	617b      	str	r3, [r7, #20]
    */
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pin = ADC1_IN3_IR_DIST_SENS_Pin;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a52:	f107 0314 	add.w	r3, r7, #20
 8001a56:	4619      	mov	r1, r3
 8001a58:	4805      	ldr	r0, [pc, #20]	; (8001a70 <HAL_ADC_MspInit+0x7c>)
 8001a5a:	f001 fb17 	bl	800308c <HAL_GPIO_Init>
    HAL_GPIO_Init(ADC1_IN3_IR_DIST_SENS_GPIO_Port, &GPIO_InitStruct);

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
 8001a5e:	bf00      	nop
 8001a60:	3728      	adds	r7, #40	; 0x28
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40012000 	.word	0x40012000
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40020000 	.word	0x40020000

08001a74 <HAL_I2C_MspInit>:
/**
* @brief I2C MSP Initialization
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b0b0      	sub	sp, #192	; 0xc0
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
 8001a7c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
{
 8001a8c:	f107 031c 	add.w	r3, r7, #28
 8001a90:	2290      	movs	r2, #144	; 0x90
 8001a92:	2100      	movs	r1, #0
 8001a94:	4618      	mov	r0, r3
 8001a96:	f006 fa6f 	bl	8007f78 <memset>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a44      	ldr	r2, [pc, #272]	; (8001bb0 <HAL_I2C_MspInit+0x13c>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d13e      	bne.n	8001b22 <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
 8001aa4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001aa8:	61fb      	str	r3, [r7, #28]
  */
 8001aaa:	2300      	movs	r3, #0
 8001aac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ab0:	f107 031c 	add.w	r3, r7, #28
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f003 f805 	bl	8004ac4 <HAL_RCCEx_PeriphCLKConfig>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <HAL_I2C_MspInit+0x50>
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ac0:	f7ff ff6e 	bl	80019a0 <Error_Handler>
    {
      Error_Handler();
    }
 8001ac4:	4b3b      	ldr	r3, [pc, #236]	; (8001bb4 <HAL_I2C_MspInit+0x140>)
 8001ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac8:	4a3a      	ldr	r2, [pc, #232]	; (8001bb4 <HAL_I2C_MspInit+0x140>)
 8001aca:	f043 0302 	orr.w	r3, r3, #2
 8001ace:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad0:	4b38      	ldr	r3, [pc, #224]	; (8001bb4 <HAL_I2C_MspInit+0x140>)
 8001ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	61bb      	str	r3, [r7, #24]
 8001ada:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
 8001adc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ae0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    */
 8001ae4:	2312      	movs	r3, #18
 8001ae6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001aea:	2301      	movs	r3, #1
 8001aec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001af0:	2303      	movs	r3, #3
 8001af2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001af6:	2304      	movs	r3, #4
 8001af8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b00:	4619      	mov	r1, r3
 8001b02:	482d      	ldr	r0, [pc, #180]	; (8001bb8 <HAL_I2C_MspInit+0x144>)
 8001b04:	f001 fac2 	bl	800308c <HAL_GPIO_Init>
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

 8001b08:	4b2a      	ldr	r3, [pc, #168]	; (8001bb4 <HAL_I2C_MspInit+0x140>)
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	4a29      	ldr	r2, [pc, #164]	; (8001bb4 <HAL_I2C_MspInit+0x140>)
 8001b0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b12:	6413      	str	r3, [r2, #64]	; 0x40
 8001b14:	4b27      	ldr	r3, [pc, #156]	; (8001bb4 <HAL_I2C_MspInit+0x140>)
 8001b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	697b      	ldr	r3, [r7, #20]
    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
 8001b20:	e041      	b.n	8001ba6 <HAL_I2C_MspInit+0x132>
  /* USER CODE END I2C1_MspInit 1 */
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a25      	ldr	r2, [pc, #148]	; (8001bbc <HAL_I2C_MspInit+0x148>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d13c      	bne.n	8001ba6 <HAL_I2C_MspInit+0x132>
  /** Initializes the peripherals clock
 8001b2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b30:	61fb      	str	r3, [r7, #28]
  */
 8001b32:	2300      	movs	r3, #0
 8001b34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001b38:	f107 031c 	add.w	r3, r7, #28
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f002 ffc1 	bl	8004ac4 <HAL_RCCEx_PeriphCLKConfig>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <HAL_I2C_MspInit+0xd8>
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b48:	f7ff ff2a 	bl	80019a0 <Error_Handler>
    }
 8001b4c:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <HAL_I2C_MspInit+0x140>)
 8001b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b50:	4a18      	ldr	r2, [pc, #96]	; (8001bb4 <HAL_I2C_MspInit+0x140>)
 8001b52:	f043 0320 	orr.w	r3, r3, #32
 8001b56:	6313      	str	r3, [r2, #48]	; 0x30
 8001b58:	4b16      	ldr	r3, [pc, #88]	; (8001bb4 <HAL_I2C_MspInit+0x140>)
 8001b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5c:	f003 0320 	and.w	r3, r3, #32
 8001b60:	613b      	str	r3, [r7, #16]
 8001b62:	693b      	ldr	r3, [r7, #16]
    PF1     ------> I2C2_SCL
 8001b64:	2303      	movs	r3, #3
 8001b66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    */
 8001b6a:	2312      	movs	r3, #18
 8001b6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b70:	2301      	movs	r3, #1
 8001b72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b76:	2303      	movs	r3, #3
 8001b78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b7c:	2304      	movs	r3, #4
 8001b7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b82:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b86:	4619      	mov	r1, r3
 8001b88:	480d      	ldr	r0, [pc, #52]	; (8001bc0 <HAL_I2C_MspInit+0x14c>)
 8001b8a:	f001 fa7f 	bl	800308c <HAL_GPIO_Init>

 8001b8e:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <HAL_I2C_MspInit+0x140>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	4a08      	ldr	r2, [pc, #32]	; (8001bb4 <HAL_I2C_MspInit+0x140>)
 8001b94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b98:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9a:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <HAL_I2C_MspInit+0x140>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
  }
 8001ba6:	bf00      	nop
 8001ba8:	37c0      	adds	r7, #192	; 0xc0
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40005400 	.word	0x40005400
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40020400 	.word	0x40020400
 8001bbc:	40005800 	.word	0x40005800
 8001bc0:	40021400 	.word	0x40021400

08001bc4 <HAL_SPI_MspInit>:
/**
* @brief SPI MSP Initialization
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08c      	sub	sp, #48	; 0x30
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
 8001bcc:	f107 031c 	add.w	r3, r7, #28
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
{
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a33      	ldr	r2, [pc, #204]	; (8001cb0 <HAL_SPI_MspInit+0xec>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d160      	bne.n	8001ca8 <HAL_SPI_MspInit+0xe4>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI1)
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
 8001be6:	4b33      	ldr	r3, [pc, #204]	; (8001cb4 <HAL_SPI_MspInit+0xf0>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bea:	4a32      	ldr	r2, [pc, #200]	; (8001cb4 <HAL_SPI_MspInit+0xf0>)
 8001bec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bf2:	4b30      	ldr	r3, [pc, #192]	; (8001cb4 <HAL_SPI_MspInit+0xf0>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bfa:	61bb      	str	r3, [r7, #24]
 8001bfc:	69bb      	ldr	r3, [r7, #24]
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bfe:	4b2d      	ldr	r3, [pc, #180]	; (8001cb4 <HAL_SPI_MspInit+0xf0>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	4a2c      	ldr	r2, [pc, #176]	; (8001cb4 <HAL_SPI_MspInit+0xf0>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0a:	4b2a      	ldr	r3, [pc, #168]	; (8001cb4 <HAL_SPI_MspInit+0xf0>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	617b      	str	r3, [r7, #20]
 8001c14:	697b      	ldr	r3, [r7, #20]

 8001c16:	4b27      	ldr	r3, [pc, #156]	; (8001cb4 <HAL_SPI_MspInit+0xf0>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	4a26      	ldr	r2, [pc, #152]	; (8001cb4 <HAL_SPI_MspInit+0xf0>)
 8001c1c:	f043 0308 	orr.w	r3, r3, #8
 8001c20:	6313      	str	r3, [r2, #48]	; 0x30
 8001c22:	4b24      	ldr	r3, [pc, #144]	; (8001cb4 <HAL_SPI_MspInit+0xf0>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	613b      	str	r3, [r7, #16]
 8001c2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2e:	4b21      	ldr	r3, [pc, #132]	; (8001cb4 <HAL_SPI_MspInit+0xf0>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	4a20      	ldr	r2, [pc, #128]	; (8001cb4 <HAL_SPI_MspInit+0xf0>)
 8001c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c38:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3a:	4b1e      	ldr	r3, [pc, #120]	; (8001cb4 <HAL_SPI_MspInit+0xf0>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
    __HAL_RCC_GPIOG_CLK_ENABLE();
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
 8001c46:	2320      	movs	r3, #32
 8001c48:	61fb      	str	r3, [r7, #28]
    */
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c52:	2303      	movs	r3, #3
 8001c54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2305      	movs	r3, #5
 8001c58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5a:	f107 031c 	add.w	r3, r7, #28
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4815      	ldr	r0, [pc, #84]	; (8001cb8 <HAL_SPI_MspInit+0xf4>)
 8001c62:	f001 fa13 	bl	800308c <HAL_GPIO_Init>
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c66:	2380      	movs	r3, #128	; 0x80
 8001c68:	61fb      	str	r3, [r7, #28]

 8001c6a:	2302      	movs	r3, #2
 8001c6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c72:	2303      	movs	r3, #3
 8001c74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2305      	movs	r3, #5
 8001c78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7a:	f107 031c 	add.w	r3, r7, #28
 8001c7e:	4619      	mov	r1, r3
 8001c80:	480e      	ldr	r0, [pc, #56]	; (8001cbc <HAL_SPI_MspInit+0xf8>)
 8001c82:	f001 fa03 	bl	800308c <HAL_GPIO_Init>
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c8a:	61fb      	str	r3, [r7, #28]

 8001c8c:	2302      	movs	r3, #2
 8001c8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c90:	2300      	movs	r3, #0
 8001c92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c94:	2303      	movs	r3, #3
 8001c96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2305      	movs	r3, #5
 8001c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c9c:	f107 031c 	add.w	r3, r7, #28
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4807      	ldr	r0, [pc, #28]	; (8001cc0 <HAL_SPI_MspInit+0xfc>)
 8001ca4:	f001 f9f2 	bl	800308c <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
 8001ca8:	bf00      	nop
 8001caa:	3730      	adds	r7, #48	; 0x30
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40013000 	.word	0x40013000
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	40020000 	.word	0x40020000
 8001cbc:	40020c00 	.word	0x40020c00
 8001cc0:	40021800 	.word	0x40021800

08001cc4 <HAL_TIM_Base_MspInit>:
/**
* @brief TIM_Base MSP Initialization
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08e      	sub	sp, #56	; 0x38
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
 8001ccc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]
{
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a50      	ldr	r2, [pc, #320]	; (8001e24 <HAL_TIM_Base_MspInit+0x160>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d114      	bne.n	8001d10 <HAL_TIM_Base_MspInit+0x4c>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
 8001ce6:	4b50      	ldr	r3, [pc, #320]	; (8001e28 <HAL_TIM_Base_MspInit+0x164>)
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cea:	4a4f      	ldr	r2, [pc, #316]	; (8001e28 <HAL_TIM_Base_MspInit+0x164>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cf2:	4b4d      	ldr	r3, [pc, #308]	; (8001e28 <HAL_TIM_Base_MspInit+0x164>)
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	623b      	str	r3, [r7, #32]
 8001cfc:	6a3b      	ldr	r3, [r7, #32]
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cfe:	2200      	movs	r2, #0
 8001d00:	2100      	movs	r1, #0
 8001d02:	2019      	movs	r0, #25
 8001d04:	f001 f97d 	bl	8003002 <HAL_NVIC_SetPriority>
    /* TIM1 interrupt Init */
 8001d08:	2019      	movs	r0, #25
 8001d0a:	f001 f996 	bl	800303a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
 8001d0e:	e085      	b.n	8001e1c <HAL_TIM_Base_MspInit+0x158>
  /* USER CODE END TIM1_MspInit 1 */
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d18:	d129      	bne.n	8001d6e <HAL_TIM_Base_MspInit+0xaa>
  /* USER CODE END TIM2_MspInit 0 */
 8001d1a:	4b43      	ldr	r3, [pc, #268]	; (8001e28 <HAL_TIM_Base_MspInit+0x164>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	4a42      	ldr	r2, [pc, #264]	; (8001e28 <HAL_TIM_Base_MspInit+0x164>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	6413      	str	r3, [r2, #64]	; 0x40
 8001d26:	4b40      	ldr	r3, [pc, #256]	; (8001e28 <HAL_TIM_Base_MspInit+0x164>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	61fb      	str	r3, [r7, #28]
 8001d30:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d32:	4b3d      	ldr	r3, [pc, #244]	; (8001e28 <HAL_TIM_Base_MspInit+0x164>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	4a3c      	ldr	r2, [pc, #240]	; (8001e28 <HAL_TIM_Base_MspInit+0x164>)
 8001d38:	f043 0302 	orr.w	r3, r3, #2
 8001d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3e:	4b3a      	ldr	r3, [pc, #232]	; (8001e28 <HAL_TIM_Base_MspInit+0x164>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	61bb      	str	r3, [r7, #24]
 8001d48:	69bb      	ldr	r3, [r7, #24]
    PB10     ------> TIM2_CH3
 8001d4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d4e:	627b      	str	r3, [r7, #36]	; 0x24
    */
 8001d50:	2302      	movs	r3, #2
 8001d52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = TIM2_CH3_HCSR04_ECHO_Pin;
 8001d54:	2300      	movs	r3, #0
 8001d56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d64:	4619      	mov	r1, r3
 8001d66:	4831      	ldr	r0, [pc, #196]	; (8001e2c <HAL_TIM_Base_MspInit+0x168>)
 8001d68:	f001 f990 	bl	800308c <HAL_GPIO_Init>
  }
 8001d6c:	e056      	b.n	8001e1c <HAL_TIM_Base_MspInit+0x158>
  /* USER CODE END TIM2_MspInit 1 */
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a2f      	ldr	r2, [pc, #188]	; (8001e30 <HAL_TIM_Base_MspInit+0x16c>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d10c      	bne.n	8001d92 <HAL_TIM_Base_MspInit+0xce>
  /* USER CODE END TIM5_MspInit 0 */
 8001d78:	4b2b      	ldr	r3, [pc, #172]	; (8001e28 <HAL_TIM_Base_MspInit+0x164>)
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	4a2a      	ldr	r2, [pc, #168]	; (8001e28 <HAL_TIM_Base_MspInit+0x164>)
 8001d7e:	f043 0308 	orr.w	r3, r3, #8
 8001d82:	6413      	str	r3, [r2, #64]	; 0x40
 8001d84:	4b28      	ldr	r3, [pc, #160]	; (8001e28 <HAL_TIM_Base_MspInit+0x164>)
 8001d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d88:	f003 0308 	and.w	r3, r3, #8
 8001d8c:	617b      	str	r3, [r7, #20]
 8001d8e:	697b      	ldr	r3, [r7, #20]
  }
 8001d90:	e044      	b.n	8001e1c <HAL_TIM_Base_MspInit+0x158>
  /* USER CODE END TIM5_MspInit 1 */
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a27      	ldr	r2, [pc, #156]	; (8001e34 <HAL_TIM_Base_MspInit+0x170>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d114      	bne.n	8001dc6 <HAL_TIM_Base_MspInit+0x102>
  /* USER CODE END TIM7_MspInit 0 */
 8001d9c:	4b22      	ldr	r3, [pc, #136]	; (8001e28 <HAL_TIM_Base_MspInit+0x164>)
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da0:	4a21      	ldr	r2, [pc, #132]	; (8001e28 <HAL_TIM_Base_MspInit+0x164>)
 8001da2:	f043 0320 	orr.w	r3, r3, #32
 8001da6:	6413      	str	r3, [r2, #64]	; 0x40
 8001da8:	4b1f      	ldr	r3, [pc, #124]	; (8001e28 <HAL_TIM_Base_MspInit+0x164>)
 8001daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dac:	f003 0320 	and.w	r3, r3, #32
 8001db0:	613b      	str	r3, [r7, #16]
 8001db2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001db4:	2200      	movs	r2, #0
 8001db6:	2100      	movs	r1, #0
 8001db8:	2037      	movs	r0, #55	; 0x37
 8001dba:	f001 f922 	bl	8003002 <HAL_NVIC_SetPriority>
    /* TIM7 interrupt Init */
 8001dbe:	2037      	movs	r0, #55	; 0x37
 8001dc0:	f001 f93b 	bl	800303a <HAL_NVIC_EnableIRQ>
  }
 8001dc4:	e02a      	b.n	8001e1c <HAL_TIM_Base_MspInit+0x158>
  /* USER CODE END TIM7_MspInit 1 */
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a1b      	ldr	r2, [pc, #108]	; (8001e38 <HAL_TIM_Base_MspInit+0x174>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d10c      	bne.n	8001dea <HAL_TIM_Base_MspInit+0x126>
  /* USER CODE END TIM8_MspInit 0 */
 8001dd0:	4b15      	ldr	r3, [pc, #84]	; (8001e28 <HAL_TIM_Base_MspInit+0x164>)
 8001dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd4:	4a14      	ldr	r2, [pc, #80]	; (8001e28 <HAL_TIM_Base_MspInit+0x164>)
 8001dd6:	f043 0302 	orr.w	r3, r3, #2
 8001dda:	6453      	str	r3, [r2, #68]	; 0x44
 8001ddc:	4b12      	ldr	r3, [pc, #72]	; (8001e28 <HAL_TIM_Base_MspInit+0x164>)
 8001dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	68fb      	ldr	r3, [r7, #12]
  }
 8001de8:	e018      	b.n	8001e1c <HAL_TIM_Base_MspInit+0x158>
  /* USER CODE END TIM8_MspInit 1 */
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a13      	ldr	r2, [pc, #76]	; (8001e3c <HAL_TIM_Base_MspInit+0x178>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d113      	bne.n	8001e1c <HAL_TIM_Base_MspInit+0x158>
  /* USER CODE END TIM10_MspInit 0 */
 8001df4:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <HAL_TIM_Base_MspInit+0x164>)
 8001df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df8:	4a0b      	ldr	r2, [pc, #44]	; (8001e28 <HAL_TIM_Base_MspInit+0x164>)
 8001dfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dfe:	6453      	str	r3, [r2, #68]	; 0x44
 8001e00:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <HAL_TIM_Base_MspInit+0x164>)
 8001e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e08:	60bb      	str	r3, [r7, #8]
 8001e0a:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	2100      	movs	r1, #0
 8001e10:	2019      	movs	r0, #25
 8001e12:	f001 f8f6 	bl	8003002 <HAL_NVIC_SetPriority>
    /* TIM10 interrupt Init */
 8001e16:	2019      	movs	r0, #25
 8001e18:	f001 f90f 	bl	800303a <HAL_NVIC_EnableIRQ>
  }
 8001e1c:	bf00      	nop
 8001e1e:	3738      	adds	r7, #56	; 0x38
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40010000 	.word	0x40010000
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	40020400 	.word	0x40020400
 8001e30:	40000c00 	.word	0x40000c00
 8001e34:	40001400 	.word	0x40001400
 8001e38:	40010400 	.word	0x40010400
 8001e3c:	40014400 	.word	0x40014400

08001e40 <HAL_TIM_Encoder_MspInit>:
/**
* @brief TIM_Encoder MSP Initialization
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b08c      	sub	sp, #48	; 0x30
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
 8001e48:	f107 031c 	add.w	r3, r7, #28
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]
{
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a2e      	ldr	r2, [pc, #184]	; (8001f18 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d128      	bne.n	8001eb4 <HAL_TIM_Encoder_MspInit+0x74>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_encoder->Instance==TIM3)
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
 8001e62:	4b2e      	ldr	r3, [pc, #184]	; (8001f1c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	4a2d      	ldr	r2, [pc, #180]	; (8001f1c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e68:	f043 0302 	orr.w	r3, r3, #2
 8001e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e6e:	4b2b      	ldr	r3, [pc, #172]	; (8001f1c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	61bb      	str	r3, [r7, #24]
 8001e78:	69bb      	ldr	r3, [r7, #24]
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e7a:	4b28      	ldr	r3, [pc, #160]	; (8001f1c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	4a27      	ldr	r2, [pc, #156]	; (8001f1c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e80:	f043 0302 	orr.w	r3, r3, #2
 8001e84:	6313      	str	r3, [r2, #48]	; 0x30
 8001e86:	4b25      	ldr	r3, [pc, #148]	; (8001f1c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
 8001e92:	2330      	movs	r3, #48	; 0x30
 8001e94:	61fb      	str	r3, [r7, #28]
    */
 8001e96:	2302      	movs	r3, #2
 8001e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pin = TIM3_CH1_ENC1A_Pin|TIM3_CH2_ENC1B_Pin;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea6:	f107 031c 	add.w	r3, r7, #28
 8001eaa:	4619      	mov	r1, r3
 8001eac:	481c      	ldr	r0, [pc, #112]	; (8001f20 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001eae:	f001 f8ed 	bl	800308c <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
 8001eb2:	e02d      	b.n	8001f10 <HAL_TIM_Encoder_MspInit+0xd0>
  /* USER CODE END TIM3_MspInit 1 */
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a1a      	ldr	r2, [pc, #104]	; (8001f24 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d128      	bne.n	8001f10 <HAL_TIM_Encoder_MspInit+0xd0>
  /* USER CODE END TIM4_MspInit 0 */
 8001ebe:	4b17      	ldr	r3, [pc, #92]	; (8001f1c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	4a16      	ldr	r2, [pc, #88]	; (8001f1c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001ec4:	f043 0304 	orr.w	r3, r3, #4
 8001ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eca:	4b14      	ldr	r3, [pc, #80]	; (8001f1c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	f003 0304 	and.w	r3, r3, #4
 8001ed2:	613b      	str	r3, [r7, #16]
 8001ed4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ed6:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	4a10      	ldr	r2, [pc, #64]	; (8001f1c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001edc:	f043 0308 	orr.w	r3, r3, #8
 8001ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee2:	4b0e      	ldr	r3, [pc, #56]	; (8001f1c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	f003 0308 	and.w	r3, r3, #8
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]
    PD13     ------> TIM4_CH2
 8001eee:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001ef2:	61fb      	str	r3, [r7, #28]
    */
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pin = TIM4_CH1_ENC2A_Pin|TIM4_CH2_ENC2B_Pin;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efc:	2300      	movs	r3, #0
 8001efe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2302      	movs	r3, #2
 8001f02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f04:	f107 031c 	add.w	r3, r7, #28
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4807      	ldr	r0, [pc, #28]	; (8001f28 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001f0c:	f001 f8be 	bl	800308c <HAL_GPIO_Init>
  }
 8001f10:	bf00      	nop
 8001f12:	3730      	adds	r7, #48	; 0x30
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40000400 	.word	0x40000400
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40020400 	.word	0x40020400
 8001f24:	40000800 	.word	0x40000800
 8001f28:	40020c00 	.word	0x40020c00

08001f2c <HAL_TIM_MspPostInit>:

}

 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08c      	sub	sp, #48	; 0x30
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
 8001f34:	f107 031c 	add.w	r3, r7, #28
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	611a      	str	r2, [r3, #16]
{
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a45      	ldr	r2, [pc, #276]	; (8002060 <HAL_TIM_MspPostInit+0x134>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d11d      	bne.n	8001f8a <HAL_TIM_MspPostInit+0x5e>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

 8001f4e:	4b45      	ldr	r3, [pc, #276]	; (8002064 <HAL_TIM_MspPostInit+0x138>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	4a44      	ldr	r2, [pc, #272]	; (8002064 <HAL_TIM_MspPostInit+0x138>)
 8001f54:	f043 0310 	orr.w	r3, r3, #16
 8001f58:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5a:	4b42      	ldr	r3, [pc, #264]	; (8002064 <HAL_TIM_MspPostInit+0x138>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	f003 0310 	and.w	r3, r3, #16
 8001f62:	61bb      	str	r3, [r7, #24]
 8001f64:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
 8001f66:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8001f6a:	61fb      	str	r3, [r7, #28]
    */
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pin = TIM1_CH1_SERVO1_Pin|TIM1_CH2_SERVO2_Pin|TIM1_CH3_SERVO3_Pin|TIM1_CH4_SERVO4_Pin;
 8001f70:	2300      	movs	r3, #0
 8001f72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f74:	2300      	movs	r3, #0
 8001f76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7c:	f107 031c 	add.w	r3, r7, #28
 8001f80:	4619      	mov	r1, r3
 8001f82:	4839      	ldr	r0, [pc, #228]	; (8002068 <HAL_TIM_MspPostInit+0x13c>)
 8001f84:	f001 f882 	bl	800308c <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }
 8001f88:	e066      	b.n	8002058 <HAL_TIM_MspPostInit+0x12c>
  /* USER CODE END TIM1_MspPostInit 1 */
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f92:	d11d      	bne.n	8001fd0 <HAL_TIM_MspPostInit+0xa4>
  /* USER CODE END TIM2_MspPostInit 0 */
 8001f94:	4b33      	ldr	r3, [pc, #204]	; (8002064 <HAL_TIM_MspPostInit+0x138>)
 8001f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f98:	4a32      	ldr	r2, [pc, #200]	; (8002064 <HAL_TIM_MspPostInit+0x138>)
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa0:	4b30      	ldr	r3, [pc, #192]	; (8002064 <HAL_TIM_MspPostInit+0x138>)
 8001fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	617b      	str	r3, [r7, #20]
 8001faa:	697b      	ldr	r3, [r7, #20]
    PA15     ------> TIM2_CH1
 8001fac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fb0:	61fb      	str	r3, [r7, #28]
    */
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pin = TIM2_CH1_HCSR04_TRIG_Pin;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc2:	f107 031c 	add.w	r3, r7, #28
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4828      	ldr	r0, [pc, #160]	; (800206c <HAL_TIM_MspPostInit+0x140>)
 8001fca:	f001 f85f 	bl	800308c <HAL_GPIO_Init>
  }
 8001fce:	e043      	b.n	8002058 <HAL_TIM_MspPostInit+0x12c>
  /* USER CODE END TIM2_MspPostInit 1 */
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a26      	ldr	r2, [pc, #152]	; (8002070 <HAL_TIM_MspPostInit+0x144>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d11c      	bne.n	8002014 <HAL_TIM_MspPostInit+0xe8>
  /* USER CODE END TIM5_MspPostInit 0 */
 8001fda:	4b22      	ldr	r3, [pc, #136]	; (8002064 <HAL_TIM_MspPostInit+0x138>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	4a21      	ldr	r2, [pc, #132]	; (8002064 <HAL_TIM_MspPostInit+0x138>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe6:	4b1f      	ldr	r3, [pc, #124]	; (8002064 <HAL_TIM_MspPostInit+0x138>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	613b      	str	r3, [r7, #16]
 8001ff0:	693b      	ldr	r3, [r7, #16]
    PA0/WKUP     ------> TIM5_CH1
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	61fb      	str	r3, [r7, #28]
    */
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pin = TIM5_CH1_BUZZ_Pin;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffe:	2300      	movs	r3, #0
 8002000:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2302      	movs	r3, #2
 8002004:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002006:	f107 031c 	add.w	r3, r7, #28
 800200a:	4619      	mov	r1, r3
 800200c:	4817      	ldr	r0, [pc, #92]	; (800206c <HAL_TIM_MspPostInit+0x140>)
 800200e:	f001 f83d 	bl	800308c <HAL_GPIO_Init>
  }
 8002012:	e021      	b.n	8002058 <HAL_TIM_MspPostInit+0x12c>
  /* USER CODE END TIM5_MspPostInit 1 */
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a16      	ldr	r2, [pc, #88]	; (8002074 <HAL_TIM_MspPostInit+0x148>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d11c      	bne.n	8002058 <HAL_TIM_MspPostInit+0x12c>
  /* USER CODE END TIM8_MspPostInit 0 */
 800201e:	4b11      	ldr	r3, [pc, #68]	; (8002064 <HAL_TIM_MspPostInit+0x138>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	4a10      	ldr	r2, [pc, #64]	; (8002064 <HAL_TIM_MspPostInit+0x138>)
 8002024:	f043 0304 	orr.w	r3, r3, #4
 8002028:	6313      	str	r3, [r2, #48]	; 0x30
 800202a:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <HAL_TIM_MspPostInit+0x138>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	f003 0304 	and.w	r3, r3, #4
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	68fb      	ldr	r3, [r7, #12]
    PC9     ------> TIM8_CH4
 8002036:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800203a:	61fb      	str	r3, [r7, #28]
    */
 800203c:	2302      	movs	r3, #2
 800203e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pin = TIM8_CH1_MOT1A_Pin|TIM8_CH2_MOT1B_Pin|TIM8_CH3_MOT2A_Pin|TIM8_CH4_MOT2B_Pin;
 8002040:	2300      	movs	r3, #0
 8002042:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002044:	2300      	movs	r3, #0
 8002046:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2303      	movs	r3, #3
 800204a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204c:	f107 031c 	add.w	r3, r7, #28
 8002050:	4619      	mov	r1, r3
 8002052:	4809      	ldr	r0, [pc, #36]	; (8002078 <HAL_TIM_MspPostInit+0x14c>)
 8002054:	f001 f81a 	bl	800308c <HAL_GPIO_Init>
  }
 8002058:	bf00      	nop
 800205a:	3730      	adds	r7, #48	; 0x30
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40010000 	.word	0x40010000
 8002064:	40023800 	.word	0x40023800
 8002068:	40021000 	.word	0x40021000
 800206c:	40020000 	.word	0x40020000
 8002070:	40000c00 	.word	0x40000c00
 8002074:	40010400 	.word	0x40010400
 8002078:	40020800 	.word	0x40020800

0800207c <HAL_UART_MspInit>:
/**
* @brief UART MSP Initialization
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
 800207c:	b580      	push	{r7, lr}
 800207e:	b0b6      	sub	sp, #216	; 0xd8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
 8002084:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	60da      	str	r2, [r3, #12]
 8002092:	611a      	str	r2, [r3, #16]
{
 8002094:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002098:	2290      	movs	r2, #144	; 0x90
 800209a:	2100      	movs	r1, #0
 800209c:	4618      	mov	r0, r3
 800209e:	f005 ff6b 	bl	8007f78 <memset>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4aa0      	ldr	r2, [pc, #640]	; (8002328 <HAL_UART_MspInit+0x2ac>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d13e      	bne.n	800212a <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
 80020ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020b0:	637b      	str	r3, [r7, #52]	; 0x34
  */
 80020b2:	2300      	movs	r3, #0
 80020b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80020b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020bc:	4618      	mov	r0, r3
 80020be:	f002 fd01 	bl	8004ac4 <HAL_RCCEx_PeriphCLKConfig>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <HAL_UART_MspInit+0x50>
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020c8:	f7ff fc6a 	bl	80019a0 <Error_Handler>
    {
      Error_Handler();
    }

 80020cc:	4b97      	ldr	r3, [pc, #604]	; (800232c <HAL_UART_MspInit+0x2b0>)
 80020ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d0:	4a96      	ldr	r2, [pc, #600]	; (800232c <HAL_UART_MspInit+0x2b0>)
 80020d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80020d6:	6413      	str	r3, [r2, #64]	; 0x40
 80020d8:	4b94      	ldr	r3, [pc, #592]	; (800232c <HAL_UART_MspInit+0x2b0>)
 80020da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020e0:	633b      	str	r3, [r7, #48]	; 0x30
 80020e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80020e4:	4b91      	ldr	r3, [pc, #580]	; (800232c <HAL_UART_MspInit+0x2b0>)
 80020e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e8:	4a90      	ldr	r2, [pc, #576]	; (800232c <HAL_UART_MspInit+0x2b0>)
 80020ea:	f043 0304 	orr.w	r3, r3, #4
 80020ee:	6313      	str	r3, [r2, #48]	; 0x30
 80020f0:	4b8e      	ldr	r3, [pc, #568]	; (800232c <HAL_UART_MspInit+0x2b0>)
 80020f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOC_CLK_ENABLE();
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
 80020fc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002100:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    */
 8002104:	2302      	movs	r3, #2
 8002106:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pin = UART4_TX_LCD_Pin|UART4_RX_LCD_Pin;
 800210a:	2300      	movs	r3, #0
 800210c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002110:	2303      	movs	r3, #3
 8002112:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002116:	2308      	movs	r3, #8
 8002118:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800211c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002120:	4619      	mov	r1, r3
 8002122:	4883      	ldr	r0, [pc, #524]	; (8002330 <HAL_UART_MspInit+0x2b4>)
 8002124:	f000 ffb2 	bl	800308c <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
 8002128:	e151      	b.n	80023ce <HAL_UART_MspInit+0x352>
  /* USER CODE END UART4_MspInit 1 */
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a81      	ldr	r2, [pc, #516]	; (8002334 <HAL_UART_MspInit+0x2b8>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d160      	bne.n	80021f6 <HAL_UART_MspInit+0x17a>
  /** Initializes the peripherals clock
 8002134:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002138:	637b      	str	r3, [r7, #52]	; 0x34
  */
 800213a:	2300      	movs	r3, #0
 800213c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002140:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002144:	4618      	mov	r0, r3
 8002146:	f002 fcbd 	bl	8004ac4 <HAL_RCCEx_PeriphCLKConfig>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <HAL_UART_MspInit+0xd8>
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002150:	f7ff fc26 	bl	80019a0 <Error_Handler>

 8002154:	4b75      	ldr	r3, [pc, #468]	; (800232c <HAL_UART_MspInit+0x2b0>)
 8002156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002158:	4a74      	ldr	r2, [pc, #464]	; (800232c <HAL_UART_MspInit+0x2b0>)
 800215a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800215e:	6413      	str	r3, [r2, #64]	; 0x40
 8002160:	4b72      	ldr	r3, [pc, #456]	; (800232c <HAL_UART_MspInit+0x2b0>)
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002168:	62bb      	str	r3, [r7, #40]	; 0x28
 800216a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_UART5_CLK_ENABLE();
 800216c:	4b6f      	ldr	r3, [pc, #444]	; (800232c <HAL_UART_MspInit+0x2b0>)
 800216e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002170:	4a6e      	ldr	r2, [pc, #440]	; (800232c <HAL_UART_MspInit+0x2b0>)
 8002172:	f043 0302 	orr.w	r3, r3, #2
 8002176:	6313      	str	r3, [r2, #48]	; 0x30
 8002178:	4b6c      	ldr	r3, [pc, #432]	; (800232c <HAL_UART_MspInit+0x2b0>)
 800217a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24

 8002184:	4b69      	ldr	r3, [pc, #420]	; (800232c <HAL_UART_MspInit+0x2b0>)
 8002186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002188:	4a68      	ldr	r2, [pc, #416]	; (800232c <HAL_UART_MspInit+0x2b0>)
 800218a:	f043 0304 	orr.w	r3, r3, #4
 800218e:	6313      	str	r3, [r2, #48]	; 0x30
 8002190:	4b66      	ldr	r3, [pc, #408]	; (800232c <HAL_UART_MspInit+0x2b0>)
 8002192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	623b      	str	r3, [r7, #32]
 800219a:	6a3b      	ldr	r3, [r7, #32]
    PC12     ------> UART5_TX
 800219c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    */
 80021a4:	2302      	movs	r3, #2
 80021a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80021aa:	2300      	movs	r3, #0
 80021ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b0:	2303      	movs	r3, #3
 80021b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	2308      	movs	r3, #8
 80021b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021bc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80021c0:	4619      	mov	r1, r3
 80021c2:	485d      	ldr	r0, [pc, #372]	; (8002338 <HAL_UART_MspInit+0x2bc>)
 80021c4:	f000 ff62 	bl	800308c <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

 80021d0:	2302      	movs	r3, #2
 80021d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80021d6:	2300      	movs	r3, #0
 80021d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021dc:	2303      	movs	r3, #3
 80021de:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e2:	2308      	movs	r3, #8
 80021e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80021ec:	4619      	mov	r1, r3
 80021ee:	4850      	ldr	r0, [pc, #320]	; (8002330 <HAL_UART_MspInit+0x2b4>)
 80021f0:	f000 ff4c 	bl	800308c <HAL_GPIO_Init>
  }
 80021f4:	e0eb      	b.n	80023ce <HAL_UART_MspInit+0x352>
  /* USER CODE END UART5_MspInit 1 */
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a50      	ldr	r2, [pc, #320]	; (800233c <HAL_UART_MspInit+0x2c0>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d151      	bne.n	80022a4 <HAL_UART_MspInit+0x228>
  /** Initializes the peripherals clock
 8002200:	2340      	movs	r3, #64	; 0x40
 8002202:	637b      	str	r3, [r7, #52]	; 0x34
  */
 8002204:	2300      	movs	r3, #0
 8002206:	67bb      	str	r3, [r7, #120]	; 0x78
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002208:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800220c:	4618      	mov	r0, r3
 800220e:	f002 fc59 	bl	8004ac4 <HAL_RCCEx_PeriphCLKConfig>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <HAL_UART_MspInit+0x1a0>
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002218:	f7ff fbc2 	bl	80019a0 <Error_Handler>

 800221c:	4b43      	ldr	r3, [pc, #268]	; (800232c <HAL_UART_MspInit+0x2b0>)
 800221e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002220:	4a42      	ldr	r2, [pc, #264]	; (800232c <HAL_UART_MspInit+0x2b0>)
 8002222:	f043 0310 	orr.w	r3, r3, #16
 8002226:	6453      	str	r3, [r2, #68]	; 0x44
 8002228:	4b40      	ldr	r3, [pc, #256]	; (800232c <HAL_UART_MspInit+0x2b0>)
 800222a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222c:	f003 0310 	and.w	r3, r3, #16
 8002230:	61fb      	str	r3, [r7, #28]
 8002232:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_USART1_CLK_ENABLE();
 8002234:	4b3d      	ldr	r3, [pc, #244]	; (800232c <HAL_UART_MspInit+0x2b0>)
 8002236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002238:	4a3c      	ldr	r2, [pc, #240]	; (800232c <HAL_UART_MspInit+0x2b0>)
 800223a:	f043 0302 	orr.w	r3, r3, #2
 800223e:	6313      	str	r3, [r2, #48]	; 0x30
 8002240:	4b3a      	ldr	r3, [pc, #232]	; (800232c <HAL_UART_MspInit+0x2b0>)
 8002242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	61bb      	str	r3, [r7, #24]
 800224a:	69bb      	ldr	r3, [r7, #24]
    PB6     ------> USART1_TX
 800224c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002250:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    */
 8002254:	2302      	movs	r3, #2
 8002256:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800225a:	2300      	movs	r3, #0
 800225c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002260:	2303      	movs	r3, #3
 8002262:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002266:	2304      	movs	r3, #4
 8002268:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800226c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002270:	4619      	mov	r1, r3
 8002272:	4831      	ldr	r0, [pc, #196]	; (8002338 <HAL_UART_MspInit+0x2bc>)
 8002274:	f000 ff0a 	bl	800308c <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002278:	2340      	movs	r3, #64	; 0x40
 800227a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

 800227e:	2302      	movs	r3, #2
 8002280:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002284:	2300      	movs	r3, #0
 8002286:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228a:	2303      	movs	r3, #3
 800228c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2307      	movs	r3, #7
 8002292:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002296:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800229a:	4619      	mov	r1, r3
 800229c:	4826      	ldr	r0, [pc, #152]	; (8002338 <HAL_UART_MspInit+0x2bc>)
 800229e:	f000 fef5 	bl	800308c <HAL_GPIO_Init>
  }
 80022a2:	e094      	b.n	80023ce <HAL_UART_MspInit+0x352>
  /* USER CODE END USART1_MspInit 1 */
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a25      	ldr	r2, [pc, #148]	; (8002340 <HAL_UART_MspInit+0x2c4>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d14c      	bne.n	8002348 <HAL_UART_MspInit+0x2cc>
  /** Initializes the peripherals clock
 80022ae:	2380      	movs	r3, #128	; 0x80
 80022b0:	637b      	str	r3, [r7, #52]	; 0x34
  */
 80022b2:	2300      	movs	r3, #0
 80022b4:	67fb      	str	r3, [r7, #124]	; 0x7c
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80022b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022ba:	4618      	mov	r0, r3
 80022bc:	f002 fc02 	bl	8004ac4 <HAL_RCCEx_PeriphCLKConfig>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <HAL_UART_MspInit+0x24e>
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022c6:	f7ff fb6b 	bl	80019a0 <Error_Handler>

 80022ca:	4b18      	ldr	r3, [pc, #96]	; (800232c <HAL_UART_MspInit+0x2b0>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	4a17      	ldr	r2, [pc, #92]	; (800232c <HAL_UART_MspInit+0x2b0>)
 80022d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022d4:	6413      	str	r3, [r2, #64]	; 0x40
 80022d6:	4b15      	ldr	r3, [pc, #84]	; (800232c <HAL_UART_MspInit+0x2b0>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022de:	617b      	str	r3, [r7, #20]
 80022e0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_USART2_CLK_ENABLE();
 80022e2:	4b12      	ldr	r3, [pc, #72]	; (800232c <HAL_UART_MspInit+0x2b0>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	4a11      	ldr	r2, [pc, #68]	; (800232c <HAL_UART_MspInit+0x2b0>)
 80022e8:	f043 0308 	orr.w	r3, r3, #8
 80022ec:	6313      	str	r3, [r2, #48]	; 0x30
 80022ee:	4b0f      	ldr	r3, [pc, #60]	; (800232c <HAL_UART_MspInit+0x2b0>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	f003 0308 	and.w	r3, r3, #8
 80022f6:	613b      	str	r3, [r7, #16]
 80022f8:	693b      	ldr	r3, [r7, #16]
    PD6     ------> USART2_RX
 80022fa:	2360      	movs	r3, #96	; 0x60
 80022fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    */
 8002300:	2302      	movs	r3, #2
 8002302:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002306:	2300      	movs	r3, #0
 8002308:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230c:	2303      	movs	r3, #3
 800230e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002312:	2307      	movs	r3, #7
 8002314:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002318:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800231c:	4619      	mov	r1, r3
 800231e:	4809      	ldr	r0, [pc, #36]	; (8002344 <HAL_UART_MspInit+0x2c8>)
 8002320:	f000 feb4 	bl	800308c <HAL_GPIO_Init>
  }
 8002324:	e053      	b.n	80023ce <HAL_UART_MspInit+0x352>
 8002326:	bf00      	nop
 8002328:	40004c00 	.word	0x40004c00
 800232c:	40023800 	.word	0x40023800
 8002330:	40020800 	.word	0x40020800
 8002334:	40005000 	.word	0x40005000
 8002338:	40020400 	.word	0x40020400
 800233c:	40011000 	.word	0x40011000
 8002340:	40004400 	.word	0x40004400
 8002344:	40020c00 	.word	0x40020c00
  /* USER CODE END USART2_MspInit 1 */
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a22      	ldr	r2, [pc, #136]	; (80023d8 <HAL_UART_MspInit+0x35c>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d13d      	bne.n	80023ce <HAL_UART_MspInit+0x352>
  /** Initializes the peripherals clock
 8002352:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002356:	637b      	str	r3, [r7, #52]	; 0x34
  */
 8002358:	2300      	movs	r3, #0
 800235a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800235e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002362:	4618      	mov	r0, r3
 8002364:	f002 fbae 	bl	8004ac4 <HAL_RCCEx_PeriphCLKConfig>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <HAL_UART_MspInit+0x2f6>
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800236e:	f7ff fb17 	bl	80019a0 <Error_Handler>

 8002372:	4b1a      	ldr	r3, [pc, #104]	; (80023dc <HAL_UART_MspInit+0x360>)
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	4a19      	ldr	r2, [pc, #100]	; (80023dc <HAL_UART_MspInit+0x360>)
 8002378:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800237c:	6413      	str	r3, [r2, #64]	; 0x40
 800237e:	4b17      	ldr	r3, [pc, #92]	; (80023dc <HAL_UART_MspInit+0x360>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_USART3_CLK_ENABLE();
 800238a:	4b14      	ldr	r3, [pc, #80]	; (80023dc <HAL_UART_MspInit+0x360>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	4a13      	ldr	r2, [pc, #76]	; (80023dc <HAL_UART_MspInit+0x360>)
 8002390:	f043 0308 	orr.w	r3, r3, #8
 8002394:	6313      	str	r3, [r2, #48]	; 0x30
 8002396:	4b11      	ldr	r3, [pc, #68]	; (80023dc <HAL_UART_MspInit+0x360>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	f003 0308 	and.w	r3, r3, #8
 800239e:	60bb      	str	r3, [r7, #8]
 80023a0:	68bb      	ldr	r3, [r7, #8]
    PD9     ------> USART3_RX
 80023a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    */
 80023aa:	2302      	movs	r3, #2
 80023ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80023b0:	2300      	movs	r3, #0
 80023b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b6:	2303      	movs	r3, #3
 80023b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023bc:	2307      	movs	r3, #7
 80023be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80023c6:	4619      	mov	r1, r3
 80023c8:	4805      	ldr	r0, [pc, #20]	; (80023e0 <HAL_UART_MspInit+0x364>)
 80023ca:	f000 fe5f 	bl	800308c <HAL_GPIO_Init>
  }
 80023ce:	bf00      	nop
 80023d0:	37d8      	adds	r7, #216	; 0xd8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40004800 	.word	0x40004800
 80023dc:	40023800 	.word	0x40023800
 80023e0:	40020c00 	.word	0x40020c00

080023e4 <NMI_Handler>:
/******************************************************************************/
/*           Cortex-M7 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
void NMI_Handler(void)
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
 80023e8:	e7fe      	b.n	80023e8 <NMI_Handler+0x4>

080023ea <HardFault_Handler>:
  /* USER CODE END NonMaskableInt_IRQn 1 */
}

/**
  * @brief This function handles Hard fault interrupt.
  */
 80023ea:	b480      	push	{r7}
 80023ec:	af00      	add	r7, sp, #0
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

 80023ee:	e7fe      	b.n	80023ee <HardFault_Handler+0x4>

080023f0 <MemManage_Handler>:
  }
}

/**
  * @brief This function handles Memory management fault.
  */
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

 80023f4:	e7fe      	b.n	80023f4 <MemManage_Handler+0x4>

080023f6 <BusFault_Handler>:
  }
}

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
 80023f6:	b480      	push	{r7}
 80023f8:	af00      	add	r7, sp, #0
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

 80023fa:	e7fe      	b.n	80023fa <BusFault_Handler+0x4>

080023fc <UsageFault_Handler>:
  }
}

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

 8002400:	e7fe      	b.n	8002400 <UsageFault_Handler+0x4>

08002402 <SVC_Handler>:
  }
}

/**
  * @brief This function handles Debug monitor.
  */
 8002402:	b480      	push	{r7}
 8002404:	af00      	add	r7, sp, #0
{
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

 8002406:	bf00      	nop
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <DebugMon_Handler>:
  /* USER CODE END DebugMonitor_IRQn 1 */
}

/******************************************************************************/
/* STM32F7xx Peripheral Interrupt Handlers                                    */
/* Add here the Interrupt Handlers for the used peripherals.                  */
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
/* please refer to the startup file (startup_stm32f7xx.s).                    */
/******************************************************************************/

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <PendSV_Handler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800241e:	b480      	push	{r7}
 8002420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}

/**
 8002422:	bf00      	nop
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <SysTick_Handler>:
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

 8002430:	f000 fa10 	bl	8002854 <HAL_IncTick>
  /* USER CODE END TIM6_DAC_IRQn 1 */
}

/**
 8002434:	bf00      	nop
 8002436:	bd80      	pop	{r7, pc}

08002438 <EXTI4_IRQHandler>:
  HAL_TIM_IRQHandler(&htim7);
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}

 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 1 */

/* USER CODE END 1 */
 800243c:	2010      	movs	r0, #16
 800243e:	f001 f805 	bl	800344c <HAL_GPIO_EXTI_IRQHandler>
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
	...

08002448 <TIM1_UP_TIM10_IRQHandler>:
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
 800244c:	4803      	ldr	r0, [pc, #12]	; (800245c <TIM1_UP_TIM10_IRQHandler+0x14>)
 800244e:	f003 fa43 	bl	80058d8 <HAL_TIM_IRQHandler>
 8002452:	4803      	ldr	r0, [pc, #12]	; (8002460 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002454:	f003 fa40 	bl	80058d8 <HAL_TIM_IRQHandler>
 8002458:	bf00      	nop
 800245a:	bd80      	pop	{r7, pc}
 800245c:	200001e4 	.word	0x200001e4
 8002460:	200003f8 	.word	0x200003f8

08002464 <TIM7_IRQHandler>:
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
 8002468:	4802      	ldr	r0, [pc, #8]	; (8002474 <TIM7_IRQHandler+0x10>)
 800246a:	f003 fa35 	bl	80058d8 <HAL_TIM_IRQHandler>
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20000360 	.word	0x20000360

08002478 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002480:	4a14      	ldr	r2, [pc, #80]	; (80024d4 <_sbrk+0x5c>)
 8002482:	4b15      	ldr	r3, [pc, #84]	; (80024d8 <_sbrk+0x60>)
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800248c:	4b13      	ldr	r3, [pc, #76]	; (80024dc <_sbrk+0x64>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d102      	bne.n	800249a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002494:	4b11      	ldr	r3, [pc, #68]	; (80024dc <_sbrk+0x64>)
 8002496:	4a12      	ldr	r2, [pc, #72]	; (80024e0 <_sbrk+0x68>)
 8002498:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800249a:	4b10      	ldr	r3, [pc, #64]	; (80024dc <_sbrk+0x64>)
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4413      	add	r3, r2
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d207      	bcs.n	80024b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024a8:	f005 fdb4 	bl	8008014 <__errno>
 80024ac:	4603      	mov	r3, r0
 80024ae:	220c      	movs	r2, #12
 80024b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024b6:	e009      	b.n	80024cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024b8:	4b08      	ldr	r3, [pc, #32]	; (80024dc <_sbrk+0x64>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024be:	4b07      	ldr	r3, [pc, #28]	; (80024dc <_sbrk+0x64>)
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4413      	add	r3, r2
 80024c6:	4a05      	ldr	r2, [pc, #20]	; (80024dc <_sbrk+0x64>)
 80024c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024ca:	68fb      	ldr	r3, [r7, #12]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	20080000 	.word	0x20080000
 80024d8:	00000400 	.word	0x00000400
 80024dc:	200006f0 	.word	0x200006f0
 80024e0:	20000920 	.word	0x20000920

080024e4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024e8:	4b08      	ldr	r3, [pc, #32]	; (800250c <SystemInit+0x28>)
 80024ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ee:	4a07      	ldr	r2, [pc, #28]	; (800250c <SystemInit+0x28>)
 80024f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80024f8:	4b04      	ldr	r3, [pc, #16]	; (800250c <SystemInit+0x28>)
 80024fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024fe:	609a      	str	r2, [r3, #8]
#endif
}
 8002500:	bf00      	nop
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	e000ed00 	.word	0xe000ed00

08002510 <getIndex>:
	}
	return index;
}

// get the row and column from 2byte data (first byte is the row, second byte the column)
void getIndex(int data_key, int *row, int *col) {
 8002510:	b480      	push	{r7}
 8002512:	b087      	sub	sp, #28
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
	*row = -1;
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002522:	601a      	str	r2, [r3, #0]
	*col = -1;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800252a:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < 8; ++i) {
 800252c:	2300      	movs	r3, #0
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	e00e      	b.n	8002550 <getIndex+0x40>
		if (((data_key >> i) & 1) == 0) {
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	fa42 f303 	asr.w	r3, r2, r3
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d103      	bne.n	800254a <getIndex+0x3a>
			*col = i;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	601a      	str	r2, [r3, #0]
			break;
 8002548:	e005      	b.n	8002556 <getIndex+0x46>
	for (int i = 0; i < 8; ++i) {
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	3301      	adds	r3, #1
 800254e:	617b      	str	r3, [r7, #20]
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	2b07      	cmp	r3, #7
 8002554:	dded      	ble.n	8002532 <getIndex+0x22>
		}
	}
	for (int i = 8; i < 16; ++i) {
 8002556:	2308      	movs	r3, #8
 8002558:	613b      	str	r3, [r7, #16]
 800255a:	e010      	b.n	800257e <getIndex+0x6e>
		if (((data_key >> i) & 1) == 0) {
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	fa42 f303 	asr.w	r3, r2, r3
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b00      	cmp	r3, #0
 800256a:	d105      	bne.n	8002578 <getIndex+0x68>
			*row = i - 8;
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	f1a3 0208 	sub.w	r2, r3, #8
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	601a      	str	r2, [r3, #0]
			break;
 8002576:	e006      	b.n	8002586 <getIndex+0x76>
	for (int i = 8; i < 16; ++i) {
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	3301      	adds	r3, #1
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	2b0f      	cmp	r3, #15
 8002582:	ddeb      	ble.n	800255c <getIndex+0x4c>
		}
	}
}
 8002584:	bf00      	nop
 8002586:	bf00      	nop
 8002588:	371c      	adds	r7, #28
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
	...

08002594 <clear_key_buffer>:

void clear_key_buffer(){
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
	for (int i = 0; i < 16; i++) {
 800259a:	2300      	movs	r3, #0
 800259c:	607b      	str	r3, [r7, #4]
 800259e:	e007      	b.n	80025b0 <clear_key_buffer+0x1c>
		keyBuffer[i] = 0;
 80025a0:	4a09      	ldr	r2, [pc, #36]	; (80025c8 <clear_key_buffer+0x34>)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4413      	add	r3, r2
 80025a6:	2200      	movs	r2, #0
 80025a8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++) {
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	3301      	adds	r3, #1
 80025ae:	607b      	str	r3, [r7, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b0f      	cmp	r3, #15
 80025b4:	ddf4      	ble.n	80025a0 <clear_key_buffer+0xc>
	}
	bufferIndex = 0;
 80025b6:	4b05      	ldr	r3, [pc, #20]	; (80025cc <clear_key_buffer+0x38>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	20000708 	.word	0x20000708
 80025cc:	20000718 	.word	0x20000718

080025d0 <check_valid>:

// Check for the valid string to be assigned as blink frequency (Needs to be a number)
bool check_valid(const char *buffer) {
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
	for (int i = 0; buffer[i] != '\0'; i++) {
 80025d8:	2300      	movs	r3, #0
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	e010      	b.n	8002600 <check_valid+0x30>
		if (!isdigit((unsigned char)buffer[i])) //isdigit expects a non-negative value
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	4413      	add	r3, r2
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	3301      	adds	r3, #1
 80025e8:	4a0c      	ldr	r2, [pc, #48]	; (800261c <check_valid+0x4c>)
 80025ea:	4413      	add	r3, r2
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	f003 0304 	and.w	r3, r3, #4
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <check_valid+0x2a>
			return false;
 80025f6:	2300      	movs	r3, #0
 80025f8:	e009      	b.n	800260e <check_valid+0x3e>
	for (int i = 0; buffer[i] != '\0'; i++) {
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	3301      	adds	r3, #1
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	4413      	add	r3, r2
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d1e8      	bne.n	80025de <check_valid+0xe>
	}
	return true;
 800260c:	2301      	movs	r3, #1
}
 800260e:	4618      	mov	r0, r3
 8002610:	3714      	adds	r7, #20
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	08008b62 	.word	0x08008b62

08002620 <keyPad_read>:

void keyPad_read() {
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af04      	add	r7, sp, #16

	// Reading the register
	HAL_I2C_Mem_Read(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_DATA_1, 1, (uint8_t*)&data_key, 2, I2C_TIMEOUT);
 8002626:	23c8      	movs	r3, #200	; 0xc8
 8002628:	9302      	str	r3, [sp, #8]
 800262a:	2302      	movs	r3, #2
 800262c:	9301      	str	r3, [sp, #4]
 800262e:	4b45      	ldr	r3, [pc, #276]	; (8002744 <keyPad_read+0x124>)
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	2301      	movs	r3, #1
 8002634:	2227      	movs	r2, #39	; 0x27
 8002636:	217e      	movs	r1, #126	; 0x7e
 8002638:	4843      	ldr	r0, [pc, #268]	; (8002748 <keyPad_read+0x128>)
 800263a:	f001 f8c3 	bl	80037c4 <HAL_I2C_Mem_Read>
	getIndex(data_key, &row, &col);
 800263e:	4b41      	ldr	r3, [pc, #260]	; (8002744 <keyPad_read+0x124>)
 8002640:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002644:	4a41      	ldr	r2, [pc, #260]	; (800274c <keyPad_read+0x12c>)
 8002646:	4942      	ldr	r1, [pc, #264]	; (8002750 <keyPad_read+0x130>)
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff ff61 	bl	8002510 <getIndex>
	key = keypadLayout[row][col];
 800264e:	4b40      	ldr	r3, [pc, #256]	; (8002750 <keyPad_read+0x130>)
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	4b3e      	ldr	r3, [pc, #248]	; (800274c <keyPad_read+0x12c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	493f      	ldr	r1, [pc, #252]	; (8002754 <keyPad_read+0x134>)
 8002658:	0092      	lsls	r2, r2, #2
 800265a:	440a      	add	r2, r1
 800265c:	4413      	add	r3, r2
 800265e:	781a      	ldrb	r2, [r3, #0]
 8002660:	4b3d      	ldr	r3, [pc, #244]	; (8002758 <keyPad_read+0x138>)
 8002662:	701a      	strb	r2, [r3, #0]

	currentMillis = HAL_GetTick();
 8002664:	f000 f90a 	bl	800287c <HAL_GetTick>
 8002668:	4603      	mov	r3, r0
 800266a:	4a3c      	ldr	r2, [pc, #240]	; (800275c <keyPad_read+0x13c>)
 800266c:	6013      	str	r3, [r2, #0]

	// Print the buffer
	if(key == '#'){
 800266e:	4b3a      	ldr	r3, [pc, #232]	; (8002758 <keyPad_read+0x138>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b23      	cmp	r3, #35	; 0x23
 8002674:	d11e      	bne.n	80026b4 <keyPad_read+0x94>
		printf("Buffer: %s \n", keyBuffer);
 8002676:	493a      	ldr	r1, [pc, #232]	; (8002760 <keyPad_read+0x140>)
 8002678:	483a      	ldr	r0, [pc, #232]	; (8002764 <keyPad_read+0x144>)
 800267a:	f005 fb37 	bl	8007cec <iprintf>

		if (check_valid(keyBuffer)){
 800267e:	4838      	ldr	r0, [pc, #224]	; (8002760 <keyPad_read+0x140>)
 8002680:	f7ff ffa6 	bl	80025d0 <check_valid>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00e      	beq.n	80026a8 <keyPad_read+0x88>
			printf("Value: %d \n", atoi(keyBuffer)); //
 800268a:	4835      	ldr	r0, [pc, #212]	; (8002760 <keyPad_read+0x140>)
 800268c:	f005 f9dc 	bl	8007a48 <atoi>
 8002690:	4603      	mov	r3, r0
 8002692:	4619      	mov	r1, r3
 8002694:	4834      	ldr	r0, [pc, #208]	; (8002768 <keyPad_read+0x148>)
 8002696:	f005 fb29 	bl	8007cec <iprintf>
			LED_PRESC = atoi(keyBuffer);
 800269a:	4831      	ldr	r0, [pc, #196]	; (8002760 <keyPad_read+0x140>)
 800269c:	f005 f9d4 	bl	8007a48 <atoi>
 80026a0:	4603      	mov	r3, r0
 80026a2:	4a32      	ldr	r2, [pc, #200]	; (800276c <keyPad_read+0x14c>)
 80026a4:	6013      	str	r3, [r2, #0]
 80026a6:	e002      	b.n	80026ae <keyPad_read+0x8e>
		}
		else{
			printf("NO SE PUEDEEEE, MA PERCHEEEE \n");
 80026a8:	4831      	ldr	r0, [pc, #196]	; (8002770 <keyPad_read+0x150>)
 80026aa:	f005 fb85 	bl	8007db8 <puts>
		}

		clear_key_buffer();
 80026ae:	f7ff ff71 	bl	8002594 <clear_key_buffer>
 80026b2:	e040      	b.n	8002736 <keyPad_read+0x116>
	}
	else if (key == 'D'){
 80026b4:	4b28      	ldr	r3, [pc, #160]	; (8002758 <keyPad_read+0x138>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b44      	cmp	r3, #68	; 0x44
 80026ba:	d105      	bne.n	80026c8 <keyPad_read+0xa8>
		clear_key_buffer();
 80026bc:	f7ff ff6a 	bl	8002594 <clear_key_buffer>
		printf("Buffered cleared \n");
 80026c0:	482c      	ldr	r0, [pc, #176]	; (8002774 <keyPad_read+0x154>)
 80026c2:	f005 fb79 	bl	8007db8 <puts>
 80026c6:	e036      	b.n	8002736 <keyPad_read+0x116>
	}

	// Some type of debouncer. If you hold a button we write the value into the buffer with a freq of 200ms
	else if (key==previous_key && (currentMillis-previousMillis>1000)){
 80026c8:	4b23      	ldr	r3, [pc, #140]	; (8002758 <keyPad_read+0x138>)
 80026ca:	781a      	ldrb	r2, [r3, #0]
 80026cc:	4b2a      	ldr	r3, [pc, #168]	; (8002778 <keyPad_read+0x158>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d11b      	bne.n	800270c <keyPad_read+0xec>
 80026d4:	4b21      	ldr	r3, [pc, #132]	; (800275c <keyPad_read+0x13c>)
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	4b28      	ldr	r3, [pc, #160]	; (800277c <keyPad_read+0x15c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026e2:	d913      	bls.n	800270c <keyPad_read+0xec>
		keyBuffer[bufferIndex++] = key;
 80026e4:	4b26      	ldr	r3, [pc, #152]	; (8002780 <keyPad_read+0x160>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	1c5a      	adds	r2, r3, #1
 80026ea:	4925      	ldr	r1, [pc, #148]	; (8002780 <keyPad_read+0x160>)
 80026ec:	600a      	str	r2, [r1, #0]
 80026ee:	4a1a      	ldr	r2, [pc, #104]	; (8002758 <keyPad_read+0x138>)
 80026f0:	7811      	ldrb	r1, [r2, #0]
 80026f2:	4a1b      	ldr	r2, [pc, #108]	; (8002760 <keyPad_read+0x140>)
 80026f4:	54d1      	strb	r1, [r2, r3]
		previousMillis = currentMillis;
 80026f6:	4b19      	ldr	r3, [pc, #100]	; (800275c <keyPad_read+0x13c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a20      	ldr	r2, [pc, #128]	; (800277c <keyPad_read+0x15c>)
 80026fc:	6013      	str	r3, [r2, #0]

		//Debug prints
		//printf("INDEX column: %d\n",col);
		//printf("INDEX row: %d\n",row);
		printf("%c\n",key);
 80026fe:	4b16      	ldr	r3, [pc, #88]	; (8002758 <keyPad_read+0x138>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	4619      	mov	r1, r3
 8002704:	481f      	ldr	r0, [pc, #124]	; (8002784 <keyPad_read+0x164>)
 8002706:	f005 faf1 	bl	8007cec <iprintf>
 800270a:	e014      	b.n	8002736 <keyPad_read+0x116>
	}

	// if the values differ then just write it to the buffer
	else if(key!=previous_key){
 800270c:	4b12      	ldr	r3, [pc, #72]	; (8002758 <keyPad_read+0x138>)
 800270e:	781a      	ldrb	r2, [r3, #0]
 8002710:	4b19      	ldr	r3, [pc, #100]	; (8002778 <keyPad_read+0x158>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d00e      	beq.n	8002736 <keyPad_read+0x116>
		keyBuffer[bufferIndex++]=key;
 8002718:	4b19      	ldr	r3, [pc, #100]	; (8002780 <keyPad_read+0x160>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	1c5a      	adds	r2, r3, #1
 800271e:	4918      	ldr	r1, [pc, #96]	; (8002780 <keyPad_read+0x160>)
 8002720:	600a      	str	r2, [r1, #0]
 8002722:	4a0d      	ldr	r2, [pc, #52]	; (8002758 <keyPad_read+0x138>)
 8002724:	7811      	ldrb	r1, [r2, #0]
 8002726:	4a0e      	ldr	r2, [pc, #56]	; (8002760 <keyPad_read+0x140>)
 8002728:	54d1      	strb	r1, [r2, r3]

		//Debug prints
		printf("%c\n",key);
 800272a:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <keyPad_read+0x138>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	4619      	mov	r1, r3
 8002730:	4814      	ldr	r0, [pc, #80]	; (8002784 <keyPad_read+0x164>)
 8002732:	f005 fadb 	bl	8007cec <iprintf>
	}

	previous_key = key;
 8002736:	4b08      	ldr	r3, [pc, #32]	; (8002758 <keyPad_read+0x138>)
 8002738:	781a      	ldrb	r2, [r3, #0]
 800273a:	4b0f      	ldr	r3, [pc, #60]	; (8002778 <keyPad_read+0x158>)
 800273c:	701a      	strb	r2, [r3, #0]
}
 800273e:	bf00      	nop
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	200006f4 	.word	0x200006f4
 8002748:	200000d8 	.word	0x200000d8
 800274c:	20000704 	.word	0x20000704
 8002750:	20000700 	.word	0x20000700
 8002754:	08008b38 	.word	0x08008b38
 8002758:	2000071c 	.word	0x2000071c
 800275c:	200006fc 	.word	0x200006fc
 8002760:	20000708 	.word	0x20000708
 8002764:	08008acc 	.word	0x08008acc
 8002768:	08008adc 	.word	0x08008adc
 800276c:	20000000 	.word	0x20000000
 8002770:	08008ae8 	.word	0x08008ae8
 8002774:	08008b08 	.word	0x08008b08
 8002778:	2000071d 	.word	0x2000071d
 800277c:	200006f8 	.word	0x200006f8
 8002780:	20000718 	.word	0x20000718
 8002784:	08008b1c 	.word	0x08008b1c

08002788 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002788:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027c0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800278c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800278e:	e003      	b.n	8002798 <LoopCopyDataInit>

08002790 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002790:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002792:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002794:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002796:	3104      	adds	r1, #4

08002798 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002798:	480b      	ldr	r0, [pc, #44]	; (80027c8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800279a:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800279c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800279e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80027a0:	d3f6      	bcc.n	8002790 <CopyDataInit>
  ldr  r2, =_sbss
 80027a2:	4a0b      	ldr	r2, [pc, #44]	; (80027d0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80027a4:	e002      	b.n	80027ac <LoopFillZerobss>

080027a6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80027a6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80027a8:	f842 3b04 	str.w	r3, [r2], #4

080027ac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80027ac:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80027ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80027b0:	d3f9      	bcc.n	80027a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027b2:	f7ff fe97 	bl	80024e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027b6:	f005 fc33 	bl	8008020 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027ba:	f7fd ff17 	bl	80005ec <main>
  bx  lr    
 80027be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027c0:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80027c4:	08008ca8 	.word	0x08008ca8
  ldr  r0, =_sdata
 80027c8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80027cc:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80027d0:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 80027d4:	2000091c 	.word	0x2000091c

080027d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027d8:	e7fe      	b.n	80027d8 <ADC_IRQHandler>

080027da <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027de:	2003      	movs	r0, #3
 80027e0:	f000 fc04 	bl	8002fec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027e4:	2000      	movs	r0, #0
 80027e6:	f000 f805 	bl	80027f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027ea:	f7ff f8df 	bl	80019ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027fc:	4b12      	ldr	r3, [pc, #72]	; (8002848 <HAL_InitTick+0x54>)
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	4b12      	ldr	r3, [pc, #72]	; (800284c <HAL_InitTick+0x58>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	4619      	mov	r1, r3
 8002806:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800280a:	fbb3 f3f1 	udiv	r3, r3, r1
 800280e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002812:	4618      	mov	r0, r3
 8002814:	f000 fc2d 	bl	8003072 <HAL_SYSTICK_Config>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e00e      	b.n	8002840 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2b0f      	cmp	r3, #15
 8002826:	d80a      	bhi.n	800283e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002828:	2200      	movs	r2, #0
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002830:	f000 fbe7 	bl	8003002 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002834:	4a06      	ldr	r2, [pc, #24]	; (8002850 <HAL_InitTick+0x5c>)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800283a:	2300      	movs	r3, #0
 800283c:	e000      	b.n	8002840 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
}
 8002840:	4618      	mov	r0, r3
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	20000004 	.word	0x20000004
 800284c:	2000000c 	.word	0x2000000c
 8002850:	20000008 	.word	0x20000008

08002854 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002858:	4b06      	ldr	r3, [pc, #24]	; (8002874 <HAL_IncTick+0x20>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	461a      	mov	r2, r3
 800285e:	4b06      	ldr	r3, [pc, #24]	; (8002878 <HAL_IncTick+0x24>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4413      	add	r3, r2
 8002864:	4a04      	ldr	r2, [pc, #16]	; (8002878 <HAL_IncTick+0x24>)
 8002866:	6013      	str	r3, [r2, #0]
}
 8002868:	bf00      	nop
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	2000000c 	.word	0x2000000c
 8002878:	20000720 	.word	0x20000720

0800287c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  return uwTick;
 8002880:	4b03      	ldr	r3, [pc, #12]	; (8002890 <HAL_GetTick+0x14>)
 8002882:	681b      	ldr	r3, [r3, #0]
}
 8002884:	4618      	mov	r0, r3
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	20000720 	.word	0x20000720

08002894 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800289c:	f7ff ffee 	bl	800287c <HAL_GetTick>
 80028a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028ac:	d005      	beq.n	80028ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028ae:	4b0a      	ldr	r3, [pc, #40]	; (80028d8 <HAL_Delay+0x44>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	461a      	mov	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	4413      	add	r3, r2
 80028b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028ba:	bf00      	nop
 80028bc:	f7ff ffde 	bl	800287c <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d8f7      	bhi.n	80028bc <HAL_Delay+0x28>
  {
  }
}
 80028cc:	bf00      	nop
 80028ce:	bf00      	nop
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	2000000c 	.word	0x2000000c

080028dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028e4:	2300      	movs	r3, #0
 80028e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e031      	b.n	8002956 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d109      	bne.n	800290e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7ff f87a 	bl	80019f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	f003 0310 	and.w	r3, r3, #16
 8002916:	2b00      	cmp	r3, #0
 8002918:	d116      	bne.n	8002948 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800291e:	4b10      	ldr	r3, [pc, #64]	; (8002960 <HAL_ADC_Init+0x84>)
 8002920:	4013      	ands	r3, r2
 8002922:	f043 0202 	orr.w	r2, r3, #2
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f970 	bl	8002c10 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	f023 0303 	bic.w	r3, r3, #3
 800293e:	f043 0201 	orr.w	r2, r3, #1
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	641a      	str	r2, [r3, #64]	; 0x40
 8002946:	e001      	b.n	800294c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002954:	7bfb      	ldrb	r3, [r7, #15]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	ffffeefd 	.word	0xffffeefd

08002964 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800296e:	2300      	movs	r3, #0
 8002970:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002978:	2b01      	cmp	r3, #1
 800297a:	d101      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x1c>
 800297c:	2302      	movs	r3, #2
 800297e:	e136      	b.n	8002bee <HAL_ADC_ConfigChannel+0x28a>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b09      	cmp	r3, #9
 800298e:	d93a      	bls.n	8002a06 <HAL_ADC_ConfigChannel+0xa2>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002998:	d035      	beq.n	8002a06 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68d9      	ldr	r1, [r3, #12]
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	461a      	mov	r2, r3
 80029a8:	4613      	mov	r3, r2
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	4413      	add	r3, r2
 80029ae:	3b1e      	subs	r3, #30
 80029b0:	2207      	movs	r2, #7
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	43da      	mvns	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	400a      	ands	r2, r1
 80029be:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a8d      	ldr	r2, [pc, #564]	; (8002bfc <HAL_ADC_ConfigChannel+0x298>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d10a      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68d9      	ldr	r1, [r3, #12]
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	061a      	lsls	r2, r3, #24
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029de:	e035      	b.n	8002a4c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68d9      	ldr	r1, [r3, #12]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	689a      	ldr	r2, [r3, #8]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	4618      	mov	r0, r3
 80029f2:	4603      	mov	r3, r0
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	4403      	add	r3, r0
 80029f8:	3b1e      	subs	r3, #30
 80029fa:	409a      	lsls	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a04:	e022      	b.n	8002a4c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6919      	ldr	r1, [r3, #16]
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	461a      	mov	r2, r3
 8002a14:	4613      	mov	r3, r2
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	4413      	add	r3, r2
 8002a1a:	2207      	movs	r2, #7
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	43da      	mvns	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	400a      	ands	r2, r1
 8002a28:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6919      	ldr	r1, [r3, #16]
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	4403      	add	r3, r0
 8002a42:	409a      	lsls	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	2b06      	cmp	r3, #6
 8002a52:	d824      	bhi.n	8002a9e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4413      	add	r3, r2
 8002a64:	3b05      	subs	r3, #5
 8002a66:	221f      	movs	r2, #31
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	43da      	mvns	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	400a      	ands	r2, r1
 8002a74:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	4618      	mov	r0, r3
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	3b05      	subs	r3, #5
 8002a90:	fa00 f203 	lsl.w	r2, r0, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	635a      	str	r2, [r3, #52]	; 0x34
 8002a9c:	e04c      	b.n	8002b38 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2b0c      	cmp	r3, #12
 8002aa4:	d824      	bhi.n	8002af0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4413      	add	r3, r2
 8002ab6:	3b23      	subs	r3, #35	; 0x23
 8002ab8:	221f      	movs	r2, #31
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	43da      	mvns	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	400a      	ands	r2, r1
 8002ac6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	4613      	mov	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	3b23      	subs	r3, #35	; 0x23
 8002ae2:	fa00 f203 	lsl.w	r2, r0, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	631a      	str	r2, [r3, #48]	; 0x30
 8002aee:	e023      	b.n	8002b38 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	4613      	mov	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	3b41      	subs	r3, #65	; 0x41
 8002b02:	221f      	movs	r2, #31
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	43da      	mvns	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	400a      	ands	r2, r1
 8002b10:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	4618      	mov	r0, r3
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	4613      	mov	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4413      	add	r3, r2
 8002b2a:	3b41      	subs	r3, #65	; 0x41
 8002b2c:	fa00 f203 	lsl.w	r2, r0, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a30      	ldr	r2, [pc, #192]	; (8002c00 <HAL_ADC_ConfigChannel+0x29c>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d10a      	bne.n	8002b58 <HAL_ADC_ConfigChannel+0x1f4>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b4a:	d105      	bne.n	8002b58 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002b4c:	4b2d      	ldr	r3, [pc, #180]	; (8002c04 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	4a2c      	ldr	r2, [pc, #176]	; (8002c04 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b52:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002b56:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a28      	ldr	r2, [pc, #160]	; (8002c00 <HAL_ADC_ConfigChannel+0x29c>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d10f      	bne.n	8002b82 <HAL_ADC_ConfigChannel+0x21e>
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2b12      	cmp	r3, #18
 8002b68:	d10b      	bne.n	8002b82 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002b6a:	4b26      	ldr	r3, [pc, #152]	; (8002c04 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	4a25      	ldr	r2, [pc, #148]	; (8002c04 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b70:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002b74:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002b76:	4b23      	ldr	r3, [pc, #140]	; (8002c04 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	4a22      	ldr	r2, [pc, #136]	; (8002c04 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b80:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a1e      	ldr	r2, [pc, #120]	; (8002c00 <HAL_ADC_ConfigChannel+0x29c>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d12b      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x280>
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a1a      	ldr	r2, [pc, #104]	; (8002bfc <HAL_ADC_ConfigChannel+0x298>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d003      	beq.n	8002b9e <HAL_ADC_ConfigChannel+0x23a>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2b11      	cmp	r3, #17
 8002b9c:	d122      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002b9e:	4b19      	ldr	r3, [pc, #100]	; (8002c04 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	4a18      	ldr	r2, [pc, #96]	; (8002c04 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ba4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002ba8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002baa:	4b16      	ldr	r3, [pc, #88]	; (8002c04 <HAL_ADC_ConfigChannel+0x2a0>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	4a15      	ldr	r2, [pc, #84]	; (8002c04 <HAL_ADC_ConfigChannel+0x2a0>)
 8002bb0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002bb4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a10      	ldr	r2, [pc, #64]	; (8002bfc <HAL_ADC_ConfigChannel+0x298>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d111      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002bc0:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <HAL_ADC_ConfigChannel+0x2a4>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a11      	ldr	r2, [pc, #68]	; (8002c0c <HAL_ADC_ConfigChannel+0x2a8>)
 8002bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bca:	0c9a      	lsrs	r2, r3, #18
 8002bcc:	4613      	mov	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002bd6:	e002      	b.n	8002bde <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1f9      	bne.n	8002bd8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	10000012 	.word	0x10000012
 8002c00:	40012000 	.word	0x40012000
 8002c04:	40012300 	.word	0x40012300
 8002c08:	20000004 	.word	0x20000004
 8002c0c:	431bde83 	.word	0x431bde83

08002c10 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002c18:	4b78      	ldr	r3, [pc, #480]	; (8002dfc <ADC_Init+0x1ec>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	4a77      	ldr	r2, [pc, #476]	; (8002dfc <ADC_Init+0x1ec>)
 8002c1e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002c22:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002c24:	4b75      	ldr	r3, [pc, #468]	; (8002dfc <ADC_Init+0x1ec>)
 8002c26:	685a      	ldr	r2, [r3, #4]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	4973      	ldr	r1, [pc, #460]	; (8002dfc <ADC_Init+0x1ec>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6859      	ldr	r1, [r3, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	021a      	lsls	r2, r3, #8
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6859      	ldr	r1, [r3, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689a      	ldr	r2, [r3, #8]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6899      	ldr	r1, [r3, #8]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68da      	ldr	r2, [r3, #12]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9e:	4a58      	ldr	r2, [pc, #352]	; (8002e00 <ADC_Init+0x1f0>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d022      	beq.n	8002cea <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cb2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6899      	ldr	r1, [r3, #8]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6899      	ldr	r1, [r3, #8]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	609a      	str	r2, [r3, #8]
 8002ce8:	e00f      	b.n	8002d0a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cf8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d08:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 0202 	bic.w	r2, r2, #2
 8002d18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6899      	ldr	r1, [r3, #8]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	005a      	lsls	r2, r3, #1
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d01b      	beq.n	8002d70 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	685a      	ldr	r2, [r3, #4]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d46:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d56:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6859      	ldr	r1, [r3, #4]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	3b01      	subs	r3, #1
 8002d64:	035a      	lsls	r2, r3, #13
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	605a      	str	r2, [r3, #4]
 8002d6e:	e007      	b.n	8002d80 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d7e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	051a      	lsls	r2, r3, #20
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002db4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6899      	ldr	r1, [r3, #8]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002dc2:	025a      	lsls	r2, r3, #9
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6899      	ldr	r1, [r3, #8]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	029a      	lsls	r2, r3, #10
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	609a      	str	r2, [r3, #8]
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	40012300 	.word	0x40012300
 8002e00:	0f000001 	.word	0x0f000001

08002e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e14:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <__NVIC_SetPriorityGrouping+0x40>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e1a:	68ba      	ldr	r2, [r7, #8]
 8002e1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e20:	4013      	ands	r3, r2
 8002e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002e2c:	4b06      	ldr	r3, [pc, #24]	; (8002e48 <__NVIC_SetPriorityGrouping+0x44>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e32:	4a04      	ldr	r2, [pc, #16]	; (8002e44 <__NVIC_SetPriorityGrouping+0x40>)
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	60d3      	str	r3, [r2, #12]
}
 8002e38:	bf00      	nop
 8002e3a:	3714      	adds	r7, #20
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr
 8002e44:	e000ed00 	.word	0xe000ed00
 8002e48:	05fa0000 	.word	0x05fa0000

08002e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e50:	4b04      	ldr	r3, [pc, #16]	; (8002e64 <__NVIC_GetPriorityGrouping+0x18>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	0a1b      	lsrs	r3, r3, #8
 8002e56:	f003 0307 	and.w	r3, r3, #7
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	e000ed00 	.word	0xe000ed00

08002e68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	4603      	mov	r3, r0
 8002e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	db0b      	blt.n	8002e92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e7a:	79fb      	ldrb	r3, [r7, #7]
 8002e7c:	f003 021f 	and.w	r2, r3, #31
 8002e80:	4907      	ldr	r1, [pc, #28]	; (8002ea0 <__NVIC_EnableIRQ+0x38>)
 8002e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e86:	095b      	lsrs	r3, r3, #5
 8002e88:	2001      	movs	r0, #1
 8002e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	e000e100 	.word	0xe000e100

08002ea4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	4603      	mov	r3, r0
 8002eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	db12      	blt.n	8002edc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eb6:	79fb      	ldrb	r3, [r7, #7]
 8002eb8:	f003 021f 	and.w	r2, r3, #31
 8002ebc:	490a      	ldr	r1, [pc, #40]	; (8002ee8 <__NVIC_DisableIRQ+0x44>)
 8002ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec2:	095b      	lsrs	r3, r3, #5
 8002ec4:	2001      	movs	r0, #1
 8002ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8002eca:	3320      	adds	r3, #32
 8002ecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002ed0:	f3bf 8f4f 	dsb	sy
}
 8002ed4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002ed6:	f3bf 8f6f 	isb	sy
}
 8002eda:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	e000e100 	.word	0xe000e100

08002eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	6039      	str	r1, [r7, #0]
 8002ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	db0a      	blt.n	8002f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	490c      	ldr	r1, [pc, #48]	; (8002f38 <__NVIC_SetPriority+0x4c>)
 8002f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0a:	0112      	lsls	r2, r2, #4
 8002f0c:	b2d2      	uxtb	r2, r2
 8002f0e:	440b      	add	r3, r1
 8002f10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f14:	e00a      	b.n	8002f2c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	4908      	ldr	r1, [pc, #32]	; (8002f3c <__NVIC_SetPriority+0x50>)
 8002f1c:	79fb      	ldrb	r3, [r7, #7]
 8002f1e:	f003 030f 	and.w	r3, r3, #15
 8002f22:	3b04      	subs	r3, #4
 8002f24:	0112      	lsls	r2, r2, #4
 8002f26:	b2d2      	uxtb	r2, r2
 8002f28:	440b      	add	r3, r1
 8002f2a:	761a      	strb	r2, [r3, #24]
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	e000e100 	.word	0xe000e100
 8002f3c:	e000ed00 	.word	0xe000ed00

08002f40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b089      	sub	sp, #36	; 0x24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	f1c3 0307 	rsb	r3, r3, #7
 8002f5a:	2b04      	cmp	r3, #4
 8002f5c:	bf28      	it	cs
 8002f5e:	2304      	movcs	r3, #4
 8002f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	3304      	adds	r3, #4
 8002f66:	2b06      	cmp	r3, #6
 8002f68:	d902      	bls.n	8002f70 <NVIC_EncodePriority+0x30>
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	3b03      	subs	r3, #3
 8002f6e:	e000      	b.n	8002f72 <NVIC_EncodePriority+0x32>
 8002f70:	2300      	movs	r3, #0
 8002f72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	43da      	mvns	r2, r3
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	401a      	ands	r2, r3
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f92:	43d9      	mvns	r1, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f98:	4313      	orrs	r3, r2
         );
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3724      	adds	r7, #36	; 0x24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
	...

08002fa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fb8:	d301      	bcc.n	8002fbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e00f      	b.n	8002fde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fbe:	4a0a      	ldr	r2, [pc, #40]	; (8002fe8 <SysTick_Config+0x40>)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fc6:	210f      	movs	r1, #15
 8002fc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fcc:	f7ff ff8e 	bl	8002eec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fd0:	4b05      	ldr	r3, [pc, #20]	; (8002fe8 <SysTick_Config+0x40>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fd6:	4b04      	ldr	r3, [pc, #16]	; (8002fe8 <SysTick_Config+0x40>)
 8002fd8:	2207      	movs	r2, #7
 8002fda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	e000e010 	.word	0xe000e010

08002fec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f7ff ff05 	bl	8002e04 <__NVIC_SetPriorityGrouping>
}
 8002ffa:	bf00      	nop
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003002:	b580      	push	{r7, lr}
 8003004:	b086      	sub	sp, #24
 8003006:	af00      	add	r7, sp, #0
 8003008:	4603      	mov	r3, r0
 800300a:	60b9      	str	r1, [r7, #8]
 800300c:	607a      	str	r2, [r7, #4]
 800300e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003010:	2300      	movs	r3, #0
 8003012:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003014:	f7ff ff1a 	bl	8002e4c <__NVIC_GetPriorityGrouping>
 8003018:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	68b9      	ldr	r1, [r7, #8]
 800301e:	6978      	ldr	r0, [r7, #20]
 8003020:	f7ff ff8e 	bl	8002f40 <NVIC_EncodePriority>
 8003024:	4602      	mov	r2, r0
 8003026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800302a:	4611      	mov	r1, r2
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff ff5d 	bl	8002eec <__NVIC_SetPriority>
}
 8003032:	bf00      	nop
 8003034:	3718      	adds	r7, #24
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b082      	sub	sp, #8
 800303e:	af00      	add	r7, sp, #0
 8003040:	4603      	mov	r3, r0
 8003042:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff ff0d 	bl	8002e68 <__NVIC_EnableIRQ>
}
 800304e:	bf00      	nop
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b082      	sub	sp, #8
 800305a:	af00      	add	r7, sp, #0
 800305c:	4603      	mov	r3, r0
 800305e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003064:	4618      	mov	r0, r3
 8003066:	f7ff ff1d 	bl	8002ea4 <__NVIC_DisableIRQ>
}
 800306a:	bf00      	nop
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b082      	sub	sp, #8
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7ff ff94 	bl	8002fa8 <SysTick_Config>
 8003080:	4603      	mov	r3, r0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
	...

0800308c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800308c:	b480      	push	{r7}
 800308e:	b089      	sub	sp, #36	; 0x24
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003096:	2300      	movs	r3, #0
 8003098:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800309a:	2300      	movs	r3, #0
 800309c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800309e:	2300      	movs	r3, #0
 80030a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80030a2:	2300      	movs	r3, #0
 80030a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80030a6:	2300      	movs	r3, #0
 80030a8:	61fb      	str	r3, [r7, #28]
 80030aa:	e175      	b.n	8003398 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80030ac:	2201      	movs	r2, #1
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	4013      	ands	r3, r2
 80030be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	f040 8164 	bne.w	8003392 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f003 0303 	and.w	r3, r3, #3
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d005      	beq.n	80030e2 <HAL_GPIO_Init+0x56>
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d130      	bne.n	8003144 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	2203      	movs	r2, #3
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	43db      	mvns	r3, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4013      	ands	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	68da      	ldr	r2, [r3, #12]
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	4313      	orrs	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003118:	2201      	movs	r2, #1
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	43db      	mvns	r3, r3
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	4013      	ands	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	091b      	lsrs	r3, r3, #4
 800312e:	f003 0201 	and.w	r2, r3, #1
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4313      	orrs	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f003 0303 	and.w	r3, r3, #3
 800314c:	2b03      	cmp	r3, #3
 800314e:	d017      	beq.n	8003180 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	2203      	movs	r2, #3
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	43db      	mvns	r3, r3
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4013      	ands	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4313      	orrs	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f003 0303 	and.w	r3, r3, #3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d123      	bne.n	80031d4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	08da      	lsrs	r2, r3, #3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3208      	adds	r2, #8
 8003194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003198:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	220f      	movs	r2, #15
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	43db      	mvns	r3, r3
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	4013      	ands	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	691a      	ldr	r2, [r3, #16]
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	08da      	lsrs	r2, r3, #3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	3208      	adds	r2, #8
 80031ce:	69b9      	ldr	r1, [r7, #24]
 80031d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	2203      	movs	r2, #3
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	43db      	mvns	r3, r3
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	4013      	ands	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f003 0203 	and.w	r2, r3, #3
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	4313      	orrs	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 80be 	beq.w	8003392 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003216:	4b66      	ldr	r3, [pc, #408]	; (80033b0 <HAL_GPIO_Init+0x324>)
 8003218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321a:	4a65      	ldr	r2, [pc, #404]	; (80033b0 <HAL_GPIO_Init+0x324>)
 800321c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003220:	6453      	str	r3, [r2, #68]	; 0x44
 8003222:	4b63      	ldr	r3, [pc, #396]	; (80033b0 <HAL_GPIO_Init+0x324>)
 8003224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800322a:	60fb      	str	r3, [r7, #12]
 800322c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800322e:	4a61      	ldr	r2, [pc, #388]	; (80033b4 <HAL_GPIO_Init+0x328>)
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	089b      	lsrs	r3, r3, #2
 8003234:	3302      	adds	r3, #2
 8003236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800323a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	f003 0303 	and.w	r3, r3, #3
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	220f      	movs	r2, #15
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	43db      	mvns	r3, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4013      	ands	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a58      	ldr	r2, [pc, #352]	; (80033b8 <HAL_GPIO_Init+0x32c>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d037      	beq.n	80032ca <HAL_GPIO_Init+0x23e>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a57      	ldr	r2, [pc, #348]	; (80033bc <HAL_GPIO_Init+0x330>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d031      	beq.n	80032c6 <HAL_GPIO_Init+0x23a>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a56      	ldr	r2, [pc, #344]	; (80033c0 <HAL_GPIO_Init+0x334>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d02b      	beq.n	80032c2 <HAL_GPIO_Init+0x236>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a55      	ldr	r2, [pc, #340]	; (80033c4 <HAL_GPIO_Init+0x338>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d025      	beq.n	80032be <HAL_GPIO_Init+0x232>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a54      	ldr	r2, [pc, #336]	; (80033c8 <HAL_GPIO_Init+0x33c>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d01f      	beq.n	80032ba <HAL_GPIO_Init+0x22e>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a53      	ldr	r2, [pc, #332]	; (80033cc <HAL_GPIO_Init+0x340>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d019      	beq.n	80032b6 <HAL_GPIO_Init+0x22a>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a52      	ldr	r2, [pc, #328]	; (80033d0 <HAL_GPIO_Init+0x344>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d013      	beq.n	80032b2 <HAL_GPIO_Init+0x226>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a51      	ldr	r2, [pc, #324]	; (80033d4 <HAL_GPIO_Init+0x348>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d00d      	beq.n	80032ae <HAL_GPIO_Init+0x222>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a50      	ldr	r2, [pc, #320]	; (80033d8 <HAL_GPIO_Init+0x34c>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d007      	beq.n	80032aa <HAL_GPIO_Init+0x21e>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a4f      	ldr	r2, [pc, #316]	; (80033dc <HAL_GPIO_Init+0x350>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d101      	bne.n	80032a6 <HAL_GPIO_Init+0x21a>
 80032a2:	2309      	movs	r3, #9
 80032a4:	e012      	b.n	80032cc <HAL_GPIO_Init+0x240>
 80032a6:	230a      	movs	r3, #10
 80032a8:	e010      	b.n	80032cc <HAL_GPIO_Init+0x240>
 80032aa:	2308      	movs	r3, #8
 80032ac:	e00e      	b.n	80032cc <HAL_GPIO_Init+0x240>
 80032ae:	2307      	movs	r3, #7
 80032b0:	e00c      	b.n	80032cc <HAL_GPIO_Init+0x240>
 80032b2:	2306      	movs	r3, #6
 80032b4:	e00a      	b.n	80032cc <HAL_GPIO_Init+0x240>
 80032b6:	2305      	movs	r3, #5
 80032b8:	e008      	b.n	80032cc <HAL_GPIO_Init+0x240>
 80032ba:	2304      	movs	r3, #4
 80032bc:	e006      	b.n	80032cc <HAL_GPIO_Init+0x240>
 80032be:	2303      	movs	r3, #3
 80032c0:	e004      	b.n	80032cc <HAL_GPIO_Init+0x240>
 80032c2:	2302      	movs	r3, #2
 80032c4:	e002      	b.n	80032cc <HAL_GPIO_Init+0x240>
 80032c6:	2301      	movs	r3, #1
 80032c8:	e000      	b.n	80032cc <HAL_GPIO_Init+0x240>
 80032ca:	2300      	movs	r3, #0
 80032cc:	69fa      	ldr	r2, [r7, #28]
 80032ce:	f002 0203 	and.w	r2, r2, #3
 80032d2:	0092      	lsls	r2, r2, #2
 80032d4:	4093      	lsls	r3, r2
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	4313      	orrs	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80032dc:	4935      	ldr	r1, [pc, #212]	; (80033b4 <HAL_GPIO_Init+0x328>)
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	089b      	lsrs	r3, r3, #2
 80032e2:	3302      	adds	r3, #2
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032ea:	4b3d      	ldr	r3, [pc, #244]	; (80033e0 <HAL_GPIO_Init+0x354>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	43db      	mvns	r3, r3
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	4013      	ands	r3, r2
 80032f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	4313      	orrs	r3, r2
 800330c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800330e:	4a34      	ldr	r2, [pc, #208]	; (80033e0 <HAL_GPIO_Init+0x354>)
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003314:	4b32      	ldr	r3, [pc, #200]	; (80033e0 <HAL_GPIO_Init+0x354>)
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	43db      	mvns	r3, r3
 800331e:	69ba      	ldr	r2, [r7, #24]
 8003320:	4013      	ands	r3, r2
 8003322:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d003      	beq.n	8003338 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	4313      	orrs	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003338:	4a29      	ldr	r2, [pc, #164]	; (80033e0 <HAL_GPIO_Init+0x354>)
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800333e:	4b28      	ldr	r3, [pc, #160]	; (80033e0 <HAL_GPIO_Init+0x354>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	43db      	mvns	r3, r3
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	4013      	ands	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	4313      	orrs	r3, r2
 8003360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003362:	4a1f      	ldr	r2, [pc, #124]	; (80033e0 <HAL_GPIO_Init+0x354>)
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003368:	4b1d      	ldr	r3, [pc, #116]	; (80033e0 <HAL_GPIO_Init+0x354>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	43db      	mvns	r3, r3
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	4013      	ands	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d003      	beq.n	800338c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	4313      	orrs	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800338c:	4a14      	ldr	r2, [pc, #80]	; (80033e0 <HAL_GPIO_Init+0x354>)
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	3301      	adds	r3, #1
 8003396:	61fb      	str	r3, [r7, #28]
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	2b0f      	cmp	r3, #15
 800339c:	f67f ae86 	bls.w	80030ac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80033a0:	bf00      	nop
 80033a2:	bf00      	nop
 80033a4:	3724      	adds	r7, #36	; 0x24
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	40023800 	.word	0x40023800
 80033b4:	40013800 	.word	0x40013800
 80033b8:	40020000 	.word	0x40020000
 80033bc:	40020400 	.word	0x40020400
 80033c0:	40020800 	.word	0x40020800
 80033c4:	40020c00 	.word	0x40020c00
 80033c8:	40021000 	.word	0x40021000
 80033cc:	40021400 	.word	0x40021400
 80033d0:	40021800 	.word	0x40021800
 80033d4:	40021c00 	.word	0x40021c00
 80033d8:	40022000 	.word	0x40022000
 80033dc:	40022400 	.word	0x40022400
 80033e0:	40013c00 	.word	0x40013c00

080033e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	460b      	mov	r3, r1
 80033ee:	807b      	strh	r3, [r7, #2]
 80033f0:	4613      	mov	r3, r2
 80033f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033f4:	787b      	ldrb	r3, [r7, #1]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033fa:	887a      	ldrh	r2, [r7, #2]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003400:	e003      	b.n	800340a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003402:	887b      	ldrh	r3, [r7, #2]
 8003404:	041a      	lsls	r2, r3, #16
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	619a      	str	r2, [r3, #24]
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr

08003416 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003416:	b480      	push	{r7}
 8003418:	b085      	sub	sp, #20
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
 800341e:	460b      	mov	r3, r1
 8003420:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003428:	887a      	ldrh	r2, [r7, #2]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	4013      	ands	r3, r2
 800342e:	041a      	lsls	r2, r3, #16
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	43d9      	mvns	r1, r3
 8003434:	887b      	ldrh	r3, [r7, #2]
 8003436:	400b      	ands	r3, r1
 8003438:	431a      	orrs	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	619a      	str	r2, [r3, #24]
}
 800343e:	bf00      	nop
 8003440:	3714      	adds	r7, #20
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
	...

0800344c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	4603      	mov	r3, r0
 8003454:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003456:	4b08      	ldr	r3, [pc, #32]	; (8003478 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003458:	695a      	ldr	r2, [r3, #20]
 800345a:	88fb      	ldrh	r3, [r7, #6]
 800345c:	4013      	ands	r3, r2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d006      	beq.n	8003470 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003462:	4a05      	ldr	r2, [pc, #20]	; (8003478 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003464:	88fb      	ldrh	r3, [r7, #6]
 8003466:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003468:	88fb      	ldrh	r3, [r7, #6]
 800346a:	4618      	mov	r0, r3
 800346c:	f7fe fa8a 	bl	8001984 <HAL_GPIO_EXTI_Callback>
  }
}
 8003470:	bf00      	nop
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40013c00 	.word	0x40013c00

0800347c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e07f      	b.n	800358e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d106      	bne.n	80034a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7fe fae6 	bl	8001a74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2224      	movs	r2, #36	; 0x24
 80034ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0201 	bic.w	r2, r2, #1
 80034be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685a      	ldr	r2, [r3, #4]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d107      	bne.n	80034f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034f2:	609a      	str	r2, [r3, #8]
 80034f4:	e006      	b.n	8003504 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	689a      	ldr	r2, [r3, #8]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003502:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	2b02      	cmp	r3, #2
 800350a:	d104      	bne.n	8003516 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003514:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6859      	ldr	r1, [r3, #4]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	4b1d      	ldr	r3, [pc, #116]	; (8003598 <HAL_I2C_Init+0x11c>)
 8003522:	430b      	orrs	r3, r1
 8003524:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68da      	ldr	r2, [r3, #12]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003534:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	691a      	ldr	r2, [r3, #16]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	430a      	orrs	r2, r1
 800354e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	69d9      	ldr	r1, [r3, #28]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a1a      	ldr	r2, [r3, #32]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	430a      	orrs	r2, r1
 800355e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0201 	orr.w	r2, r2, #1
 800356e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2220      	movs	r2, #32
 800357a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	02008000 	.word	0x02008000

0800359c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b088      	sub	sp, #32
 80035a0:	af02      	add	r7, sp, #8
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	4608      	mov	r0, r1
 80035a6:	4611      	mov	r1, r2
 80035a8:	461a      	mov	r2, r3
 80035aa:	4603      	mov	r3, r0
 80035ac:	817b      	strh	r3, [r7, #10]
 80035ae:	460b      	mov	r3, r1
 80035b0:	813b      	strh	r3, [r7, #8]
 80035b2:	4613      	mov	r3, r2
 80035b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b20      	cmp	r3, #32
 80035c0:	f040 80f9 	bne.w	80037b6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80035c4:	6a3b      	ldr	r3, [r7, #32]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d002      	beq.n	80035d0 <HAL_I2C_Mem_Write+0x34>
 80035ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d105      	bne.n	80035dc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035d6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e0ed      	b.n	80037b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d101      	bne.n	80035ea <HAL_I2C_Mem_Write+0x4e>
 80035e6:	2302      	movs	r3, #2
 80035e8:	e0e6      	b.n	80037b8 <HAL_I2C_Mem_Write+0x21c>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80035f2:	f7ff f943 	bl	800287c <HAL_GetTick>
 80035f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	2319      	movs	r3, #25
 80035fe:	2201      	movs	r2, #1
 8003600:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f000 fac3 	bl	8003b90 <I2C_WaitOnFlagUntilTimeout>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e0d1      	b.n	80037b8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2221      	movs	r2, #33	; 0x21
 8003618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2240      	movs	r2, #64	; 0x40
 8003620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6a3a      	ldr	r2, [r7, #32]
 800362e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003634:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800363c:	88f8      	ldrh	r0, [r7, #6]
 800363e:	893a      	ldrh	r2, [r7, #8]
 8003640:	8979      	ldrh	r1, [r7, #10]
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	9301      	str	r3, [sp, #4]
 8003646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003648:	9300      	str	r3, [sp, #0]
 800364a:	4603      	mov	r3, r0
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f000 f9d3 	bl	80039f8 <I2C_RequestMemoryWrite>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d005      	beq.n	8003664 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e0a9      	b.n	80037b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003668:	b29b      	uxth	r3, r3
 800366a:	2bff      	cmp	r3, #255	; 0xff
 800366c:	d90e      	bls.n	800368c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	22ff      	movs	r2, #255	; 0xff
 8003672:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003678:	b2da      	uxtb	r2, r3
 800367a:	8979      	ldrh	r1, [r7, #10]
 800367c:	2300      	movs	r3, #0
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 fc1f 	bl	8003ec8 <I2C_TransferConfig>
 800368a:	e00f      	b.n	80036ac <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003690:	b29a      	uxth	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800369a:	b2da      	uxtb	r2, r3
 800369c:	8979      	ldrh	r1, [r7, #10]
 800369e:	2300      	movs	r3, #0
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f000 fc0e 	bl	8003ec8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f000 faad 	bl	8003c10 <I2C_WaitOnTXISFlagUntilTimeout>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d001      	beq.n	80036c0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e07b      	b.n	80037b8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	781a      	ldrb	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d0:	1c5a      	adds	r2, r3, #1
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036da:	b29b      	uxth	r3, r3
 80036dc:	3b01      	subs	r3, #1
 80036de:	b29a      	uxth	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e8:	3b01      	subs	r3, #1
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d034      	beq.n	8003764 <HAL_I2C_Mem_Write+0x1c8>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d130      	bne.n	8003764 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003708:	2200      	movs	r2, #0
 800370a:	2180      	movs	r1, #128	; 0x80
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f000 fa3f 	bl	8003b90 <I2C_WaitOnFlagUntilTimeout>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e04d      	b.n	80037b8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003720:	b29b      	uxth	r3, r3
 8003722:	2bff      	cmp	r3, #255	; 0xff
 8003724:	d90e      	bls.n	8003744 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	22ff      	movs	r2, #255	; 0xff
 800372a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003730:	b2da      	uxtb	r2, r3
 8003732:	8979      	ldrh	r1, [r7, #10]
 8003734:	2300      	movs	r3, #0
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f000 fbc3 	bl	8003ec8 <I2C_TransferConfig>
 8003742:	e00f      	b.n	8003764 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003748:	b29a      	uxth	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003752:	b2da      	uxtb	r2, r3
 8003754:	8979      	ldrh	r1, [r7, #10]
 8003756:	2300      	movs	r3, #0
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f000 fbb2 	bl	8003ec8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003768:	b29b      	uxth	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d19e      	bne.n	80036ac <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 fa8c 	bl	8003c90 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e01a      	b.n	80037b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2220      	movs	r2, #32
 8003788:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6859      	ldr	r1, [r3, #4]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	4b0a      	ldr	r3, [pc, #40]	; (80037c0 <HAL_I2C_Mem_Write+0x224>)
 8003796:	400b      	ands	r3, r1
 8003798:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2220      	movs	r2, #32
 800379e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037b2:	2300      	movs	r3, #0
 80037b4:	e000      	b.n	80037b8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80037b6:	2302      	movs	r3, #2
  }
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3718      	adds	r7, #24
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	fe00e800 	.word	0xfe00e800

080037c4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b088      	sub	sp, #32
 80037c8:	af02      	add	r7, sp, #8
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	4608      	mov	r0, r1
 80037ce:	4611      	mov	r1, r2
 80037d0:	461a      	mov	r2, r3
 80037d2:	4603      	mov	r3, r0
 80037d4:	817b      	strh	r3, [r7, #10]
 80037d6:	460b      	mov	r3, r1
 80037d8:	813b      	strh	r3, [r7, #8]
 80037da:	4613      	mov	r3, r2
 80037dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b20      	cmp	r3, #32
 80037e8:	f040 80fd 	bne.w	80039e6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80037ec:	6a3b      	ldr	r3, [r7, #32]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d002      	beq.n	80037f8 <HAL_I2C_Mem_Read+0x34>
 80037f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d105      	bne.n	8003804 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037fe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e0f1      	b.n	80039e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800380a:	2b01      	cmp	r3, #1
 800380c:	d101      	bne.n	8003812 <HAL_I2C_Mem_Read+0x4e>
 800380e:	2302      	movs	r3, #2
 8003810:	e0ea      	b.n	80039e8 <HAL_I2C_Mem_Read+0x224>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800381a:	f7ff f82f 	bl	800287c <HAL_GetTick>
 800381e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	2319      	movs	r3, #25
 8003826:	2201      	movs	r2, #1
 8003828:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f000 f9af 	bl	8003b90 <I2C_WaitOnFlagUntilTimeout>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e0d5      	b.n	80039e8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2222      	movs	r2, #34	; 0x22
 8003840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2240      	movs	r2, #64	; 0x40
 8003848:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6a3a      	ldr	r2, [r7, #32]
 8003856:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800385c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003864:	88f8      	ldrh	r0, [r7, #6]
 8003866:	893a      	ldrh	r2, [r7, #8]
 8003868:	8979      	ldrh	r1, [r7, #10]
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	9301      	str	r3, [sp, #4]
 800386e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	4603      	mov	r3, r0
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f000 f913 	bl	8003aa0 <I2C_RequestMemoryRead>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d005      	beq.n	800388c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e0ad      	b.n	80039e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003890:	b29b      	uxth	r3, r3
 8003892:	2bff      	cmp	r3, #255	; 0xff
 8003894:	d90e      	bls.n	80038b4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	22ff      	movs	r2, #255	; 0xff
 800389a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	8979      	ldrh	r1, [r7, #10]
 80038a4:	4b52      	ldr	r3, [pc, #328]	; (80039f0 <HAL_I2C_Mem_Read+0x22c>)
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f000 fb0b 	bl	8003ec8 <I2C_TransferConfig>
 80038b2:	e00f      	b.n	80038d4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c2:	b2da      	uxtb	r2, r3
 80038c4:	8979      	ldrh	r1, [r7, #10]
 80038c6:	4b4a      	ldr	r3, [pc, #296]	; (80039f0 <HAL_I2C_Mem_Read+0x22c>)
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f000 fafa 	bl	8003ec8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038da:	2200      	movs	r2, #0
 80038dc:	2104      	movs	r1, #4
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 f956 	bl	8003b90 <I2C_WaitOnFlagUntilTimeout>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e07c      	b.n	80039e8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f8:	b2d2      	uxtb	r2, r2
 80038fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	1c5a      	adds	r2, r3, #1
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800390a:	3b01      	subs	r3, #1
 800390c:	b29a      	uxth	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003916:	b29b      	uxth	r3, r3
 8003918:	3b01      	subs	r3, #1
 800391a:	b29a      	uxth	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003924:	b29b      	uxth	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d034      	beq.n	8003994 <HAL_I2C_Mem_Read+0x1d0>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800392e:	2b00      	cmp	r3, #0
 8003930:	d130      	bne.n	8003994 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	9300      	str	r3, [sp, #0]
 8003936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003938:	2200      	movs	r2, #0
 800393a:	2180      	movs	r1, #128	; 0x80
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f000 f927 	bl	8003b90 <I2C_WaitOnFlagUntilTimeout>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e04d      	b.n	80039e8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003950:	b29b      	uxth	r3, r3
 8003952:	2bff      	cmp	r3, #255	; 0xff
 8003954:	d90e      	bls.n	8003974 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	22ff      	movs	r2, #255	; 0xff
 800395a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003960:	b2da      	uxtb	r2, r3
 8003962:	8979      	ldrh	r1, [r7, #10]
 8003964:	2300      	movs	r3, #0
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f000 faab 	bl	8003ec8 <I2C_TransferConfig>
 8003972:	e00f      	b.n	8003994 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003978:	b29a      	uxth	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003982:	b2da      	uxtb	r2, r3
 8003984:	8979      	ldrh	r1, [r7, #10]
 8003986:	2300      	movs	r3, #0
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f000 fa9a 	bl	8003ec8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003998:	b29b      	uxth	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d19a      	bne.n	80038d4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 f974 	bl	8003c90 <I2C_WaitOnSTOPFlagUntilTimeout>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e01a      	b.n	80039e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2220      	movs	r2, #32
 80039b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6859      	ldr	r1, [r3, #4]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <HAL_I2C_Mem_Read+0x230>)
 80039c6:	400b      	ands	r3, r1
 80039c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2220      	movs	r2, #32
 80039ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039e2:	2300      	movs	r3, #0
 80039e4:	e000      	b.n	80039e8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80039e6:	2302      	movs	r3, #2
  }
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3718      	adds	r7, #24
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	80002400 	.word	0x80002400
 80039f4:	fe00e800 	.word	0xfe00e800

080039f8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af02      	add	r7, sp, #8
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	4608      	mov	r0, r1
 8003a02:	4611      	mov	r1, r2
 8003a04:	461a      	mov	r2, r3
 8003a06:	4603      	mov	r3, r0
 8003a08:	817b      	strh	r3, [r7, #10]
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	813b      	strh	r3, [r7, #8]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003a12:	88fb      	ldrh	r3, [r7, #6]
 8003a14:	b2da      	uxtb	r2, r3
 8003a16:	8979      	ldrh	r1, [r7, #10]
 8003a18:	4b20      	ldr	r3, [pc, #128]	; (8003a9c <I2C_RequestMemoryWrite+0xa4>)
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f000 fa51 	bl	8003ec8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a26:	69fa      	ldr	r2, [r7, #28]
 8003a28:	69b9      	ldr	r1, [r7, #24]
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 f8f0 	bl	8003c10 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e02c      	b.n	8003a94 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a3a:	88fb      	ldrh	r3, [r7, #6]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d105      	bne.n	8003a4c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a40:	893b      	ldrh	r3, [r7, #8]
 8003a42:	b2da      	uxtb	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	629a      	str	r2, [r3, #40]	; 0x28
 8003a4a:	e015      	b.n	8003a78 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a4c:	893b      	ldrh	r3, [r7, #8]
 8003a4e:	0a1b      	lsrs	r3, r3, #8
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	b2da      	uxtb	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a5a:	69fa      	ldr	r2, [r7, #28]
 8003a5c:	69b9      	ldr	r1, [r7, #24]
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f000 f8d6 	bl	8003c10 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e012      	b.n	8003a94 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a6e:	893b      	ldrh	r3, [r7, #8]
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	9300      	str	r3, [sp, #0]
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	2180      	movs	r1, #128	; 0x80
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f000 f884 	bl	8003b90 <I2C_WaitOnFlagUntilTimeout>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e000      	b.n	8003a94 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	80002000 	.word	0x80002000

08003aa0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af02      	add	r7, sp, #8
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	4608      	mov	r0, r1
 8003aaa:	4611      	mov	r1, r2
 8003aac:	461a      	mov	r2, r3
 8003aae:	4603      	mov	r3, r0
 8003ab0:	817b      	strh	r3, [r7, #10]
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	813b      	strh	r3, [r7, #8]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003aba:	88fb      	ldrh	r3, [r7, #6]
 8003abc:	b2da      	uxtb	r2, r3
 8003abe:	8979      	ldrh	r1, [r7, #10]
 8003ac0:	4b20      	ldr	r3, [pc, #128]	; (8003b44 <I2C_RequestMemoryRead+0xa4>)
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f000 f9fe 	bl	8003ec8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003acc:	69fa      	ldr	r2, [r7, #28]
 8003ace:	69b9      	ldr	r1, [r7, #24]
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f000 f89d 	bl	8003c10 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e02c      	b.n	8003b3a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ae0:	88fb      	ldrh	r3, [r7, #6]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d105      	bne.n	8003af2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ae6:	893b      	ldrh	r3, [r7, #8]
 8003ae8:	b2da      	uxtb	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	629a      	str	r2, [r3, #40]	; 0x28
 8003af0:	e015      	b.n	8003b1e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003af2:	893b      	ldrh	r3, [r7, #8]
 8003af4:	0a1b      	lsrs	r3, r3, #8
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	b2da      	uxtb	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b00:	69fa      	ldr	r2, [r7, #28]
 8003b02:	69b9      	ldr	r1, [r7, #24]
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f000 f883 	bl	8003c10 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e012      	b.n	8003b3a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b14:	893b      	ldrh	r3, [r7, #8]
 8003b16:	b2da      	uxtb	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	2200      	movs	r2, #0
 8003b26:	2140      	movs	r1, #64	; 0x40
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f000 f831 	bl	8003b90 <I2C_WaitOnFlagUntilTimeout>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e000      	b.n	8003b3a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	80002000 	.word	0x80002000

08003b48 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d103      	bne.n	8003b66 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2200      	movs	r2, #0
 8003b64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d007      	beq.n	8003b84 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	699a      	ldr	r2, [r3, #24]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 0201 	orr.w	r2, r2, #1
 8003b82:	619a      	str	r2, [r3, #24]
  }
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	603b      	str	r3, [r7, #0]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ba0:	e022      	b.n	8003be8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ba8:	d01e      	beq.n	8003be8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003baa:	f7fe fe67 	bl	800287c <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d302      	bcc.n	8003bc0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d113      	bne.n	8003be8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc4:	f043 0220 	orr.w	r2, r3, #32
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e00f      	b.n	8003c08 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	699a      	ldr	r2, [r3, #24]
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	bf0c      	ite	eq
 8003bf8:	2301      	moveq	r3, #1
 8003bfa:	2300      	movne	r3, #0
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	461a      	mov	r2, r3
 8003c00:	79fb      	ldrb	r3, [r7, #7]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d0cd      	beq.n	8003ba2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c1c:	e02c      	b.n	8003c78 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	68b9      	ldr	r1, [r7, #8]
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f000 f870 	bl	8003d08 <I2C_IsErrorOccurred>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e02a      	b.n	8003c88 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c38:	d01e      	beq.n	8003c78 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c3a:	f7fe fe1f 	bl	800287c <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d302      	bcc.n	8003c50 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d113      	bne.n	8003c78 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c54:	f043 0220 	orr.w	r2, r3, #32
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e007      	b.n	8003c88 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d1cb      	bne.n	8003c1e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3710      	adds	r7, #16
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c9c:	e028      	b.n	8003cf0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	68b9      	ldr	r1, [r7, #8]
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f000 f830 	bl	8003d08 <I2C_IsErrorOccurred>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e026      	b.n	8003d00 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cb2:	f7fe fde3 	bl	800287c <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	68ba      	ldr	r2, [r7, #8]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d302      	bcc.n	8003cc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d113      	bne.n	8003cf0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ccc:	f043 0220 	orr.w	r2, r3, #32
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e007      	b.n	8003d00 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	f003 0320 	and.w	r3, r3, #32
 8003cfa:	2b20      	cmp	r3, #32
 8003cfc:	d1cf      	bne.n	8003c9e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b08a      	sub	sp, #40	; 0x28
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d14:	2300      	movs	r3, #0
 8003d16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003d22:	2300      	movs	r3, #0
 8003d24:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	f003 0310 	and.w	r3, r3, #16
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d068      	beq.n	8003e06 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2210      	movs	r2, #16
 8003d3a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d3c:	e049      	b.n	8003dd2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d44:	d045      	beq.n	8003dd2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d46:	f7fe fd99 	bl	800287c <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	68ba      	ldr	r2, [r7, #8]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d302      	bcc.n	8003d5c <I2C_IsErrorOccurred+0x54>
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d13a      	bne.n	8003dd2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d66:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d6e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d7e:	d121      	bne.n	8003dc4 <I2C_IsErrorOccurred+0xbc>
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d86:	d01d      	beq.n	8003dc4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003d88:	7cfb      	ldrb	r3, [r7, #19]
 8003d8a:	2b20      	cmp	r3, #32
 8003d8c:	d01a      	beq.n	8003dc4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	685a      	ldr	r2, [r3, #4]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d9c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003d9e:	f7fe fd6d 	bl	800287c <HAL_GetTick>
 8003da2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003da4:	e00e      	b.n	8003dc4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003da6:	f7fe fd69 	bl	800287c <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b19      	cmp	r3, #25
 8003db2:	d907      	bls.n	8003dc4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003db4:	6a3b      	ldr	r3, [r7, #32]
 8003db6:	f043 0320 	orr.w	r3, r3, #32
 8003dba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003dc2:	e006      	b.n	8003dd2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	f003 0320 	and.w	r3, r3, #32
 8003dce:	2b20      	cmp	r3, #32
 8003dd0:	d1e9      	bne.n	8003da6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	f003 0320 	and.w	r3, r3, #32
 8003ddc:	2b20      	cmp	r3, #32
 8003dde:	d003      	beq.n	8003de8 <I2C_IsErrorOccurred+0xe0>
 8003de0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d0aa      	beq.n	8003d3e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003de8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d103      	bne.n	8003df8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2220      	movs	r2, #32
 8003df6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003df8:	6a3b      	ldr	r3, [r7, #32]
 8003dfa:	f043 0304 	orr.w	r3, r3, #4
 8003dfe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00b      	beq.n	8003e30 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	f043 0301 	orr.w	r3, r3, #1
 8003e1e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e28:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00b      	beq.n	8003e52 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003e3a:	6a3b      	ldr	r3, [r7, #32]
 8003e3c:	f043 0308 	orr.w	r3, r3, #8
 8003e40:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e4a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00b      	beq.n	8003e74 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003e5c:	6a3b      	ldr	r3, [r7, #32]
 8003e5e:	f043 0302 	orr.w	r3, r3, #2
 8003e62:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003e74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d01c      	beq.n	8003eb6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f7ff fe63 	bl	8003b48 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	6859      	ldr	r1, [r3, #4]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	4b0d      	ldr	r3, [pc, #52]	; (8003ec4 <I2C_IsErrorOccurred+0x1bc>)
 8003e8e:	400b      	ands	r3, r1
 8003e90:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003eb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3728      	adds	r7, #40	; 0x28
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	fe00e800 	.word	0xfe00e800

08003ec8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b087      	sub	sp, #28
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	607b      	str	r3, [r7, #4]
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	817b      	strh	r3, [r7, #10]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003eda:	897b      	ldrh	r3, [r7, #10]
 8003edc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ee0:	7a7b      	ldrb	r3, [r7, #9]
 8003ee2:	041b      	lsls	r3, r3, #16
 8003ee4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ee8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003eee:	6a3b      	ldr	r3, [r7, #32]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ef6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	6a3b      	ldr	r3, [r7, #32]
 8003f00:	0d5b      	lsrs	r3, r3, #21
 8003f02:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003f06:	4b08      	ldr	r3, [pc, #32]	; (8003f28 <I2C_TransferConfig+0x60>)
 8003f08:	430b      	orrs	r3, r1
 8003f0a:	43db      	mvns	r3, r3
 8003f0c:	ea02 0103 	and.w	r1, r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003f1a:	bf00      	nop
 8003f1c:	371c      	adds	r7, #28
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	03ff63ff 	.word	0x03ff63ff

08003f2c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b20      	cmp	r3, #32
 8003f40:	d138      	bne.n	8003fb4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d101      	bne.n	8003f50 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e032      	b.n	8003fb6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2224      	movs	r2, #36	; 0x24
 8003f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0201 	bic.w	r2, r2, #1
 8003f6e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f7e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	6819      	ldr	r1, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f042 0201 	orr.w	r2, r2, #1
 8003f9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	e000      	b.n	8003fb6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003fb4:	2302      	movs	r3, #2
  }
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b085      	sub	sp, #20
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
 8003fca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b20      	cmp	r3, #32
 8003fd6:	d139      	bne.n	800404c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d101      	bne.n	8003fe6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	e033      	b.n	800404e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2224      	movs	r2, #36	; 0x24
 8003ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 0201 	bic.w	r2, r2, #1
 8004004:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004014:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	021b      	lsls	r3, r3, #8
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	4313      	orrs	r3, r2
 800401e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0201 	orr.w	r2, r2, #1
 8004036:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2220      	movs	r2, #32
 800403c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004048:	2300      	movs	r3, #0
 800404a:	e000      	b.n	800404e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800404c:	2302      	movs	r3, #2
  }
}
 800404e:	4618      	mov	r0, r3
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
	...

0800405c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004060:	4b05      	ldr	r3, [pc, #20]	; (8004078 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a04      	ldr	r2, [pc, #16]	; (8004078 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004066:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800406a:	6013      	str	r3, [r2, #0]
}
 800406c:	bf00      	nop
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	40007000 	.word	0x40007000

0800407c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004082:	2300      	movs	r3, #0
 8004084:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004086:	4b23      	ldr	r3, [pc, #140]	; (8004114 <HAL_PWREx_EnableOverDrive+0x98>)
 8004088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408a:	4a22      	ldr	r2, [pc, #136]	; (8004114 <HAL_PWREx_EnableOverDrive+0x98>)
 800408c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004090:	6413      	str	r3, [r2, #64]	; 0x40
 8004092:	4b20      	ldr	r3, [pc, #128]	; (8004114 <HAL_PWREx_EnableOverDrive+0x98>)
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800409a:	603b      	str	r3, [r7, #0]
 800409c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800409e:	4b1e      	ldr	r3, [pc, #120]	; (8004118 <HAL_PWREx_EnableOverDrive+0x9c>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a1d      	ldr	r2, [pc, #116]	; (8004118 <HAL_PWREx_EnableOverDrive+0x9c>)
 80040a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040aa:	f7fe fbe7 	bl	800287c <HAL_GetTick>
 80040ae:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80040b0:	e009      	b.n	80040c6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80040b2:	f7fe fbe3 	bl	800287c <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040c0:	d901      	bls.n	80040c6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e022      	b.n	800410c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80040c6:	4b14      	ldr	r3, [pc, #80]	; (8004118 <HAL_PWREx_EnableOverDrive+0x9c>)
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040d2:	d1ee      	bne.n	80040b2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80040d4:	4b10      	ldr	r3, [pc, #64]	; (8004118 <HAL_PWREx_EnableOverDrive+0x9c>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a0f      	ldr	r2, [pc, #60]	; (8004118 <HAL_PWREx_EnableOverDrive+0x9c>)
 80040da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040de:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040e0:	f7fe fbcc 	bl	800287c <HAL_GetTick>
 80040e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80040e6:	e009      	b.n	80040fc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80040e8:	f7fe fbc8 	bl	800287c <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040f6:	d901      	bls.n	80040fc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e007      	b.n	800410c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80040fc:	4b06      	ldr	r3, [pc, #24]	; (8004118 <HAL_PWREx_EnableOverDrive+0x9c>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004104:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004108:	d1ee      	bne.n	80040e8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3708      	adds	r7, #8
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	40023800 	.word	0x40023800
 8004118:	40007000 	.word	0x40007000

0800411c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004124:	2300      	movs	r3, #0
 8004126:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e29b      	b.n	800466a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	f000 8087 	beq.w	800424e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004140:	4b96      	ldr	r3, [pc, #600]	; (800439c <HAL_RCC_OscConfig+0x280>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f003 030c 	and.w	r3, r3, #12
 8004148:	2b04      	cmp	r3, #4
 800414a:	d00c      	beq.n	8004166 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800414c:	4b93      	ldr	r3, [pc, #588]	; (800439c <HAL_RCC_OscConfig+0x280>)
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f003 030c 	and.w	r3, r3, #12
 8004154:	2b08      	cmp	r3, #8
 8004156:	d112      	bne.n	800417e <HAL_RCC_OscConfig+0x62>
 8004158:	4b90      	ldr	r3, [pc, #576]	; (800439c <HAL_RCC_OscConfig+0x280>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004160:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004164:	d10b      	bne.n	800417e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004166:	4b8d      	ldr	r3, [pc, #564]	; (800439c <HAL_RCC_OscConfig+0x280>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d06c      	beq.n	800424c <HAL_RCC_OscConfig+0x130>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d168      	bne.n	800424c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e275      	b.n	800466a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004186:	d106      	bne.n	8004196 <HAL_RCC_OscConfig+0x7a>
 8004188:	4b84      	ldr	r3, [pc, #528]	; (800439c <HAL_RCC_OscConfig+0x280>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a83      	ldr	r2, [pc, #524]	; (800439c <HAL_RCC_OscConfig+0x280>)
 800418e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004192:	6013      	str	r3, [r2, #0]
 8004194:	e02e      	b.n	80041f4 <HAL_RCC_OscConfig+0xd8>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10c      	bne.n	80041b8 <HAL_RCC_OscConfig+0x9c>
 800419e:	4b7f      	ldr	r3, [pc, #508]	; (800439c <HAL_RCC_OscConfig+0x280>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a7e      	ldr	r2, [pc, #504]	; (800439c <HAL_RCC_OscConfig+0x280>)
 80041a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041a8:	6013      	str	r3, [r2, #0]
 80041aa:	4b7c      	ldr	r3, [pc, #496]	; (800439c <HAL_RCC_OscConfig+0x280>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a7b      	ldr	r2, [pc, #492]	; (800439c <HAL_RCC_OscConfig+0x280>)
 80041b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041b4:	6013      	str	r3, [r2, #0]
 80041b6:	e01d      	b.n	80041f4 <HAL_RCC_OscConfig+0xd8>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041c0:	d10c      	bne.n	80041dc <HAL_RCC_OscConfig+0xc0>
 80041c2:	4b76      	ldr	r3, [pc, #472]	; (800439c <HAL_RCC_OscConfig+0x280>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a75      	ldr	r2, [pc, #468]	; (800439c <HAL_RCC_OscConfig+0x280>)
 80041c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041cc:	6013      	str	r3, [r2, #0]
 80041ce:	4b73      	ldr	r3, [pc, #460]	; (800439c <HAL_RCC_OscConfig+0x280>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a72      	ldr	r2, [pc, #456]	; (800439c <HAL_RCC_OscConfig+0x280>)
 80041d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041d8:	6013      	str	r3, [r2, #0]
 80041da:	e00b      	b.n	80041f4 <HAL_RCC_OscConfig+0xd8>
 80041dc:	4b6f      	ldr	r3, [pc, #444]	; (800439c <HAL_RCC_OscConfig+0x280>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a6e      	ldr	r2, [pc, #440]	; (800439c <HAL_RCC_OscConfig+0x280>)
 80041e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041e6:	6013      	str	r3, [r2, #0]
 80041e8:	4b6c      	ldr	r3, [pc, #432]	; (800439c <HAL_RCC_OscConfig+0x280>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a6b      	ldr	r2, [pc, #428]	; (800439c <HAL_RCC_OscConfig+0x280>)
 80041ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d013      	beq.n	8004224 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fc:	f7fe fb3e 	bl	800287c <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004202:	e008      	b.n	8004216 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004204:	f7fe fb3a 	bl	800287c <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b64      	cmp	r3, #100	; 0x64
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e229      	b.n	800466a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004216:	4b61      	ldr	r3, [pc, #388]	; (800439c <HAL_RCC_OscConfig+0x280>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d0f0      	beq.n	8004204 <HAL_RCC_OscConfig+0xe8>
 8004222:	e014      	b.n	800424e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004224:	f7fe fb2a 	bl	800287c <HAL_GetTick>
 8004228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800422c:	f7fe fb26 	bl	800287c <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b64      	cmp	r3, #100	; 0x64
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e215      	b.n	800466a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800423e:	4b57      	ldr	r3, [pc, #348]	; (800439c <HAL_RCC_OscConfig+0x280>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1f0      	bne.n	800422c <HAL_RCC_OscConfig+0x110>
 800424a:	e000      	b.n	800424e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800424c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d069      	beq.n	800432e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800425a:	4b50      	ldr	r3, [pc, #320]	; (800439c <HAL_RCC_OscConfig+0x280>)
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f003 030c 	and.w	r3, r3, #12
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00b      	beq.n	800427e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004266:	4b4d      	ldr	r3, [pc, #308]	; (800439c <HAL_RCC_OscConfig+0x280>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f003 030c 	and.w	r3, r3, #12
 800426e:	2b08      	cmp	r3, #8
 8004270:	d11c      	bne.n	80042ac <HAL_RCC_OscConfig+0x190>
 8004272:	4b4a      	ldr	r3, [pc, #296]	; (800439c <HAL_RCC_OscConfig+0x280>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d116      	bne.n	80042ac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800427e:	4b47      	ldr	r3, [pc, #284]	; (800439c <HAL_RCC_OscConfig+0x280>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d005      	beq.n	8004296 <HAL_RCC_OscConfig+0x17a>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d001      	beq.n	8004296 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e1e9      	b.n	800466a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004296:	4b41      	ldr	r3, [pc, #260]	; (800439c <HAL_RCC_OscConfig+0x280>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	00db      	lsls	r3, r3, #3
 80042a4:	493d      	ldr	r1, [pc, #244]	; (800439c <HAL_RCC_OscConfig+0x280>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042aa:	e040      	b.n	800432e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d023      	beq.n	80042fc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042b4:	4b39      	ldr	r3, [pc, #228]	; (800439c <HAL_RCC_OscConfig+0x280>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a38      	ldr	r2, [pc, #224]	; (800439c <HAL_RCC_OscConfig+0x280>)
 80042ba:	f043 0301 	orr.w	r3, r3, #1
 80042be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c0:	f7fe fadc 	bl	800287c <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042c8:	f7fe fad8 	bl	800287c <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e1c7      	b.n	800466a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042da:	4b30      	ldr	r3, [pc, #192]	; (800439c <HAL_RCC_OscConfig+0x280>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0f0      	beq.n	80042c8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042e6:	4b2d      	ldr	r3, [pc, #180]	; (800439c <HAL_RCC_OscConfig+0x280>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	4929      	ldr	r1, [pc, #164]	; (800439c <HAL_RCC_OscConfig+0x280>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	600b      	str	r3, [r1, #0]
 80042fa:	e018      	b.n	800432e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042fc:	4b27      	ldr	r3, [pc, #156]	; (800439c <HAL_RCC_OscConfig+0x280>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a26      	ldr	r2, [pc, #152]	; (800439c <HAL_RCC_OscConfig+0x280>)
 8004302:	f023 0301 	bic.w	r3, r3, #1
 8004306:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004308:	f7fe fab8 	bl	800287c <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004310:	f7fe fab4 	bl	800287c <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b02      	cmp	r3, #2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e1a3      	b.n	800466a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004322:	4b1e      	ldr	r3, [pc, #120]	; (800439c <HAL_RCC_OscConfig+0x280>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1f0      	bne.n	8004310 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0308 	and.w	r3, r3, #8
 8004336:	2b00      	cmp	r3, #0
 8004338:	d038      	beq.n	80043ac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d019      	beq.n	8004376 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004342:	4b16      	ldr	r3, [pc, #88]	; (800439c <HAL_RCC_OscConfig+0x280>)
 8004344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004346:	4a15      	ldr	r2, [pc, #84]	; (800439c <HAL_RCC_OscConfig+0x280>)
 8004348:	f043 0301 	orr.w	r3, r3, #1
 800434c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800434e:	f7fe fa95 	bl	800287c <HAL_GetTick>
 8004352:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004354:	e008      	b.n	8004368 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004356:	f7fe fa91 	bl	800287c <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d901      	bls.n	8004368 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e180      	b.n	800466a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004368:	4b0c      	ldr	r3, [pc, #48]	; (800439c <HAL_RCC_OscConfig+0x280>)
 800436a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	2b00      	cmp	r3, #0
 8004372:	d0f0      	beq.n	8004356 <HAL_RCC_OscConfig+0x23a>
 8004374:	e01a      	b.n	80043ac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004376:	4b09      	ldr	r3, [pc, #36]	; (800439c <HAL_RCC_OscConfig+0x280>)
 8004378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800437a:	4a08      	ldr	r2, [pc, #32]	; (800439c <HAL_RCC_OscConfig+0x280>)
 800437c:	f023 0301 	bic.w	r3, r3, #1
 8004380:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004382:	f7fe fa7b 	bl	800287c <HAL_GetTick>
 8004386:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004388:	e00a      	b.n	80043a0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800438a:	f7fe fa77 	bl	800287c <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b02      	cmp	r3, #2
 8004396:	d903      	bls.n	80043a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e166      	b.n	800466a <HAL_RCC_OscConfig+0x54e>
 800439c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043a0:	4b92      	ldr	r3, [pc, #584]	; (80045ec <HAL_RCC_OscConfig+0x4d0>)
 80043a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1ee      	bne.n	800438a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0304 	and.w	r3, r3, #4
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f000 80a4 	beq.w	8004502 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043ba:	4b8c      	ldr	r3, [pc, #560]	; (80045ec <HAL_RCC_OscConfig+0x4d0>)
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10d      	bne.n	80043e2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80043c6:	4b89      	ldr	r3, [pc, #548]	; (80045ec <HAL_RCC_OscConfig+0x4d0>)
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	4a88      	ldr	r2, [pc, #544]	; (80045ec <HAL_RCC_OscConfig+0x4d0>)
 80043cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043d0:	6413      	str	r3, [r2, #64]	; 0x40
 80043d2:	4b86      	ldr	r3, [pc, #536]	; (80045ec <HAL_RCC_OscConfig+0x4d0>)
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043da:	60bb      	str	r3, [r7, #8]
 80043dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043de:	2301      	movs	r3, #1
 80043e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043e2:	4b83      	ldr	r3, [pc, #524]	; (80045f0 <HAL_RCC_OscConfig+0x4d4>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d118      	bne.n	8004420 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80043ee:	4b80      	ldr	r3, [pc, #512]	; (80045f0 <HAL_RCC_OscConfig+0x4d4>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a7f      	ldr	r2, [pc, #508]	; (80045f0 <HAL_RCC_OscConfig+0x4d4>)
 80043f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043fa:	f7fe fa3f 	bl	800287c <HAL_GetTick>
 80043fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004400:	e008      	b.n	8004414 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004402:	f7fe fa3b 	bl	800287c <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	2b64      	cmp	r3, #100	; 0x64
 800440e:	d901      	bls.n	8004414 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e12a      	b.n	800466a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004414:	4b76      	ldr	r3, [pc, #472]	; (80045f0 <HAL_RCC_OscConfig+0x4d4>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800441c:	2b00      	cmp	r3, #0
 800441e:	d0f0      	beq.n	8004402 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d106      	bne.n	8004436 <HAL_RCC_OscConfig+0x31a>
 8004428:	4b70      	ldr	r3, [pc, #448]	; (80045ec <HAL_RCC_OscConfig+0x4d0>)
 800442a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800442c:	4a6f      	ldr	r2, [pc, #444]	; (80045ec <HAL_RCC_OscConfig+0x4d0>)
 800442e:	f043 0301 	orr.w	r3, r3, #1
 8004432:	6713      	str	r3, [r2, #112]	; 0x70
 8004434:	e02d      	b.n	8004492 <HAL_RCC_OscConfig+0x376>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10c      	bne.n	8004458 <HAL_RCC_OscConfig+0x33c>
 800443e:	4b6b      	ldr	r3, [pc, #428]	; (80045ec <HAL_RCC_OscConfig+0x4d0>)
 8004440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004442:	4a6a      	ldr	r2, [pc, #424]	; (80045ec <HAL_RCC_OscConfig+0x4d0>)
 8004444:	f023 0301 	bic.w	r3, r3, #1
 8004448:	6713      	str	r3, [r2, #112]	; 0x70
 800444a:	4b68      	ldr	r3, [pc, #416]	; (80045ec <HAL_RCC_OscConfig+0x4d0>)
 800444c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444e:	4a67      	ldr	r2, [pc, #412]	; (80045ec <HAL_RCC_OscConfig+0x4d0>)
 8004450:	f023 0304 	bic.w	r3, r3, #4
 8004454:	6713      	str	r3, [r2, #112]	; 0x70
 8004456:	e01c      	b.n	8004492 <HAL_RCC_OscConfig+0x376>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	2b05      	cmp	r3, #5
 800445e:	d10c      	bne.n	800447a <HAL_RCC_OscConfig+0x35e>
 8004460:	4b62      	ldr	r3, [pc, #392]	; (80045ec <HAL_RCC_OscConfig+0x4d0>)
 8004462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004464:	4a61      	ldr	r2, [pc, #388]	; (80045ec <HAL_RCC_OscConfig+0x4d0>)
 8004466:	f043 0304 	orr.w	r3, r3, #4
 800446a:	6713      	str	r3, [r2, #112]	; 0x70
 800446c:	4b5f      	ldr	r3, [pc, #380]	; (80045ec <HAL_RCC_OscConfig+0x4d0>)
 800446e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004470:	4a5e      	ldr	r2, [pc, #376]	; (80045ec <HAL_RCC_OscConfig+0x4d0>)
 8004472:	f043 0301 	orr.w	r3, r3, #1
 8004476:	6713      	str	r3, [r2, #112]	; 0x70
 8004478:	e00b      	b.n	8004492 <HAL_RCC_OscConfig+0x376>
 800447a:	4b5c      	ldr	r3, [pc, #368]	; (80045ec <HAL_RCC_OscConfig+0x4d0>)
 800447c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800447e:	4a5b      	ldr	r2, [pc, #364]	; (80045ec <HAL_RCC_OscConfig+0x4d0>)
 8004480:	f023 0301 	bic.w	r3, r3, #1
 8004484:	6713      	str	r3, [r2, #112]	; 0x70
 8004486:	4b59      	ldr	r3, [pc, #356]	; (80045ec <HAL_RCC_OscConfig+0x4d0>)
 8004488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448a:	4a58      	ldr	r2, [pc, #352]	; (80045ec <HAL_RCC_OscConfig+0x4d0>)
 800448c:	f023 0304 	bic.w	r3, r3, #4
 8004490:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d015      	beq.n	80044c6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800449a:	f7fe f9ef 	bl	800287c <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044a0:	e00a      	b.n	80044b8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044a2:	f7fe f9eb 	bl	800287c <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d901      	bls.n	80044b8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e0d8      	b.n	800466a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044b8:	4b4c      	ldr	r3, [pc, #304]	; (80045ec <HAL_RCC_OscConfig+0x4d0>)
 80044ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d0ee      	beq.n	80044a2 <HAL_RCC_OscConfig+0x386>
 80044c4:	e014      	b.n	80044f0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c6:	f7fe f9d9 	bl	800287c <HAL_GetTick>
 80044ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044cc:	e00a      	b.n	80044e4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ce:	f7fe f9d5 	bl	800287c <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80044dc:	4293      	cmp	r3, r2
 80044de:	d901      	bls.n	80044e4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e0c2      	b.n	800466a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044e4:	4b41      	ldr	r3, [pc, #260]	; (80045ec <HAL_RCC_OscConfig+0x4d0>)
 80044e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1ee      	bne.n	80044ce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044f0:	7dfb      	ldrb	r3, [r7, #23]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d105      	bne.n	8004502 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044f6:	4b3d      	ldr	r3, [pc, #244]	; (80045ec <HAL_RCC_OscConfig+0x4d0>)
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	4a3c      	ldr	r2, [pc, #240]	; (80045ec <HAL_RCC_OscConfig+0x4d0>)
 80044fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004500:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	2b00      	cmp	r3, #0
 8004508:	f000 80ae 	beq.w	8004668 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800450c:	4b37      	ldr	r3, [pc, #220]	; (80045ec <HAL_RCC_OscConfig+0x4d0>)
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f003 030c 	and.w	r3, r3, #12
 8004514:	2b08      	cmp	r3, #8
 8004516:	d06d      	beq.n	80045f4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	2b02      	cmp	r3, #2
 800451e:	d14b      	bne.n	80045b8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004520:	4b32      	ldr	r3, [pc, #200]	; (80045ec <HAL_RCC_OscConfig+0x4d0>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a31      	ldr	r2, [pc, #196]	; (80045ec <HAL_RCC_OscConfig+0x4d0>)
 8004526:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800452a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452c:	f7fe f9a6 	bl	800287c <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004534:	f7fe f9a2 	bl	800287c <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e091      	b.n	800466a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004546:	4b29      	ldr	r3, [pc, #164]	; (80045ec <HAL_RCC_OscConfig+0x4d0>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1f0      	bne.n	8004534 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	69da      	ldr	r2, [r3, #28]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	431a      	orrs	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	019b      	lsls	r3, r3, #6
 8004562:	431a      	orrs	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004568:	085b      	lsrs	r3, r3, #1
 800456a:	3b01      	subs	r3, #1
 800456c:	041b      	lsls	r3, r3, #16
 800456e:	431a      	orrs	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004574:	061b      	lsls	r3, r3, #24
 8004576:	431a      	orrs	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457c:	071b      	lsls	r3, r3, #28
 800457e:	491b      	ldr	r1, [pc, #108]	; (80045ec <HAL_RCC_OscConfig+0x4d0>)
 8004580:	4313      	orrs	r3, r2
 8004582:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004584:	4b19      	ldr	r3, [pc, #100]	; (80045ec <HAL_RCC_OscConfig+0x4d0>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a18      	ldr	r2, [pc, #96]	; (80045ec <HAL_RCC_OscConfig+0x4d0>)
 800458a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800458e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004590:	f7fe f974 	bl	800287c <HAL_GetTick>
 8004594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004596:	e008      	b.n	80045aa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004598:	f7fe f970 	bl	800287c <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e05f      	b.n	800466a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045aa:	4b10      	ldr	r3, [pc, #64]	; (80045ec <HAL_RCC_OscConfig+0x4d0>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d0f0      	beq.n	8004598 <HAL_RCC_OscConfig+0x47c>
 80045b6:	e057      	b.n	8004668 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045b8:	4b0c      	ldr	r3, [pc, #48]	; (80045ec <HAL_RCC_OscConfig+0x4d0>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a0b      	ldr	r2, [pc, #44]	; (80045ec <HAL_RCC_OscConfig+0x4d0>)
 80045be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c4:	f7fe f95a 	bl	800287c <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045cc:	f7fe f956 	bl	800287c <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e045      	b.n	800466a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045de:	4b03      	ldr	r3, [pc, #12]	; (80045ec <HAL_RCC_OscConfig+0x4d0>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1f0      	bne.n	80045cc <HAL_RCC_OscConfig+0x4b0>
 80045ea:	e03d      	b.n	8004668 <HAL_RCC_OscConfig+0x54c>
 80045ec:	40023800 	.word	0x40023800
 80045f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80045f4:	4b1f      	ldr	r3, [pc, #124]	; (8004674 <HAL_RCC_OscConfig+0x558>)
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d030      	beq.n	8004664 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800460c:	429a      	cmp	r2, r3
 800460e:	d129      	bne.n	8004664 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800461a:	429a      	cmp	r2, r3
 800461c:	d122      	bne.n	8004664 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004624:	4013      	ands	r3, r2
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800462a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800462c:	4293      	cmp	r3, r2
 800462e:	d119      	bne.n	8004664 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463a:	085b      	lsrs	r3, r3, #1
 800463c:	3b01      	subs	r3, #1
 800463e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004640:	429a      	cmp	r2, r3
 8004642:	d10f      	bne.n	8004664 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004650:	429a      	cmp	r2, r3
 8004652:	d107      	bne.n	8004664 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004660:	429a      	cmp	r2, r3
 8004662:	d001      	beq.n	8004668 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e000      	b.n	800466a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3718      	adds	r7, #24
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	40023800 	.word	0x40023800

08004678 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004682:	2300      	movs	r3, #0
 8004684:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d101      	bne.n	8004690 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e0d0      	b.n	8004832 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004690:	4b6a      	ldr	r3, [pc, #424]	; (800483c <HAL_RCC_ClockConfig+0x1c4>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 030f 	and.w	r3, r3, #15
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	429a      	cmp	r2, r3
 800469c:	d910      	bls.n	80046c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800469e:	4b67      	ldr	r3, [pc, #412]	; (800483c <HAL_RCC_ClockConfig+0x1c4>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f023 020f 	bic.w	r2, r3, #15
 80046a6:	4965      	ldr	r1, [pc, #404]	; (800483c <HAL_RCC_ClockConfig+0x1c4>)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ae:	4b63      	ldr	r3, [pc, #396]	; (800483c <HAL_RCC_ClockConfig+0x1c4>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 030f 	and.w	r3, r3, #15
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d001      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e0b8      	b.n	8004832 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d020      	beq.n	800470e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0304 	and.w	r3, r3, #4
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d005      	beq.n	80046e4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046d8:	4b59      	ldr	r3, [pc, #356]	; (8004840 <HAL_RCC_ClockConfig+0x1c8>)
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	4a58      	ldr	r2, [pc, #352]	; (8004840 <HAL_RCC_ClockConfig+0x1c8>)
 80046de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80046e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0308 	and.w	r3, r3, #8
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d005      	beq.n	80046fc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046f0:	4b53      	ldr	r3, [pc, #332]	; (8004840 <HAL_RCC_ClockConfig+0x1c8>)
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	4a52      	ldr	r2, [pc, #328]	; (8004840 <HAL_RCC_ClockConfig+0x1c8>)
 80046f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80046fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046fc:	4b50      	ldr	r3, [pc, #320]	; (8004840 <HAL_RCC_ClockConfig+0x1c8>)
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	494d      	ldr	r1, [pc, #308]	; (8004840 <HAL_RCC_ClockConfig+0x1c8>)
 800470a:	4313      	orrs	r3, r2
 800470c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b00      	cmp	r3, #0
 8004718:	d040      	beq.n	800479c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d107      	bne.n	8004732 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004722:	4b47      	ldr	r3, [pc, #284]	; (8004840 <HAL_RCC_ClockConfig+0x1c8>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d115      	bne.n	800475a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e07f      	b.n	8004832 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	2b02      	cmp	r3, #2
 8004738:	d107      	bne.n	800474a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800473a:	4b41      	ldr	r3, [pc, #260]	; (8004840 <HAL_RCC_ClockConfig+0x1c8>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d109      	bne.n	800475a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e073      	b.n	8004832 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800474a:	4b3d      	ldr	r3, [pc, #244]	; (8004840 <HAL_RCC_ClockConfig+0x1c8>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e06b      	b.n	8004832 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800475a:	4b39      	ldr	r3, [pc, #228]	; (8004840 <HAL_RCC_ClockConfig+0x1c8>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f023 0203 	bic.w	r2, r3, #3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	4936      	ldr	r1, [pc, #216]	; (8004840 <HAL_RCC_ClockConfig+0x1c8>)
 8004768:	4313      	orrs	r3, r2
 800476a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800476c:	f7fe f886 	bl	800287c <HAL_GetTick>
 8004770:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004772:	e00a      	b.n	800478a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004774:	f7fe f882 	bl	800287c <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004782:	4293      	cmp	r3, r2
 8004784:	d901      	bls.n	800478a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e053      	b.n	8004832 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800478a:	4b2d      	ldr	r3, [pc, #180]	; (8004840 <HAL_RCC_ClockConfig+0x1c8>)
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f003 020c 	and.w	r2, r3, #12
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	429a      	cmp	r2, r3
 800479a:	d1eb      	bne.n	8004774 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800479c:	4b27      	ldr	r3, [pc, #156]	; (800483c <HAL_RCC_ClockConfig+0x1c4>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 030f 	and.w	r3, r3, #15
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d210      	bcs.n	80047cc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047aa:	4b24      	ldr	r3, [pc, #144]	; (800483c <HAL_RCC_ClockConfig+0x1c4>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f023 020f 	bic.w	r2, r3, #15
 80047b2:	4922      	ldr	r1, [pc, #136]	; (800483c <HAL_RCC_ClockConfig+0x1c4>)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ba:	4b20      	ldr	r3, [pc, #128]	; (800483c <HAL_RCC_ClockConfig+0x1c4>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 030f 	and.w	r3, r3, #15
 80047c2:	683a      	ldr	r2, [r7, #0]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d001      	beq.n	80047cc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e032      	b.n	8004832 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0304 	and.w	r3, r3, #4
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d008      	beq.n	80047ea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047d8:	4b19      	ldr	r3, [pc, #100]	; (8004840 <HAL_RCC_ClockConfig+0x1c8>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	4916      	ldr	r1, [pc, #88]	; (8004840 <HAL_RCC_ClockConfig+0x1c8>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0308 	and.w	r3, r3, #8
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d009      	beq.n	800480a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80047f6:	4b12      	ldr	r3, [pc, #72]	; (8004840 <HAL_RCC_ClockConfig+0x1c8>)
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	490e      	ldr	r1, [pc, #56]	; (8004840 <HAL_RCC_ClockConfig+0x1c8>)
 8004806:	4313      	orrs	r3, r2
 8004808:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800480a:	f000 f821 	bl	8004850 <HAL_RCC_GetSysClockFreq>
 800480e:	4602      	mov	r2, r0
 8004810:	4b0b      	ldr	r3, [pc, #44]	; (8004840 <HAL_RCC_ClockConfig+0x1c8>)
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	091b      	lsrs	r3, r3, #4
 8004816:	f003 030f 	and.w	r3, r3, #15
 800481a:	490a      	ldr	r1, [pc, #40]	; (8004844 <HAL_RCC_ClockConfig+0x1cc>)
 800481c:	5ccb      	ldrb	r3, [r1, r3]
 800481e:	fa22 f303 	lsr.w	r3, r2, r3
 8004822:	4a09      	ldr	r2, [pc, #36]	; (8004848 <HAL_RCC_ClockConfig+0x1d0>)
 8004824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004826:	4b09      	ldr	r3, [pc, #36]	; (800484c <HAL_RCC_ClockConfig+0x1d4>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4618      	mov	r0, r3
 800482c:	f7fd ffe2 	bl	80027f4 <HAL_InitTick>

  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	40023c00 	.word	0x40023c00
 8004840:	40023800 	.word	0x40023800
 8004844:	08008b20 	.word	0x08008b20
 8004848:	20000004 	.word	0x20000004
 800484c:	20000008 	.word	0x20000008

08004850 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004854:	b094      	sub	sp, #80	; 0x50
 8004856:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004858:	2300      	movs	r3, #0
 800485a:	647b      	str	r3, [r7, #68]	; 0x44
 800485c:	2300      	movs	r3, #0
 800485e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004860:	2300      	movs	r3, #0
 8004862:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004864:	2300      	movs	r3, #0
 8004866:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004868:	4b79      	ldr	r3, [pc, #484]	; (8004a50 <HAL_RCC_GetSysClockFreq+0x200>)
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f003 030c 	and.w	r3, r3, #12
 8004870:	2b08      	cmp	r3, #8
 8004872:	d00d      	beq.n	8004890 <HAL_RCC_GetSysClockFreq+0x40>
 8004874:	2b08      	cmp	r3, #8
 8004876:	f200 80e1 	bhi.w	8004a3c <HAL_RCC_GetSysClockFreq+0x1ec>
 800487a:	2b00      	cmp	r3, #0
 800487c:	d002      	beq.n	8004884 <HAL_RCC_GetSysClockFreq+0x34>
 800487e:	2b04      	cmp	r3, #4
 8004880:	d003      	beq.n	800488a <HAL_RCC_GetSysClockFreq+0x3a>
 8004882:	e0db      	b.n	8004a3c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004884:	4b73      	ldr	r3, [pc, #460]	; (8004a54 <HAL_RCC_GetSysClockFreq+0x204>)
 8004886:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004888:	e0db      	b.n	8004a42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800488a:	4b73      	ldr	r3, [pc, #460]	; (8004a58 <HAL_RCC_GetSysClockFreq+0x208>)
 800488c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800488e:	e0d8      	b.n	8004a42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004890:	4b6f      	ldr	r3, [pc, #444]	; (8004a50 <HAL_RCC_GetSysClockFreq+0x200>)
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004898:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800489a:	4b6d      	ldr	r3, [pc, #436]	; (8004a50 <HAL_RCC_GetSysClockFreq+0x200>)
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d063      	beq.n	800496e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048a6:	4b6a      	ldr	r3, [pc, #424]	; (8004a50 <HAL_RCC_GetSysClockFreq+0x200>)
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	099b      	lsrs	r3, r3, #6
 80048ac:	2200      	movs	r2, #0
 80048ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80048b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80048b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048b8:	633b      	str	r3, [r7, #48]	; 0x30
 80048ba:	2300      	movs	r3, #0
 80048bc:	637b      	str	r3, [r7, #52]	; 0x34
 80048be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80048c2:	4622      	mov	r2, r4
 80048c4:	462b      	mov	r3, r5
 80048c6:	f04f 0000 	mov.w	r0, #0
 80048ca:	f04f 0100 	mov.w	r1, #0
 80048ce:	0159      	lsls	r1, r3, #5
 80048d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048d4:	0150      	lsls	r0, r2, #5
 80048d6:	4602      	mov	r2, r0
 80048d8:	460b      	mov	r3, r1
 80048da:	4621      	mov	r1, r4
 80048dc:	1a51      	subs	r1, r2, r1
 80048de:	6139      	str	r1, [r7, #16]
 80048e0:	4629      	mov	r1, r5
 80048e2:	eb63 0301 	sbc.w	r3, r3, r1
 80048e6:	617b      	str	r3, [r7, #20]
 80048e8:	f04f 0200 	mov.w	r2, #0
 80048ec:	f04f 0300 	mov.w	r3, #0
 80048f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048f4:	4659      	mov	r1, fp
 80048f6:	018b      	lsls	r3, r1, #6
 80048f8:	4651      	mov	r1, sl
 80048fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048fe:	4651      	mov	r1, sl
 8004900:	018a      	lsls	r2, r1, #6
 8004902:	4651      	mov	r1, sl
 8004904:	ebb2 0801 	subs.w	r8, r2, r1
 8004908:	4659      	mov	r1, fp
 800490a:	eb63 0901 	sbc.w	r9, r3, r1
 800490e:	f04f 0200 	mov.w	r2, #0
 8004912:	f04f 0300 	mov.w	r3, #0
 8004916:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800491a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800491e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004922:	4690      	mov	r8, r2
 8004924:	4699      	mov	r9, r3
 8004926:	4623      	mov	r3, r4
 8004928:	eb18 0303 	adds.w	r3, r8, r3
 800492c:	60bb      	str	r3, [r7, #8]
 800492e:	462b      	mov	r3, r5
 8004930:	eb49 0303 	adc.w	r3, r9, r3
 8004934:	60fb      	str	r3, [r7, #12]
 8004936:	f04f 0200 	mov.w	r2, #0
 800493a:	f04f 0300 	mov.w	r3, #0
 800493e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004942:	4629      	mov	r1, r5
 8004944:	024b      	lsls	r3, r1, #9
 8004946:	4621      	mov	r1, r4
 8004948:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800494c:	4621      	mov	r1, r4
 800494e:	024a      	lsls	r2, r1, #9
 8004950:	4610      	mov	r0, r2
 8004952:	4619      	mov	r1, r3
 8004954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004956:	2200      	movs	r2, #0
 8004958:	62bb      	str	r3, [r7, #40]	; 0x28
 800495a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800495c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004960:	f7fb fcc6 	bl	80002f0 <__aeabi_uldivmod>
 8004964:	4602      	mov	r2, r0
 8004966:	460b      	mov	r3, r1
 8004968:	4613      	mov	r3, r2
 800496a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800496c:	e058      	b.n	8004a20 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800496e:	4b38      	ldr	r3, [pc, #224]	; (8004a50 <HAL_RCC_GetSysClockFreq+0x200>)
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	099b      	lsrs	r3, r3, #6
 8004974:	2200      	movs	r2, #0
 8004976:	4618      	mov	r0, r3
 8004978:	4611      	mov	r1, r2
 800497a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800497e:	623b      	str	r3, [r7, #32]
 8004980:	2300      	movs	r3, #0
 8004982:	627b      	str	r3, [r7, #36]	; 0x24
 8004984:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004988:	4642      	mov	r2, r8
 800498a:	464b      	mov	r3, r9
 800498c:	f04f 0000 	mov.w	r0, #0
 8004990:	f04f 0100 	mov.w	r1, #0
 8004994:	0159      	lsls	r1, r3, #5
 8004996:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800499a:	0150      	lsls	r0, r2, #5
 800499c:	4602      	mov	r2, r0
 800499e:	460b      	mov	r3, r1
 80049a0:	4641      	mov	r1, r8
 80049a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80049a6:	4649      	mov	r1, r9
 80049a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80049ac:	f04f 0200 	mov.w	r2, #0
 80049b0:	f04f 0300 	mov.w	r3, #0
 80049b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80049b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80049bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80049c0:	ebb2 040a 	subs.w	r4, r2, sl
 80049c4:	eb63 050b 	sbc.w	r5, r3, fp
 80049c8:	f04f 0200 	mov.w	r2, #0
 80049cc:	f04f 0300 	mov.w	r3, #0
 80049d0:	00eb      	lsls	r3, r5, #3
 80049d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049d6:	00e2      	lsls	r2, r4, #3
 80049d8:	4614      	mov	r4, r2
 80049da:	461d      	mov	r5, r3
 80049dc:	4643      	mov	r3, r8
 80049de:	18e3      	adds	r3, r4, r3
 80049e0:	603b      	str	r3, [r7, #0]
 80049e2:	464b      	mov	r3, r9
 80049e4:	eb45 0303 	adc.w	r3, r5, r3
 80049e8:	607b      	str	r3, [r7, #4]
 80049ea:	f04f 0200 	mov.w	r2, #0
 80049ee:	f04f 0300 	mov.w	r3, #0
 80049f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049f6:	4629      	mov	r1, r5
 80049f8:	028b      	lsls	r3, r1, #10
 80049fa:	4621      	mov	r1, r4
 80049fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a00:	4621      	mov	r1, r4
 8004a02:	028a      	lsls	r2, r1, #10
 8004a04:	4610      	mov	r0, r2
 8004a06:	4619      	mov	r1, r3
 8004a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	61bb      	str	r3, [r7, #24]
 8004a0e:	61fa      	str	r2, [r7, #28]
 8004a10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a14:	f7fb fc6c 	bl	80002f0 <__aeabi_uldivmod>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004a20:	4b0b      	ldr	r3, [pc, #44]	; (8004a50 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	0c1b      	lsrs	r3, r3, #16
 8004a26:	f003 0303 	and.w	r3, r3, #3
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	005b      	lsls	r3, r3, #1
 8004a2e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004a30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a38:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a3a:	e002      	b.n	8004a42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a3c:	4b05      	ldr	r3, [pc, #20]	; (8004a54 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a3e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3750      	adds	r7, #80	; 0x50
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a4e:	bf00      	nop
 8004a50:	40023800 	.word	0x40023800
 8004a54:	00f42400 	.word	0x00f42400
 8004a58:	007a1200 	.word	0x007a1200

08004a5c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a60:	4b03      	ldr	r3, [pc, #12]	; (8004a70 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a62:	681b      	ldr	r3, [r3, #0]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	20000004 	.word	0x20000004

08004a74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a78:	f7ff fff0 	bl	8004a5c <HAL_RCC_GetHCLKFreq>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	4b05      	ldr	r3, [pc, #20]	; (8004a94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	0a9b      	lsrs	r3, r3, #10
 8004a84:	f003 0307 	and.w	r3, r3, #7
 8004a88:	4903      	ldr	r1, [pc, #12]	; (8004a98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a8a:	5ccb      	ldrb	r3, [r1, r3]
 8004a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	40023800 	.word	0x40023800
 8004a98:	08008b30 	.word	0x08008b30

08004a9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004aa0:	f7ff ffdc 	bl	8004a5c <HAL_RCC_GetHCLKFreq>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	4b05      	ldr	r3, [pc, #20]	; (8004abc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	0b5b      	lsrs	r3, r3, #13
 8004aac:	f003 0307 	and.w	r3, r3, #7
 8004ab0:	4903      	ldr	r1, [pc, #12]	; (8004ac0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ab2:	5ccb      	ldrb	r3, [r1, r3]
 8004ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	40023800 	.word	0x40023800
 8004ac0:	08008b30 	.word	0x08008b30

08004ac4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b088      	sub	sp, #32
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004acc:	2300      	movs	r3, #0
 8004ace:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004adc:	2300      	movs	r3, #0
 8004ade:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0301 	and.w	r3, r3, #1
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d012      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004aec:	4b69      	ldr	r3, [pc, #420]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	4a68      	ldr	r2, [pc, #416]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004af2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004af6:	6093      	str	r3, [r2, #8]
 8004af8:	4b66      	ldr	r3, [pc, #408]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004afa:	689a      	ldr	r2, [r3, #8]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b00:	4964      	ldr	r1, [pc, #400]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d017      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b1e:	4b5d      	ldr	r3, [pc, #372]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b2c:	4959      	ldr	r1, [pc, #356]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b3c:	d101      	bne.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d017      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b5a:	4b4e      	ldr	r3, [pc, #312]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b60:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b68:	494a      	ldr	r1, [pc, #296]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b78:	d101      	bne.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004b86:	2301      	movs	r3, #1
 8004b88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d001      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004b96:	2301      	movs	r3, #1
 8004b98:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0320 	and.w	r3, r3, #32
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	f000 808b 	beq.w	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ba8:	4b3a      	ldr	r3, [pc, #232]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bac:	4a39      	ldr	r2, [pc, #228]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bb2:	6413      	str	r3, [r2, #64]	; 0x40
 8004bb4:	4b37      	ldr	r3, [pc, #220]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bbc:	60bb      	str	r3, [r7, #8]
 8004bbe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004bc0:	4b35      	ldr	r3, [pc, #212]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a34      	ldr	r2, [pc, #208]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bcc:	f7fd fe56 	bl	800287c <HAL_GetTick>
 8004bd0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004bd2:	e008      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bd4:	f7fd fe52 	bl	800287c <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b64      	cmp	r3, #100	; 0x64
 8004be0:	d901      	bls.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e38f      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004be6:	4b2c      	ldr	r3, [pc, #176]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d0f0      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bf2:	4b28      	ldr	r3, [pc, #160]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bfa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d035      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d02e      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c10:	4b20      	ldr	r3, [pc, #128]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c18:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c1a:	4b1e      	ldr	r3, [pc, #120]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c1e:	4a1d      	ldr	r2, [pc, #116]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c24:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c26:	4b1b      	ldr	r3, [pc, #108]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2a:	4a1a      	ldr	r2, [pc, #104]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c30:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004c32:	4a18      	ldr	r2, [pc, #96]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c38:	4b16      	ldr	r3, [pc, #88]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3c:	f003 0301 	and.w	r3, r3, #1
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d114      	bne.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c44:	f7fd fe1a 	bl	800287c <HAL_GetTick>
 8004c48:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c4a:	e00a      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c4c:	f7fd fe16 	bl	800287c <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e351      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c62:	4b0c      	ldr	r3, [pc, #48]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d0ee      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c7a:	d111      	bne.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004c7c:	4b05      	ldr	r3, [pc, #20]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c88:	4b04      	ldr	r3, [pc, #16]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004c8a:	400b      	ands	r3, r1
 8004c8c:	4901      	ldr	r1, [pc, #4]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	608b      	str	r3, [r1, #8]
 8004c92:	e00b      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004c94:	40023800 	.word	0x40023800
 8004c98:	40007000 	.word	0x40007000
 8004c9c:	0ffffcff 	.word	0x0ffffcff
 8004ca0:	4bac      	ldr	r3, [pc, #688]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	4aab      	ldr	r2, [pc, #684]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ca6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004caa:	6093      	str	r3, [r2, #8]
 8004cac:	4ba9      	ldr	r3, [pc, #676]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cb8:	49a6      	ldr	r1, [pc, #664]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0310 	and.w	r3, r3, #16
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d010      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004cca:	4ba2      	ldr	r3, [pc, #648]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cd0:	4aa0      	ldr	r2, [pc, #640]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cd6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004cda:	4b9e      	ldr	r3, [pc, #632]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cdc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce4:	499b      	ldr	r1, [pc, #620]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00a      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cf8:	4b96      	ldr	r3, [pc, #600]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cfe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d06:	4993      	ldr	r1, [pc, #588]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00a      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d1a:	4b8e      	ldr	r3, [pc, #568]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d28:	498a      	ldr	r1, [pc, #552]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00a      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d3c:	4b85      	ldr	r3, [pc, #532]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d4a:	4982      	ldr	r1, [pc, #520]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00a      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d5e:	4b7d      	ldr	r3, [pc, #500]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d64:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d6c:	4979      	ldr	r1, [pc, #484]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00a      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d80:	4b74      	ldr	r3, [pc, #464]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d86:	f023 0203 	bic.w	r2, r3, #3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d8e:	4971      	ldr	r1, [pc, #452]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00a      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004da2:	4b6c      	ldr	r3, [pc, #432]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da8:	f023 020c 	bic.w	r2, r3, #12
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004db0:	4968      	ldr	r1, [pc, #416]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00a      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004dc4:	4b63      	ldr	r3, [pc, #396]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dd2:	4960      	ldr	r1, [pc, #384]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00a      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004de6:	4b5b      	ldr	r3, [pc, #364]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dec:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004df4:	4957      	ldr	r1, [pc, #348]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00a      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e08:	4b52      	ldr	r3, [pc, #328]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e16:	494f      	ldr	r1, [pc, #316]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00a      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004e2a:	4b4a      	ldr	r3, [pc, #296]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e30:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e38:	4946      	ldr	r1, [pc, #280]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00a      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004e4c:	4b41      	ldr	r3, [pc, #260]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e52:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e5a:	493e      	ldr	r1, [pc, #248]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00a      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004e6e:	4b39      	ldr	r3, [pc, #228]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e74:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e7c:	4935      	ldr	r1, [pc, #212]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00a      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e90:	4b30      	ldr	r3, [pc, #192]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e96:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e9e:	492d      	ldr	r1, [pc, #180]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d011      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004eb2:	4b28      	ldr	r3, [pc, #160]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ec0:	4924      	ldr	r1, [pc, #144]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ecc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ed0:	d101      	bne.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0308 	and.w	r3, r3, #8
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d001      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00a      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ef2:	4b18      	ldr	r3, [pc, #96]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f00:	4914      	ldr	r1, [pc, #80]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00b      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f14:	4b0f      	ldr	r3, [pc, #60]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f1a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f24:	490b      	ldr	r1, [pc, #44]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00f      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004f38:	4b06      	ldr	r3, [pc, #24]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f3e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f48:	4902      	ldr	r1, [pc, #8]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004f50:	e002      	b.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004f52:	bf00      	nop
 8004f54:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00b      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f64:	4b8a      	ldr	r3, [pc, #552]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f6a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f74:	4986      	ldr	r1, [pc, #536]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d00b      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004f88:	4b81      	ldr	r3, [pc, #516]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f8e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f98:	497d      	ldr	r1, [pc, #500]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d006      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	f000 80d6 	beq.w	8005160 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004fb4:	4b76      	ldr	r3, [pc, #472]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a75      	ldr	r2, [pc, #468]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004fbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fc0:	f7fd fc5c 	bl	800287c <HAL_GetTick>
 8004fc4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fc6:	e008      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004fc8:	f7fd fc58 	bl	800287c <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	2b64      	cmp	r3, #100	; 0x64
 8004fd4:	d901      	bls.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e195      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fda:	4b6d      	ldr	r3, [pc, #436]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1f0      	bne.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d021      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d11d      	bne.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004ffa:	4b65      	ldr	r3, [pc, #404]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005000:	0c1b      	lsrs	r3, r3, #16
 8005002:	f003 0303 	and.w	r3, r3, #3
 8005006:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005008:	4b61      	ldr	r3, [pc, #388]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800500a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800500e:	0e1b      	lsrs	r3, r3, #24
 8005010:	f003 030f 	and.w	r3, r3, #15
 8005014:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	019a      	lsls	r2, r3, #6
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	041b      	lsls	r3, r3, #16
 8005020:	431a      	orrs	r2, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	061b      	lsls	r3, r3, #24
 8005026:	431a      	orrs	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	071b      	lsls	r3, r3, #28
 800502e:	4958      	ldr	r1, [pc, #352]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005030:	4313      	orrs	r3, r2
 8005032:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d004      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005046:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800504a:	d00a      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005054:	2b00      	cmp	r3, #0
 8005056:	d02e      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005060:	d129      	bne.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005062:	4b4b      	ldr	r3, [pc, #300]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005064:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005068:	0c1b      	lsrs	r3, r3, #16
 800506a:	f003 0303 	and.w	r3, r3, #3
 800506e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005070:	4b47      	ldr	r3, [pc, #284]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005072:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005076:	0f1b      	lsrs	r3, r3, #28
 8005078:	f003 0307 	and.w	r3, r3, #7
 800507c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	019a      	lsls	r2, r3, #6
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	041b      	lsls	r3, r3, #16
 8005088:	431a      	orrs	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	061b      	lsls	r3, r3, #24
 8005090:	431a      	orrs	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	071b      	lsls	r3, r3, #28
 8005096:	493e      	ldr	r1, [pc, #248]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005098:	4313      	orrs	r3, r2
 800509a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800509e:	4b3c      	ldr	r3, [pc, #240]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050a4:	f023 021f 	bic.w	r2, r3, #31
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	3b01      	subs	r3, #1
 80050ae:	4938      	ldr	r1, [pc, #224]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d01d      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80050c2:	4b33      	ldr	r3, [pc, #204]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050c8:	0e1b      	lsrs	r3, r3, #24
 80050ca:	f003 030f 	and.w	r3, r3, #15
 80050ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80050d0:	4b2f      	ldr	r3, [pc, #188]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050d6:	0f1b      	lsrs	r3, r3, #28
 80050d8:	f003 0307 	and.w	r3, r3, #7
 80050dc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	019a      	lsls	r2, r3, #6
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	041b      	lsls	r3, r3, #16
 80050ea:	431a      	orrs	r2, r3
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	061b      	lsls	r3, r3, #24
 80050f0:	431a      	orrs	r2, r3
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	071b      	lsls	r3, r3, #28
 80050f6:	4926      	ldr	r1, [pc, #152]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d011      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	019a      	lsls	r2, r3, #6
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	041b      	lsls	r3, r3, #16
 8005116:	431a      	orrs	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	061b      	lsls	r3, r3, #24
 800511e:	431a      	orrs	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	071b      	lsls	r3, r3, #28
 8005126:	491a      	ldr	r1, [pc, #104]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005128:	4313      	orrs	r3, r2
 800512a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800512e:	4b18      	ldr	r3, [pc, #96]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a17      	ldr	r2, [pc, #92]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005134:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005138:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800513a:	f7fd fb9f 	bl	800287c <HAL_GetTick>
 800513e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005140:	e008      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005142:	f7fd fb9b 	bl	800287c <HAL_GetTick>
 8005146:	4602      	mov	r2, r0
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	2b64      	cmp	r3, #100	; 0x64
 800514e:	d901      	bls.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e0d8      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005154:	4b0e      	ldr	r3, [pc, #56]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d0f0      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	2b01      	cmp	r3, #1
 8005164:	f040 80ce 	bne.w	8005304 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005168:	4b09      	ldr	r3, [pc, #36]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a08      	ldr	r2, [pc, #32]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800516e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005172:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005174:	f7fd fb82 	bl	800287c <HAL_GetTick>
 8005178:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800517a:	e00b      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800517c:	f7fd fb7e 	bl	800287c <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	2b64      	cmp	r3, #100	; 0x64
 8005188:	d904      	bls.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e0bb      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800518e:	bf00      	nop
 8005190:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005194:	4b5e      	ldr	r3, [pc, #376]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800519c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051a0:	d0ec      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d003      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d009      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d02e      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d12a      	bne.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80051ca:	4b51      	ldr	r3, [pc, #324]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d0:	0c1b      	lsrs	r3, r3, #16
 80051d2:	f003 0303 	and.w	r3, r3, #3
 80051d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80051d8:	4b4d      	ldr	r3, [pc, #308]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051de:	0f1b      	lsrs	r3, r3, #28
 80051e0:	f003 0307 	and.w	r3, r3, #7
 80051e4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	019a      	lsls	r2, r3, #6
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	041b      	lsls	r3, r3, #16
 80051f0:	431a      	orrs	r2, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	061b      	lsls	r3, r3, #24
 80051f8:	431a      	orrs	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	071b      	lsls	r3, r3, #28
 80051fe:	4944      	ldr	r1, [pc, #272]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005200:	4313      	orrs	r3, r2
 8005202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005206:	4b42      	ldr	r3, [pc, #264]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005208:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800520c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005214:	3b01      	subs	r3, #1
 8005216:	021b      	lsls	r3, r3, #8
 8005218:	493d      	ldr	r1, [pc, #244]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800521a:	4313      	orrs	r3, r2
 800521c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d022      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005230:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005234:	d11d      	bne.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005236:	4b36      	ldr	r3, [pc, #216]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800523c:	0e1b      	lsrs	r3, r3, #24
 800523e:	f003 030f 	and.w	r3, r3, #15
 8005242:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005244:	4b32      	ldr	r3, [pc, #200]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800524a:	0f1b      	lsrs	r3, r3, #28
 800524c:	f003 0307 	and.w	r3, r3, #7
 8005250:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	019a      	lsls	r2, r3, #6
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a1b      	ldr	r3, [r3, #32]
 800525c:	041b      	lsls	r3, r3, #16
 800525e:	431a      	orrs	r2, r3
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	061b      	lsls	r3, r3, #24
 8005264:	431a      	orrs	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	071b      	lsls	r3, r3, #28
 800526a:	4929      	ldr	r1, [pc, #164]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800526c:	4313      	orrs	r3, r2
 800526e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0308 	and.w	r3, r3, #8
 800527a:	2b00      	cmp	r3, #0
 800527c:	d028      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800527e:	4b24      	ldr	r3, [pc, #144]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005284:	0e1b      	lsrs	r3, r3, #24
 8005286:	f003 030f 	and.w	r3, r3, #15
 800528a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800528c:	4b20      	ldr	r3, [pc, #128]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800528e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005292:	0c1b      	lsrs	r3, r3, #16
 8005294:	f003 0303 	and.w	r3, r3, #3
 8005298:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	019a      	lsls	r2, r3, #6
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	041b      	lsls	r3, r3, #16
 80052a4:	431a      	orrs	r2, r3
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	061b      	lsls	r3, r3, #24
 80052aa:	431a      	orrs	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	69db      	ldr	r3, [r3, #28]
 80052b0:	071b      	lsls	r3, r3, #28
 80052b2:	4917      	ldr	r1, [pc, #92]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80052ba:	4b15      	ldr	r3, [pc, #84]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c8:	4911      	ldr	r1, [pc, #68]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80052d0:	4b0f      	ldr	r3, [pc, #60]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a0e      	ldr	r2, [pc, #56]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052dc:	f7fd face 	bl	800287c <HAL_GetTick>
 80052e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052e2:	e008      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80052e4:	f7fd faca 	bl	800287c <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	2b64      	cmp	r3, #100	; 0x64
 80052f0:	d901      	bls.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e007      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052f6:	4b06      	ldr	r3, [pc, #24]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005302:	d1ef      	bne.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3720      	adds	r7, #32
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	40023800 	.word	0x40023800

08005314 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e09d      	b.n	8005462 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532a:	2b00      	cmp	r3, #0
 800532c:	d108      	bne.n	8005340 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005336:	d009      	beq.n	800534c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	61da      	str	r2, [r3, #28]
 800533e:	e005      	b.n	800534c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d106      	bne.n	800536c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f7fc fc2c 	bl	8001bc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005382:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800538c:	d902      	bls.n	8005394 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800538e:	2300      	movs	r3, #0
 8005390:	60fb      	str	r3, [r7, #12]
 8005392:	e002      	b.n	800539a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005394:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005398:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80053a2:	d007      	beq.n	80053b4 <HAL_SPI_Init+0xa0>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053ac:	d002      	beq.n	80053b4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80053c4:	431a      	orrs	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	f003 0302 	and.w	r3, r3, #2
 80053ce:	431a      	orrs	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	695b      	ldr	r3, [r3, #20]
 80053d4:	f003 0301 	and.w	r3, r3, #1
 80053d8:	431a      	orrs	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053e2:	431a      	orrs	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	69db      	ldr	r3, [r3, #28]
 80053e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053ec:	431a      	orrs	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f6:	ea42 0103 	orr.w	r1, r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053fe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	430a      	orrs	r2, r1
 8005408:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	0c1b      	lsrs	r3, r3, #16
 8005410:	f003 0204 	and.w	r2, r3, #4
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005418:	f003 0310 	and.w	r3, r3, #16
 800541c:	431a      	orrs	r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005422:	f003 0308 	and.w	r3, r3, #8
 8005426:	431a      	orrs	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005430:	ea42 0103 	orr.w	r1, r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	430a      	orrs	r2, r1
 8005440:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	69da      	ldr	r2, [r3, #28]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005450:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b082      	sub	sp, #8
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e049      	b.n	8005510 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005482:	b2db      	uxtb	r3, r3
 8005484:	2b00      	cmp	r3, #0
 8005486:	d106      	bne.n	8005496 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f7fc fc17 	bl	8001cc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2202      	movs	r2, #2
 800549a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	3304      	adds	r3, #4
 80054a6:	4619      	mov	r1, r3
 80054a8:	4610      	mov	r0, r2
 80054aa:	f000 fdd7 	bl	800605c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2201      	movs	r2, #1
 8005502:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005518:	b480      	push	{r7}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005526:	b2db      	uxtb	r3, r3
 8005528:	2b01      	cmp	r3, #1
 800552a:	d001      	beq.n	8005530 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e054      	b.n	80055da <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2202      	movs	r2, #2
 8005534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68da      	ldr	r2, [r3, #12]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f042 0201 	orr.w	r2, r2, #1
 8005546:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a26      	ldr	r2, [pc, #152]	; (80055e8 <HAL_TIM_Base_Start_IT+0xd0>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d022      	beq.n	8005598 <HAL_TIM_Base_Start_IT+0x80>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800555a:	d01d      	beq.n	8005598 <HAL_TIM_Base_Start_IT+0x80>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a22      	ldr	r2, [pc, #136]	; (80055ec <HAL_TIM_Base_Start_IT+0xd4>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d018      	beq.n	8005598 <HAL_TIM_Base_Start_IT+0x80>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a21      	ldr	r2, [pc, #132]	; (80055f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d013      	beq.n	8005598 <HAL_TIM_Base_Start_IT+0x80>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a1f      	ldr	r2, [pc, #124]	; (80055f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d00e      	beq.n	8005598 <HAL_TIM_Base_Start_IT+0x80>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a1e      	ldr	r2, [pc, #120]	; (80055f8 <HAL_TIM_Base_Start_IT+0xe0>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d009      	beq.n	8005598 <HAL_TIM_Base_Start_IT+0x80>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a1c      	ldr	r2, [pc, #112]	; (80055fc <HAL_TIM_Base_Start_IT+0xe4>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d004      	beq.n	8005598 <HAL_TIM_Base_Start_IT+0x80>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a1b      	ldr	r2, [pc, #108]	; (8005600 <HAL_TIM_Base_Start_IT+0xe8>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d115      	bne.n	80055c4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	689a      	ldr	r2, [r3, #8]
 800559e:	4b19      	ldr	r3, [pc, #100]	; (8005604 <HAL_TIM_Base_Start_IT+0xec>)
 80055a0:	4013      	ands	r3, r2
 80055a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2b06      	cmp	r3, #6
 80055a8:	d015      	beq.n	80055d6 <HAL_TIM_Base_Start_IT+0xbe>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055b0:	d011      	beq.n	80055d6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f042 0201 	orr.w	r2, r2, #1
 80055c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055c2:	e008      	b.n	80055d6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f042 0201 	orr.w	r2, r2, #1
 80055d2:	601a      	str	r2, [r3, #0]
 80055d4:	e000      	b.n	80055d8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	40010000 	.word	0x40010000
 80055ec:	40000400 	.word	0x40000400
 80055f0:	40000800 	.word	0x40000800
 80055f4:	40000c00 	.word	0x40000c00
 80055f8:	40010400 	.word	0x40010400
 80055fc:	40014000 	.word	0x40014000
 8005600:	40001800 	.word	0x40001800
 8005604:	00010007 	.word	0x00010007

08005608 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e049      	b.n	80056ae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b00      	cmp	r3, #0
 8005624:	d106      	bne.n	8005634 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 f841 	bl	80056b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2202      	movs	r2, #2
 8005638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	3304      	adds	r3, #4
 8005644:	4619      	mov	r1, r3
 8005646:	4610      	mov	r0, r2
 8005648:	f000 fd08 	bl	800605c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3708      	adds	r7, #8
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b083      	sub	sp, #12
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80056be:	bf00      	nop
 80056c0:	370c      	adds	r7, #12
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b082      	sub	sp, #8
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d101      	bne.n	80056dc <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e049      	b.n	8005770 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d106      	bne.n	80056f6 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 f841 	bl	8005778 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2202      	movs	r2, #2
 80056fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	3304      	adds	r3, #4
 8005706:	4619      	mov	r1, r3
 8005708:	4610      	mov	r0, r2
 800570a:	f000 fca7 	bl	800605c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2201      	movs	r2, #1
 800571a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2201      	movs	r2, #1
 800572a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2201      	movs	r2, #1
 8005732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2201      	movs	r2, #1
 800573a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2201      	movs	r2, #1
 8005742:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2201      	movs	r2, #1
 8005752:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2201      	movs	r2, #1
 800576a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3708      	adds	r7, #8
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005780:	bf00      	nop
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b086      	sub	sp, #24
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d101      	bne.n	80057a0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e08f      	b.n	80058c0 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d106      	bne.n	80057ba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f7fc fb43 	bl	8001e40 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2202      	movs	r2, #2
 80057be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	6899      	ldr	r1, [r3, #8]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	4b3e      	ldr	r3, [pc, #248]	; (80058c8 <HAL_TIM_Encoder_Init+0x13c>)
 80057ce:	400b      	ands	r3, r1
 80057d0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	3304      	adds	r3, #4
 80057da:	4619      	mov	r1, r3
 80057dc:	4610      	mov	r0, r2
 80057de:	f000 fc3d 	bl	800605c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	6a1b      	ldr	r3, [r3, #32]
 80057f8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	4313      	orrs	r3, r2
 8005802:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	4b31      	ldr	r3, [pc, #196]	; (80058cc <HAL_TIM_Encoder_Init+0x140>)
 8005808:	4013      	ands	r3, r2
 800580a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	689a      	ldr	r2, [r3, #8]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	021b      	lsls	r3, r3, #8
 8005816:	4313      	orrs	r3, r2
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	4313      	orrs	r3, r2
 800581c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800581e:	693a      	ldr	r2, [r7, #16]
 8005820:	4b2b      	ldr	r3, [pc, #172]	; (80058d0 <HAL_TIM_Encoder_Init+0x144>)
 8005822:	4013      	ands	r3, r2
 8005824:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	4b2a      	ldr	r3, [pc, #168]	; (80058d4 <HAL_TIM_Encoder_Init+0x148>)
 800582a:	4013      	ands	r3, r2
 800582c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	68da      	ldr	r2, [r3, #12]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	69db      	ldr	r3, [r3, #28]
 8005836:	021b      	lsls	r3, r3, #8
 8005838:	4313      	orrs	r3, r2
 800583a:	693a      	ldr	r2, [r7, #16]
 800583c:	4313      	orrs	r3, r2
 800583e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	011a      	lsls	r2, r3, #4
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	6a1b      	ldr	r3, [r3, #32]
 800584a:	031b      	lsls	r3, r3, #12
 800584c:	4313      	orrs	r3, r2
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	4313      	orrs	r3, r2
 8005852:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800585a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005862:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	011b      	lsls	r3, r3, #4
 800586e:	4313      	orrs	r3, r2
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	4313      	orrs	r3, r2
 8005874:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2201      	movs	r2, #1
 8005892:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3718      	adds	r7, #24
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	fffebff8 	.word	0xfffebff8
 80058cc:	fffffcfc 	.word	0xfffffcfc
 80058d0:	fffff3f3 	.word	0xfffff3f3
 80058d4:	ffff0f0f 	.word	0xffff0f0f

080058d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	f003 0302 	and.w	r3, r3, #2
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d122      	bne.n	8005934 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f003 0302 	and.w	r3, r3, #2
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d11b      	bne.n	8005934 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f06f 0202 	mvn.w	r2, #2
 8005904:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2201      	movs	r2, #1
 800590a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	f003 0303 	and.w	r3, r3, #3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d003      	beq.n	8005922 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 fb80 	bl	8006020 <HAL_TIM_IC_CaptureCallback>
 8005920:	e005      	b.n	800592e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 fb72 	bl	800600c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 fb83 	bl	8006034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	f003 0304 	and.w	r3, r3, #4
 800593e:	2b04      	cmp	r3, #4
 8005940:	d122      	bne.n	8005988 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	f003 0304 	and.w	r3, r3, #4
 800594c:	2b04      	cmp	r3, #4
 800594e:	d11b      	bne.n	8005988 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f06f 0204 	mvn.w	r2, #4
 8005958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2202      	movs	r2, #2
 800595e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800596a:	2b00      	cmp	r3, #0
 800596c:	d003      	beq.n	8005976 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 fb56 	bl	8006020 <HAL_TIM_IC_CaptureCallback>
 8005974:	e005      	b.n	8005982 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 fb48 	bl	800600c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 fb59 	bl	8006034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	f003 0308 	and.w	r3, r3, #8
 8005992:	2b08      	cmp	r3, #8
 8005994:	d122      	bne.n	80059dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	f003 0308 	and.w	r3, r3, #8
 80059a0:	2b08      	cmp	r3, #8
 80059a2:	d11b      	bne.n	80059dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f06f 0208 	mvn.w	r2, #8
 80059ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2204      	movs	r2, #4
 80059b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	69db      	ldr	r3, [r3, #28]
 80059ba:	f003 0303 	and.w	r3, r3, #3
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d003      	beq.n	80059ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 fb2c 	bl	8006020 <HAL_TIM_IC_CaptureCallback>
 80059c8:	e005      	b.n	80059d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 fb1e 	bl	800600c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 fb2f 	bl	8006034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	f003 0310 	and.w	r3, r3, #16
 80059e6:	2b10      	cmp	r3, #16
 80059e8:	d122      	bne.n	8005a30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	f003 0310 	and.w	r3, r3, #16
 80059f4:	2b10      	cmp	r3, #16
 80059f6:	d11b      	bne.n	8005a30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f06f 0210 	mvn.w	r2, #16
 8005a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2208      	movs	r2, #8
 8005a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d003      	beq.n	8005a1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 fb02 	bl	8006020 <HAL_TIM_IC_CaptureCallback>
 8005a1c:	e005      	b.n	8005a2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 faf4 	bl	800600c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 fb05 	bl	8006034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d10e      	bne.n	8005a5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	f003 0301 	and.w	r3, r3, #1
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d107      	bne.n	8005a5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f06f 0201 	mvn.w	r2, #1
 8005a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f7fb ff54 	bl	8001904 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a66:	2b80      	cmp	r3, #128	; 0x80
 8005a68:	d10e      	bne.n	8005a88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a74:	2b80      	cmp	r3, #128	; 0x80
 8005a76:	d107      	bne.n	8005a88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f001 f8c2 	bl	8006c0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a96:	d10e      	bne.n	8005ab6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aa2:	2b80      	cmp	r3, #128	; 0x80
 8005aa4:	d107      	bne.n	8005ab6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005aae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f001 f8b5 	bl	8006c20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac0:	2b40      	cmp	r3, #64	; 0x40
 8005ac2:	d10e      	bne.n	8005ae2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ace:	2b40      	cmp	r3, #64	; 0x40
 8005ad0:	d107      	bne.n	8005ae2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ada:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 fab3 	bl	8006048 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	f003 0320 	and.w	r3, r3, #32
 8005aec:	2b20      	cmp	r3, #32
 8005aee:	d10e      	bne.n	8005b0e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	f003 0320 	and.w	r3, r3, #32
 8005afa:	2b20      	cmp	r3, #32
 8005afc:	d107      	bne.n	8005b0e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f06f 0220 	mvn.w	r2, #32
 8005b06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f001 f875 	bl	8006bf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b0e:	bf00      	nop
 8005b10:	3708      	adds	r7, #8
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b086      	sub	sp, #24
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	60f8      	str	r0, [r7, #12]
 8005b1e:	60b9      	str	r1, [r7, #8]
 8005b20:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b22:	2300      	movs	r3, #0
 8005b24:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d101      	bne.n	8005b34 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005b30:	2302      	movs	r3, #2
 8005b32:	e088      	b.n	8005c46 <HAL_TIM_IC_ConfigChannel+0x130>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d11b      	bne.n	8005b7a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005b52:	f000 fd81 	bl	8006658 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	699a      	ldr	r2, [r3, #24]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f022 020c 	bic.w	r2, r2, #12
 8005b64:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	6999      	ldr	r1, [r3, #24]
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	689a      	ldr	r2, [r3, #8]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	430a      	orrs	r2, r1
 8005b76:	619a      	str	r2, [r3, #24]
 8005b78:	e060      	b.n	8005c3c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2b04      	cmp	r3, #4
 8005b7e:	d11c      	bne.n	8005bba <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005b90:	f000 fe05 	bl	800679e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	699a      	ldr	r2, [r3, #24]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005ba2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6999      	ldr	r1, [r3, #24]
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	021a      	lsls	r2, r3, #8
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	619a      	str	r2, [r3, #24]
 8005bb8:	e040      	b.n	8005c3c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2b08      	cmp	r3, #8
 8005bbe:	d11b      	bne.n	8005bf8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005bd0:	f000 fe52 	bl	8006878 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	69da      	ldr	r2, [r3, #28]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f022 020c 	bic.w	r2, r2, #12
 8005be2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	69d9      	ldr	r1, [r3, #28]
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	689a      	ldr	r2, [r3, #8]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	430a      	orrs	r2, r1
 8005bf4:	61da      	str	r2, [r3, #28]
 8005bf6:	e021      	b.n	8005c3c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2b0c      	cmp	r3, #12
 8005bfc:	d11c      	bne.n	8005c38 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005c0e:	f000 fe6f 	bl	80068f0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	69da      	ldr	r2, [r3, #28]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005c20:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	69d9      	ldr	r1, [r3, #28]
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	021a      	lsls	r2, r3, #8
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	430a      	orrs	r2, r1
 8005c34:	61da      	str	r2, [r3, #28]
 8005c36:	e001      	b.n	8005c3c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c44:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3718      	adds	r7, #24
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
	...

08005c50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b086      	sub	sp, #24
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d101      	bne.n	8005c6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c6a:	2302      	movs	r3, #2
 8005c6c:	e0ff      	b.n	8005e6e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2201      	movs	r2, #1
 8005c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2b14      	cmp	r3, #20
 8005c7a:	f200 80f0 	bhi.w	8005e5e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005c7e:	a201      	add	r2, pc, #4	; (adr r2, 8005c84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c84:	08005cd9 	.word	0x08005cd9
 8005c88:	08005e5f 	.word	0x08005e5f
 8005c8c:	08005e5f 	.word	0x08005e5f
 8005c90:	08005e5f 	.word	0x08005e5f
 8005c94:	08005d19 	.word	0x08005d19
 8005c98:	08005e5f 	.word	0x08005e5f
 8005c9c:	08005e5f 	.word	0x08005e5f
 8005ca0:	08005e5f 	.word	0x08005e5f
 8005ca4:	08005d5b 	.word	0x08005d5b
 8005ca8:	08005e5f 	.word	0x08005e5f
 8005cac:	08005e5f 	.word	0x08005e5f
 8005cb0:	08005e5f 	.word	0x08005e5f
 8005cb4:	08005d9b 	.word	0x08005d9b
 8005cb8:	08005e5f 	.word	0x08005e5f
 8005cbc:	08005e5f 	.word	0x08005e5f
 8005cc0:	08005e5f 	.word	0x08005e5f
 8005cc4:	08005ddd 	.word	0x08005ddd
 8005cc8:	08005e5f 	.word	0x08005e5f
 8005ccc:	08005e5f 	.word	0x08005e5f
 8005cd0:	08005e5f 	.word	0x08005e5f
 8005cd4:	08005e1d 	.word	0x08005e1d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68b9      	ldr	r1, [r7, #8]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 fa5c 	bl	800619c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	699a      	ldr	r2, [r3, #24]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f042 0208 	orr.w	r2, r2, #8
 8005cf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	699a      	ldr	r2, [r3, #24]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f022 0204 	bic.w	r2, r2, #4
 8005d02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6999      	ldr	r1, [r3, #24]
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	691a      	ldr	r2, [r3, #16]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	430a      	orrs	r2, r1
 8005d14:	619a      	str	r2, [r3, #24]
      break;
 8005d16:	e0a5      	b.n	8005e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68b9      	ldr	r1, [r7, #8]
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f000 faae 	bl	8006280 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	699a      	ldr	r2, [r3, #24]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	699a      	ldr	r2, [r3, #24]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	6999      	ldr	r1, [r3, #24]
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	021a      	lsls	r2, r3, #8
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	430a      	orrs	r2, r1
 8005d56:	619a      	str	r2, [r3, #24]
      break;
 8005d58:	e084      	b.n	8005e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68b9      	ldr	r1, [r7, #8]
 8005d60:	4618      	mov	r0, r3
 8005d62:	f000 fb05 	bl	8006370 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	69da      	ldr	r2, [r3, #28]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f042 0208 	orr.w	r2, r2, #8
 8005d74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	69da      	ldr	r2, [r3, #28]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f022 0204 	bic.w	r2, r2, #4
 8005d84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	69d9      	ldr	r1, [r3, #28]
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	691a      	ldr	r2, [r3, #16]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	430a      	orrs	r2, r1
 8005d96:	61da      	str	r2, [r3, #28]
      break;
 8005d98:	e064      	b.n	8005e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68b9      	ldr	r1, [r7, #8]
 8005da0:	4618      	mov	r0, r3
 8005da2:	f000 fb5b 	bl	800645c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	69da      	ldr	r2, [r3, #28]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005db4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	69da      	ldr	r2, [r3, #28]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	69d9      	ldr	r1, [r3, #28]
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	021a      	lsls	r2, r3, #8
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	430a      	orrs	r2, r1
 8005dd8:	61da      	str	r2, [r3, #28]
      break;
 8005dda:	e043      	b.n	8005e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68b9      	ldr	r1, [r7, #8]
 8005de2:	4618      	mov	r0, r3
 8005de4:	f000 fb92 	bl	800650c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f042 0208 	orr.w	r2, r2, #8
 8005df6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f022 0204 	bic.w	r2, r2, #4
 8005e06:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	691a      	ldr	r2, [r3, #16]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	430a      	orrs	r2, r1
 8005e18:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005e1a:	e023      	b.n	8005e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68b9      	ldr	r1, [r7, #8]
 8005e22:	4618      	mov	r0, r3
 8005e24:	f000 fbc4 	bl	80065b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e36:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e46:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	021a      	lsls	r2, r3, #8
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005e5c:	e002      	b.n	8005e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	75fb      	strb	r3, [r7, #23]
      break;
 8005e62:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3718      	adds	r7, #24
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop

08005e78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e82:	2300      	movs	r3, #0
 8005e84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d101      	bne.n	8005e94 <HAL_TIM_ConfigClockSource+0x1c>
 8005e90:	2302      	movs	r3, #2
 8005e92:	e0b4      	b.n	8005ffe <HAL_TIM_ConfigClockSource+0x186>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2202      	movs	r2, #2
 8005ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	4b56      	ldr	r3, [pc, #344]	; (8006008 <HAL_TIM_ConfigClockSource+0x190>)
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005eba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68ba      	ldr	r2, [r7, #8]
 8005ec2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ecc:	d03e      	beq.n	8005f4c <HAL_TIM_ConfigClockSource+0xd4>
 8005ece:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ed2:	f200 8087 	bhi.w	8005fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eda:	f000 8086 	beq.w	8005fea <HAL_TIM_ConfigClockSource+0x172>
 8005ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ee2:	d87f      	bhi.n	8005fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ee4:	2b70      	cmp	r3, #112	; 0x70
 8005ee6:	d01a      	beq.n	8005f1e <HAL_TIM_ConfigClockSource+0xa6>
 8005ee8:	2b70      	cmp	r3, #112	; 0x70
 8005eea:	d87b      	bhi.n	8005fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8005eec:	2b60      	cmp	r3, #96	; 0x60
 8005eee:	d050      	beq.n	8005f92 <HAL_TIM_ConfigClockSource+0x11a>
 8005ef0:	2b60      	cmp	r3, #96	; 0x60
 8005ef2:	d877      	bhi.n	8005fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ef4:	2b50      	cmp	r3, #80	; 0x50
 8005ef6:	d03c      	beq.n	8005f72 <HAL_TIM_ConfigClockSource+0xfa>
 8005ef8:	2b50      	cmp	r3, #80	; 0x50
 8005efa:	d873      	bhi.n	8005fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8005efc:	2b40      	cmp	r3, #64	; 0x40
 8005efe:	d058      	beq.n	8005fb2 <HAL_TIM_ConfigClockSource+0x13a>
 8005f00:	2b40      	cmp	r3, #64	; 0x40
 8005f02:	d86f      	bhi.n	8005fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8005f04:	2b30      	cmp	r3, #48	; 0x30
 8005f06:	d064      	beq.n	8005fd2 <HAL_TIM_ConfigClockSource+0x15a>
 8005f08:	2b30      	cmp	r3, #48	; 0x30
 8005f0a:	d86b      	bhi.n	8005fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8005f0c:	2b20      	cmp	r3, #32
 8005f0e:	d060      	beq.n	8005fd2 <HAL_TIM_ConfigClockSource+0x15a>
 8005f10:	2b20      	cmp	r3, #32
 8005f12:	d867      	bhi.n	8005fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d05c      	beq.n	8005fd2 <HAL_TIM_ConfigClockSource+0x15a>
 8005f18:	2b10      	cmp	r3, #16
 8005f1a:	d05a      	beq.n	8005fd2 <HAL_TIM_ConfigClockSource+0x15a>
 8005f1c:	e062      	b.n	8005fe4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f2e:	f000 fd37 	bl	80069a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	609a      	str	r2, [r3, #8]
      break;
 8005f4a:	e04f      	b.n	8005fec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f5c:	f000 fd20 	bl	80069a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	689a      	ldr	r2, [r3, #8]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f6e:	609a      	str	r2, [r3, #8]
      break;
 8005f70:	e03c      	b.n	8005fec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f7e:	461a      	mov	r2, r3
 8005f80:	f000 fbde 	bl	8006740 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2150      	movs	r1, #80	; 0x50
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f000 fced 	bl	800696a <TIM_ITRx_SetConfig>
      break;
 8005f90:	e02c      	b.n	8005fec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	f000 fc3a 	bl	8006818 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2160      	movs	r1, #96	; 0x60
 8005faa:	4618      	mov	r0, r3
 8005fac:	f000 fcdd 	bl	800696a <TIM_ITRx_SetConfig>
      break;
 8005fb0:	e01c      	b.n	8005fec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	f000 fbbe 	bl	8006740 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2140      	movs	r1, #64	; 0x40
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f000 fccd 	bl	800696a <TIM_ITRx_SetConfig>
      break;
 8005fd0:	e00c      	b.n	8005fec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4619      	mov	r1, r3
 8005fdc:	4610      	mov	r0, r2
 8005fde:	f000 fcc4 	bl	800696a <TIM_ITRx_SetConfig>
      break;
 8005fe2:	e003      	b.n	8005fec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	73fb      	strb	r3, [r7, #15]
      break;
 8005fe8:	e000      	b.n	8005fec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005fea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3710      	adds	r7, #16
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	fffeff88 	.word	0xfffeff88

0800600c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006014:	bf00      	nop
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800603c:	bf00      	nop
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800605c:	b480      	push	{r7}
 800605e:	b085      	sub	sp, #20
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a40      	ldr	r2, [pc, #256]	; (8006170 <TIM_Base_SetConfig+0x114>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d013      	beq.n	800609c <TIM_Base_SetConfig+0x40>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800607a:	d00f      	beq.n	800609c <TIM_Base_SetConfig+0x40>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a3d      	ldr	r2, [pc, #244]	; (8006174 <TIM_Base_SetConfig+0x118>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d00b      	beq.n	800609c <TIM_Base_SetConfig+0x40>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a3c      	ldr	r2, [pc, #240]	; (8006178 <TIM_Base_SetConfig+0x11c>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d007      	beq.n	800609c <TIM_Base_SetConfig+0x40>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a3b      	ldr	r2, [pc, #236]	; (800617c <TIM_Base_SetConfig+0x120>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d003      	beq.n	800609c <TIM_Base_SetConfig+0x40>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a3a      	ldr	r2, [pc, #232]	; (8006180 <TIM_Base_SetConfig+0x124>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d108      	bne.n	80060ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a2f      	ldr	r2, [pc, #188]	; (8006170 <TIM_Base_SetConfig+0x114>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d02b      	beq.n	800610e <TIM_Base_SetConfig+0xb2>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060bc:	d027      	beq.n	800610e <TIM_Base_SetConfig+0xb2>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a2c      	ldr	r2, [pc, #176]	; (8006174 <TIM_Base_SetConfig+0x118>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d023      	beq.n	800610e <TIM_Base_SetConfig+0xb2>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a2b      	ldr	r2, [pc, #172]	; (8006178 <TIM_Base_SetConfig+0x11c>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d01f      	beq.n	800610e <TIM_Base_SetConfig+0xb2>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a2a      	ldr	r2, [pc, #168]	; (800617c <TIM_Base_SetConfig+0x120>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d01b      	beq.n	800610e <TIM_Base_SetConfig+0xb2>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a29      	ldr	r2, [pc, #164]	; (8006180 <TIM_Base_SetConfig+0x124>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d017      	beq.n	800610e <TIM_Base_SetConfig+0xb2>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a28      	ldr	r2, [pc, #160]	; (8006184 <TIM_Base_SetConfig+0x128>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d013      	beq.n	800610e <TIM_Base_SetConfig+0xb2>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a27      	ldr	r2, [pc, #156]	; (8006188 <TIM_Base_SetConfig+0x12c>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d00f      	beq.n	800610e <TIM_Base_SetConfig+0xb2>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a26      	ldr	r2, [pc, #152]	; (800618c <TIM_Base_SetConfig+0x130>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d00b      	beq.n	800610e <TIM_Base_SetConfig+0xb2>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a25      	ldr	r2, [pc, #148]	; (8006190 <TIM_Base_SetConfig+0x134>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d007      	beq.n	800610e <TIM_Base_SetConfig+0xb2>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a24      	ldr	r2, [pc, #144]	; (8006194 <TIM_Base_SetConfig+0x138>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d003      	beq.n	800610e <TIM_Base_SetConfig+0xb2>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a23      	ldr	r2, [pc, #140]	; (8006198 <TIM_Base_SetConfig+0x13c>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d108      	bne.n	8006120 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006114:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	4313      	orrs	r3, r2
 800611e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	4313      	orrs	r3, r2
 800612c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	689a      	ldr	r2, [r3, #8]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a0a      	ldr	r2, [pc, #40]	; (8006170 <TIM_Base_SetConfig+0x114>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d003      	beq.n	8006154 <TIM_Base_SetConfig+0xf8>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a0c      	ldr	r2, [pc, #48]	; (8006180 <TIM_Base_SetConfig+0x124>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d103      	bne.n	800615c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	691a      	ldr	r2, [r3, #16]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	615a      	str	r2, [r3, #20]
}
 8006162:	bf00      	nop
 8006164:	3714      	adds	r7, #20
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	40010000 	.word	0x40010000
 8006174:	40000400 	.word	0x40000400
 8006178:	40000800 	.word	0x40000800
 800617c:	40000c00 	.word	0x40000c00
 8006180:	40010400 	.word	0x40010400
 8006184:	40014000 	.word	0x40014000
 8006188:	40014400 	.word	0x40014400
 800618c:	40014800 	.word	0x40014800
 8006190:	40001800 	.word	0x40001800
 8006194:	40001c00 	.word	0x40001c00
 8006198:	40002000 	.word	0x40002000

0800619c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800619c:	b480      	push	{r7}
 800619e:	b087      	sub	sp, #28
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	f023 0201 	bic.w	r2, r3, #1
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	4b2b      	ldr	r3, [pc, #172]	; (8006274 <TIM_OC1_SetConfig+0xd8>)
 80061c8:	4013      	ands	r3, r2
 80061ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f023 0303 	bic.w	r3, r3, #3
 80061d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	4313      	orrs	r3, r2
 80061dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	f023 0302 	bic.w	r3, r3, #2
 80061e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	697a      	ldr	r2, [r7, #20]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a21      	ldr	r2, [pc, #132]	; (8006278 <TIM_OC1_SetConfig+0xdc>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d003      	beq.n	8006200 <TIM_OC1_SetConfig+0x64>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a20      	ldr	r2, [pc, #128]	; (800627c <TIM_OC1_SetConfig+0xe0>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d10c      	bne.n	800621a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	f023 0308 	bic.w	r3, r3, #8
 8006206:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	4313      	orrs	r3, r2
 8006210:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f023 0304 	bic.w	r3, r3, #4
 8006218:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a16      	ldr	r2, [pc, #88]	; (8006278 <TIM_OC1_SetConfig+0xdc>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d003      	beq.n	800622a <TIM_OC1_SetConfig+0x8e>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a15      	ldr	r2, [pc, #84]	; (800627c <TIM_OC1_SetConfig+0xe0>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d111      	bne.n	800624e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006230:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006238:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	4313      	orrs	r3, r2
 8006242:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	699b      	ldr	r3, [r3, #24]
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	4313      	orrs	r3, r2
 800624c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	685a      	ldr	r2, [r3, #4]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	697a      	ldr	r2, [r7, #20]
 8006266:	621a      	str	r2, [r3, #32]
}
 8006268:	bf00      	nop
 800626a:	371c      	adds	r7, #28
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr
 8006274:	fffeff8f 	.word	0xfffeff8f
 8006278:	40010000 	.word	0x40010000
 800627c:	40010400 	.word	0x40010400

08006280 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006280:	b480      	push	{r7}
 8006282:	b087      	sub	sp, #28
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a1b      	ldr	r3, [r3, #32]
 800628e:	f023 0210 	bic.w	r2, r3, #16
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a1b      	ldr	r3, [r3, #32]
 800629a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	4b2e      	ldr	r3, [pc, #184]	; (8006364 <TIM_OC2_SetConfig+0xe4>)
 80062ac:	4013      	ands	r3, r2
 80062ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	021b      	lsls	r3, r3, #8
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	f023 0320 	bic.w	r3, r3, #32
 80062ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	011b      	lsls	r3, r3, #4
 80062d2:	697a      	ldr	r2, [r7, #20]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a23      	ldr	r2, [pc, #140]	; (8006368 <TIM_OC2_SetConfig+0xe8>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d003      	beq.n	80062e8 <TIM_OC2_SetConfig+0x68>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a22      	ldr	r2, [pc, #136]	; (800636c <TIM_OC2_SetConfig+0xec>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d10d      	bne.n	8006304 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	011b      	lsls	r3, r3, #4
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006302:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a18      	ldr	r2, [pc, #96]	; (8006368 <TIM_OC2_SetConfig+0xe8>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d003      	beq.n	8006314 <TIM_OC2_SetConfig+0x94>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a17      	ldr	r2, [pc, #92]	; (800636c <TIM_OC2_SetConfig+0xec>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d113      	bne.n	800633c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800631a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006322:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	695b      	ldr	r3, [r3, #20]
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	693a      	ldr	r2, [r7, #16]
 800632c:	4313      	orrs	r3, r2
 800632e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	699b      	ldr	r3, [r3, #24]
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	693a      	ldr	r2, [r7, #16]
 8006338:	4313      	orrs	r3, r2
 800633a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	693a      	ldr	r2, [r7, #16]
 8006340:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	621a      	str	r2, [r3, #32]
}
 8006356:	bf00      	nop
 8006358:	371c      	adds	r7, #28
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	feff8fff 	.word	0xfeff8fff
 8006368:	40010000 	.word	0x40010000
 800636c:	40010400 	.word	0x40010400

08006370 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006370:	b480      	push	{r7}
 8006372:	b087      	sub	sp, #28
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a1b      	ldr	r3, [r3, #32]
 800637e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a1b      	ldr	r3, [r3, #32]
 800638a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	69db      	ldr	r3, [r3, #28]
 8006396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	4b2d      	ldr	r3, [pc, #180]	; (8006450 <TIM_OC3_SetConfig+0xe0>)
 800639c:	4013      	ands	r3, r2
 800639e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f023 0303 	bic.w	r3, r3, #3
 80063a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	021b      	lsls	r3, r3, #8
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a22      	ldr	r2, [pc, #136]	; (8006454 <TIM_OC3_SetConfig+0xe4>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d003      	beq.n	80063d6 <TIM_OC3_SetConfig+0x66>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a21      	ldr	r2, [pc, #132]	; (8006458 <TIM_OC3_SetConfig+0xe8>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d10d      	bne.n	80063f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	021b      	lsls	r3, r3, #8
 80063e4:	697a      	ldr	r2, [r7, #20]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a17      	ldr	r2, [pc, #92]	; (8006454 <TIM_OC3_SetConfig+0xe4>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d003      	beq.n	8006402 <TIM_OC3_SetConfig+0x92>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a16      	ldr	r2, [pc, #88]	; (8006458 <TIM_OC3_SetConfig+0xe8>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d113      	bne.n	800642a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006408:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006410:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	011b      	lsls	r3, r3, #4
 8006418:	693a      	ldr	r2, [r7, #16]
 800641a:	4313      	orrs	r3, r2
 800641c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	011b      	lsls	r3, r3, #4
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	4313      	orrs	r3, r2
 8006428:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	693a      	ldr	r2, [r7, #16]
 800642e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	685a      	ldr	r2, [r3, #4]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	621a      	str	r2, [r3, #32]
}
 8006444:	bf00      	nop
 8006446:	371c      	adds	r7, #28
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr
 8006450:	fffeff8f 	.word	0xfffeff8f
 8006454:	40010000 	.word	0x40010000
 8006458:	40010400 	.word	0x40010400

0800645c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800645c:	b480      	push	{r7}
 800645e:	b087      	sub	sp, #28
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a1b      	ldr	r3, [r3, #32]
 8006476:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	4b1e      	ldr	r3, [pc, #120]	; (8006500 <TIM_OC4_SetConfig+0xa4>)
 8006488:	4013      	ands	r3, r2
 800648a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006492:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	021b      	lsls	r3, r3, #8
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	4313      	orrs	r3, r2
 800649e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	031b      	lsls	r3, r3, #12
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a13      	ldr	r2, [pc, #76]	; (8006504 <TIM_OC4_SetConfig+0xa8>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d003      	beq.n	80064c4 <TIM_OC4_SetConfig+0x68>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a12      	ldr	r2, [pc, #72]	; (8006508 <TIM_OC4_SetConfig+0xac>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d109      	bne.n	80064d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	695b      	ldr	r3, [r3, #20]
 80064d0:	019b      	lsls	r3, r3, #6
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	685a      	ldr	r2, [r3, #4]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	693a      	ldr	r2, [r7, #16]
 80064f0:	621a      	str	r2, [r3, #32]
}
 80064f2:	bf00      	nop
 80064f4:	371c      	adds	r7, #28
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	feff8fff 	.word	0xfeff8fff
 8006504:	40010000 	.word	0x40010000
 8006508:	40010400 	.word	0x40010400

0800650c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800650c:	b480      	push	{r7}
 800650e:	b087      	sub	sp, #28
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a1b      	ldr	r3, [r3, #32]
 800651a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a1b      	ldr	r3, [r3, #32]
 8006526:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	4b1b      	ldr	r3, [pc, #108]	; (80065a4 <TIM_OC5_SetConfig+0x98>)
 8006538:	4013      	ands	r3, r2
 800653a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	4313      	orrs	r3, r2
 8006544:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800654c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	041b      	lsls	r3, r3, #16
 8006554:	693a      	ldr	r2, [r7, #16]
 8006556:	4313      	orrs	r3, r2
 8006558:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a12      	ldr	r2, [pc, #72]	; (80065a8 <TIM_OC5_SetConfig+0x9c>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d003      	beq.n	800656a <TIM_OC5_SetConfig+0x5e>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a11      	ldr	r2, [pc, #68]	; (80065ac <TIM_OC5_SetConfig+0xa0>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d109      	bne.n	800657e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006570:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	021b      	lsls	r3, r3, #8
 8006578:	697a      	ldr	r2, [r7, #20]
 800657a:	4313      	orrs	r3, r2
 800657c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	697a      	ldr	r2, [r7, #20]
 8006582:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	685a      	ldr	r2, [r3, #4]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	693a      	ldr	r2, [r7, #16]
 8006596:	621a      	str	r2, [r3, #32]
}
 8006598:	bf00      	nop
 800659a:	371c      	adds	r7, #28
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr
 80065a4:	fffeff8f 	.word	0xfffeff8f
 80065a8:	40010000 	.word	0x40010000
 80065ac:	40010400 	.word	0x40010400

080065b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b087      	sub	sp, #28
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a1b      	ldr	r3, [r3, #32]
 80065be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a1b      	ldr	r3, [r3, #32]
 80065ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	4b1c      	ldr	r3, [pc, #112]	; (800664c <TIM_OC6_SetConfig+0x9c>)
 80065dc:	4013      	ands	r3, r2
 80065de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	021b      	lsls	r3, r3, #8
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80065f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	051b      	lsls	r3, r3, #20
 80065fa:	693a      	ldr	r2, [r7, #16]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4a13      	ldr	r2, [pc, #76]	; (8006650 <TIM_OC6_SetConfig+0xa0>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d003      	beq.n	8006610 <TIM_OC6_SetConfig+0x60>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a12      	ldr	r2, [pc, #72]	; (8006654 <TIM_OC6_SetConfig+0xa4>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d109      	bne.n	8006624 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006616:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	695b      	ldr	r3, [r3, #20]
 800661c:	029b      	lsls	r3, r3, #10
 800661e:	697a      	ldr	r2, [r7, #20]
 8006620:	4313      	orrs	r3, r2
 8006622:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	697a      	ldr	r2, [r7, #20]
 8006628:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	685a      	ldr	r2, [r3, #4]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	693a      	ldr	r2, [r7, #16]
 800663c:	621a      	str	r2, [r3, #32]
}
 800663e:	bf00      	nop
 8006640:	371c      	adds	r7, #28
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	feff8fff 	.word	0xfeff8fff
 8006650:	40010000 	.word	0x40010000
 8006654:	40010400 	.word	0x40010400

08006658 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006658:	b480      	push	{r7}
 800665a:	b087      	sub	sp, #28
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	607a      	str	r2, [r7, #4]
 8006664:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6a1b      	ldr	r3, [r3, #32]
 800666a:	f023 0201 	bic.w	r2, r3, #1
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	699b      	ldr	r3, [r3, #24]
 8006676:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6a1b      	ldr	r3, [r3, #32]
 800667c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	4a28      	ldr	r2, [pc, #160]	; (8006724 <TIM_TI1_SetConfig+0xcc>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d01b      	beq.n	80066be <TIM_TI1_SetConfig+0x66>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800668c:	d017      	beq.n	80066be <TIM_TI1_SetConfig+0x66>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	4a25      	ldr	r2, [pc, #148]	; (8006728 <TIM_TI1_SetConfig+0xd0>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d013      	beq.n	80066be <TIM_TI1_SetConfig+0x66>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	4a24      	ldr	r2, [pc, #144]	; (800672c <TIM_TI1_SetConfig+0xd4>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d00f      	beq.n	80066be <TIM_TI1_SetConfig+0x66>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	4a23      	ldr	r2, [pc, #140]	; (8006730 <TIM_TI1_SetConfig+0xd8>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d00b      	beq.n	80066be <TIM_TI1_SetConfig+0x66>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	4a22      	ldr	r2, [pc, #136]	; (8006734 <TIM_TI1_SetConfig+0xdc>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d007      	beq.n	80066be <TIM_TI1_SetConfig+0x66>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	4a21      	ldr	r2, [pc, #132]	; (8006738 <TIM_TI1_SetConfig+0xe0>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d003      	beq.n	80066be <TIM_TI1_SetConfig+0x66>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	4a20      	ldr	r2, [pc, #128]	; (800673c <TIM_TI1_SetConfig+0xe4>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d101      	bne.n	80066c2 <TIM_TI1_SetConfig+0x6a>
 80066be:	2301      	movs	r3, #1
 80066c0:	e000      	b.n	80066c4 <TIM_TI1_SetConfig+0x6c>
 80066c2:	2300      	movs	r3, #0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d008      	beq.n	80066da <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	f023 0303 	bic.w	r3, r3, #3
 80066ce:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80066d0:	697a      	ldr	r2, [r7, #20]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	617b      	str	r3, [r7, #20]
 80066d8:	e003      	b.n	80066e2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	f043 0301 	orr.w	r3, r3, #1
 80066e0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	011b      	lsls	r3, r3, #4
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	697a      	ldr	r2, [r7, #20]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	f023 030a 	bic.w	r3, r3, #10
 80066fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	f003 030a 	and.w	r3, r3, #10
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	4313      	orrs	r3, r2
 8006708:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	697a      	ldr	r2, [r7, #20]
 800670e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	693a      	ldr	r2, [r7, #16]
 8006714:	621a      	str	r2, [r3, #32]
}
 8006716:	bf00      	nop
 8006718:	371c      	adds	r7, #28
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	40010000 	.word	0x40010000
 8006728:	40000400 	.word	0x40000400
 800672c:	40000800 	.word	0x40000800
 8006730:	40000c00 	.word	0x40000c00
 8006734:	40010400 	.word	0x40010400
 8006738:	40014000 	.word	0x40014000
 800673c:	40001800 	.word	0x40001800

08006740 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006740:	b480      	push	{r7}
 8006742:	b087      	sub	sp, #28
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6a1b      	ldr	r3, [r3, #32]
 8006750:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	f023 0201 	bic.w	r2, r3, #1
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800676a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	011b      	lsls	r3, r3, #4
 8006770:	693a      	ldr	r2, [r7, #16]
 8006772:	4313      	orrs	r3, r2
 8006774:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	f023 030a 	bic.w	r3, r3, #10
 800677c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800677e:	697a      	ldr	r2, [r7, #20]
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	4313      	orrs	r3, r2
 8006784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	693a      	ldr	r2, [r7, #16]
 800678a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	697a      	ldr	r2, [r7, #20]
 8006790:	621a      	str	r2, [r3, #32]
}
 8006792:	bf00      	nop
 8006794:	371c      	adds	r7, #28
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr

0800679e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800679e:	b480      	push	{r7}
 80067a0:	b087      	sub	sp, #28
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	60f8      	str	r0, [r7, #12]
 80067a6:	60b9      	str	r1, [r7, #8]
 80067a8:	607a      	str	r2, [r7, #4]
 80067aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6a1b      	ldr	r3, [r3, #32]
 80067b0:	f023 0210 	bic.w	r2, r3, #16
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	699b      	ldr	r3, [r3, #24]
 80067bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6a1b      	ldr	r3, [r3, #32]
 80067c2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	021b      	lsls	r3, r3, #8
 80067d0:	697a      	ldr	r2, [r7, #20]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	031b      	lsls	r3, r3, #12
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	697a      	ldr	r2, [r7, #20]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80067f0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	011b      	lsls	r3, r3, #4
 80067f6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80067fa:	693a      	ldr	r2, [r7, #16]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	697a      	ldr	r2, [r7, #20]
 8006804:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	693a      	ldr	r2, [r7, #16]
 800680a:	621a      	str	r2, [r3, #32]
}
 800680c:	bf00      	nop
 800680e:	371c      	adds	r7, #28
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006818:	b480      	push	{r7}
 800681a:	b087      	sub	sp, #28
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6a1b      	ldr	r3, [r3, #32]
 8006828:	f023 0210 	bic.w	r2, r3, #16
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	699b      	ldr	r3, [r3, #24]
 8006834:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006842:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	031b      	lsls	r3, r3, #12
 8006848:	697a      	ldr	r2, [r7, #20]
 800684a:	4313      	orrs	r3, r2
 800684c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006854:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	011b      	lsls	r3, r3, #4
 800685a:	693a      	ldr	r2, [r7, #16]
 800685c:	4313      	orrs	r3, r2
 800685e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	697a      	ldr	r2, [r7, #20]
 8006864:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	621a      	str	r2, [r3, #32]
}
 800686c:	bf00      	nop
 800686e:	371c      	adds	r7, #28
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006878:	b480      	push	{r7}
 800687a:	b087      	sub	sp, #28
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	607a      	str	r2, [r7, #4]
 8006884:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6a1b      	ldr	r3, [r3, #32]
 800688a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	69db      	ldr	r3, [r3, #28]
 8006896:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6a1b      	ldr	r3, [r3, #32]
 800689c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	f023 0303 	bic.w	r3, r3, #3
 80068a4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80068a6:	697a      	ldr	r2, [r7, #20]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	011b      	lsls	r3, r3, #4
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	697a      	ldr	r2, [r7, #20]
 80068be:	4313      	orrs	r3, r2
 80068c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80068c8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	021b      	lsls	r3, r3, #8
 80068ce:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80068d2:	693a      	ldr	r2, [r7, #16]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	697a      	ldr	r2, [r7, #20]
 80068dc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	693a      	ldr	r2, [r7, #16]
 80068e2:	621a      	str	r2, [r3, #32]
}
 80068e4:	bf00      	nop
 80068e6:	371c      	adds	r7, #28
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b087      	sub	sp, #28
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	607a      	str	r2, [r7, #4]
 80068fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	69db      	ldr	r3, [r3, #28]
 800690e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6a1b      	ldr	r3, [r3, #32]
 8006914:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800691c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	021b      	lsls	r3, r3, #8
 8006922:	697a      	ldr	r2, [r7, #20]
 8006924:	4313      	orrs	r3, r2
 8006926:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800692e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	031b      	lsls	r3, r3, #12
 8006934:	b29b      	uxth	r3, r3
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	4313      	orrs	r3, r2
 800693a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006942:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	031b      	lsls	r3, r3, #12
 8006948:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800694c:	693a      	ldr	r2, [r7, #16]
 800694e:	4313      	orrs	r3, r2
 8006950:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	697a      	ldr	r2, [r7, #20]
 8006956:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	693a      	ldr	r2, [r7, #16]
 800695c:	621a      	str	r2, [r3, #32]
}
 800695e:	bf00      	nop
 8006960:	371c      	adds	r7, #28
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr

0800696a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800696a:	b480      	push	{r7}
 800696c:	b085      	sub	sp, #20
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
 8006972:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006980:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006982:	683a      	ldr	r2, [r7, #0]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	4313      	orrs	r3, r2
 8006988:	f043 0307 	orr.w	r3, r3, #7
 800698c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	609a      	str	r2, [r3, #8]
}
 8006994:	bf00      	nop
 8006996:	3714      	adds	r7, #20
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b087      	sub	sp, #28
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	607a      	str	r2, [r7, #4]
 80069ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	021a      	lsls	r2, r3, #8
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	431a      	orrs	r2, r3
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	697a      	ldr	r2, [r7, #20]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	697a      	ldr	r2, [r7, #20]
 80069d2:	609a      	str	r2, [r3, #8]
}
 80069d4:	bf00      	nop
 80069d6:	371c      	adds	r7, #28
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d101      	bne.n	80069f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069f4:	2302      	movs	r3, #2
 80069f6:	e06d      	b.n	8006ad4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2202      	movs	r2, #2
 8006a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a30      	ldr	r2, [pc, #192]	; (8006ae0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d004      	beq.n	8006a2c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a2f      	ldr	r2, [pc, #188]	; (8006ae4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d108      	bne.n	8006a3e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006a32:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a44:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a20      	ldr	r2, [pc, #128]	; (8006ae0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d022      	beq.n	8006aa8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a6a:	d01d      	beq.n	8006aa8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a1d      	ldr	r2, [pc, #116]	; (8006ae8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d018      	beq.n	8006aa8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a1c      	ldr	r2, [pc, #112]	; (8006aec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d013      	beq.n	8006aa8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a1a      	ldr	r2, [pc, #104]	; (8006af0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d00e      	beq.n	8006aa8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a15      	ldr	r2, [pc, #84]	; (8006ae4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d009      	beq.n	8006aa8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a16      	ldr	r2, [pc, #88]	; (8006af4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d004      	beq.n	8006aa8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a15      	ldr	r2, [pc, #84]	; (8006af8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d10c      	bne.n	8006ac2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006aae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	68ba      	ldr	r2, [r7, #8]
 8006ac0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3714      	adds	r7, #20
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr
 8006ae0:	40010000 	.word	0x40010000
 8006ae4:	40010400 	.word	0x40010400
 8006ae8:	40000400 	.word	0x40000400
 8006aec:	40000800 	.word	0x40000800
 8006af0:	40000c00 	.word	0x40000c00
 8006af4:	40014000 	.word	0x40014000
 8006af8:	40001800 	.word	0x40001800

08006afc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006b06:	2300      	movs	r3, #0
 8006b08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d101      	bne.n	8006b18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006b14:	2302      	movs	r3, #2
 8006b16:	e065      	b.n	8006be4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	695b      	ldr	r3, [r3, #20]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	699b      	ldr	r3, [r3, #24]
 8006b8c:	041b      	lsls	r3, r3, #16
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a16      	ldr	r2, [pc, #88]	; (8006bf0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d004      	beq.n	8006ba6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a14      	ldr	r2, [pc, #80]	; (8006bf4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d115      	bne.n	8006bd2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb0:	051b      	lsls	r3, r3, #20
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	69db      	ldr	r3, [r3, #28]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	6a1b      	ldr	r3, [r3, #32]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68fa      	ldr	r2, [r7, #12]
 8006bd8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3714      	adds	r7, #20
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr
 8006bf0:	40010000 	.word	0x40010000
 8006bf4:	40010400 	.word	0x40010400

08006bf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c00:	bf00      	nop
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c14:	bf00      	nop
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006c28:	bf00      	nop
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d101      	bne.n	8006c46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e040      	b.n	8006cc8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d106      	bne.n	8006c5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f7fb fa10 	bl	800207c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2224      	movs	r2, #36	; 0x24
 8006c60:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f022 0201 	bic.w	r2, r2, #1
 8006c70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f82c 	bl	8006cd0 <UART_SetConfig>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d101      	bne.n	8006c82 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e022      	b.n	8006cc8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d002      	beq.n	8006c90 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 fa84 	bl	8007198 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	685a      	ldr	r2, [r3, #4]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	689a      	ldr	r2, [r3, #8]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f042 0201 	orr.w	r2, r2, #1
 8006cbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 fb0b 	bl	80072dc <UART_CheckIdleState>
 8006cc6:	4603      	mov	r3, r0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3708      	adds	r7, #8
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b088      	sub	sp, #32
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	689a      	ldr	r2, [r3, #8]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	431a      	orrs	r2, r3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	695b      	ldr	r3, [r3, #20]
 8006cea:	431a      	orrs	r2, r3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	69db      	ldr	r3, [r3, #28]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	4ba6      	ldr	r3, [pc, #664]	; (8006f94 <UART_SetConfig+0x2c4>)
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	6812      	ldr	r2, [r2, #0]
 8006d02:	6979      	ldr	r1, [r7, #20]
 8006d04:	430b      	orrs	r3, r1
 8006d06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	68da      	ldr	r2, [r3, #12]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	430a      	orrs	r2, r1
 8006d1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	699b      	ldr	r3, [r3, #24]
 8006d22:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6a1b      	ldr	r3, [r3, #32]
 8006d28:	697a      	ldr	r2, [r7, #20]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	697a      	ldr	r2, [r7, #20]
 8006d3e:	430a      	orrs	r2, r1
 8006d40:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a94      	ldr	r2, [pc, #592]	; (8006f98 <UART_SetConfig+0x2c8>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d120      	bne.n	8006d8e <UART_SetConfig+0xbe>
 8006d4c:	4b93      	ldr	r3, [pc, #588]	; (8006f9c <UART_SetConfig+0x2cc>)
 8006d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d52:	f003 0303 	and.w	r3, r3, #3
 8006d56:	2b03      	cmp	r3, #3
 8006d58:	d816      	bhi.n	8006d88 <UART_SetConfig+0xb8>
 8006d5a:	a201      	add	r2, pc, #4	; (adr r2, 8006d60 <UART_SetConfig+0x90>)
 8006d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d60:	08006d71 	.word	0x08006d71
 8006d64:	08006d7d 	.word	0x08006d7d
 8006d68:	08006d77 	.word	0x08006d77
 8006d6c:	08006d83 	.word	0x08006d83
 8006d70:	2301      	movs	r3, #1
 8006d72:	77fb      	strb	r3, [r7, #31]
 8006d74:	e150      	b.n	8007018 <UART_SetConfig+0x348>
 8006d76:	2302      	movs	r3, #2
 8006d78:	77fb      	strb	r3, [r7, #31]
 8006d7a:	e14d      	b.n	8007018 <UART_SetConfig+0x348>
 8006d7c:	2304      	movs	r3, #4
 8006d7e:	77fb      	strb	r3, [r7, #31]
 8006d80:	e14a      	b.n	8007018 <UART_SetConfig+0x348>
 8006d82:	2308      	movs	r3, #8
 8006d84:	77fb      	strb	r3, [r7, #31]
 8006d86:	e147      	b.n	8007018 <UART_SetConfig+0x348>
 8006d88:	2310      	movs	r3, #16
 8006d8a:	77fb      	strb	r3, [r7, #31]
 8006d8c:	e144      	b.n	8007018 <UART_SetConfig+0x348>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a83      	ldr	r2, [pc, #524]	; (8006fa0 <UART_SetConfig+0x2d0>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d132      	bne.n	8006dfe <UART_SetConfig+0x12e>
 8006d98:	4b80      	ldr	r3, [pc, #512]	; (8006f9c <UART_SetConfig+0x2cc>)
 8006d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d9e:	f003 030c 	and.w	r3, r3, #12
 8006da2:	2b0c      	cmp	r3, #12
 8006da4:	d828      	bhi.n	8006df8 <UART_SetConfig+0x128>
 8006da6:	a201      	add	r2, pc, #4	; (adr r2, 8006dac <UART_SetConfig+0xdc>)
 8006da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dac:	08006de1 	.word	0x08006de1
 8006db0:	08006df9 	.word	0x08006df9
 8006db4:	08006df9 	.word	0x08006df9
 8006db8:	08006df9 	.word	0x08006df9
 8006dbc:	08006ded 	.word	0x08006ded
 8006dc0:	08006df9 	.word	0x08006df9
 8006dc4:	08006df9 	.word	0x08006df9
 8006dc8:	08006df9 	.word	0x08006df9
 8006dcc:	08006de7 	.word	0x08006de7
 8006dd0:	08006df9 	.word	0x08006df9
 8006dd4:	08006df9 	.word	0x08006df9
 8006dd8:	08006df9 	.word	0x08006df9
 8006ddc:	08006df3 	.word	0x08006df3
 8006de0:	2300      	movs	r3, #0
 8006de2:	77fb      	strb	r3, [r7, #31]
 8006de4:	e118      	b.n	8007018 <UART_SetConfig+0x348>
 8006de6:	2302      	movs	r3, #2
 8006de8:	77fb      	strb	r3, [r7, #31]
 8006dea:	e115      	b.n	8007018 <UART_SetConfig+0x348>
 8006dec:	2304      	movs	r3, #4
 8006dee:	77fb      	strb	r3, [r7, #31]
 8006df0:	e112      	b.n	8007018 <UART_SetConfig+0x348>
 8006df2:	2308      	movs	r3, #8
 8006df4:	77fb      	strb	r3, [r7, #31]
 8006df6:	e10f      	b.n	8007018 <UART_SetConfig+0x348>
 8006df8:	2310      	movs	r3, #16
 8006dfa:	77fb      	strb	r3, [r7, #31]
 8006dfc:	e10c      	b.n	8007018 <UART_SetConfig+0x348>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a68      	ldr	r2, [pc, #416]	; (8006fa4 <UART_SetConfig+0x2d4>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d120      	bne.n	8006e4a <UART_SetConfig+0x17a>
 8006e08:	4b64      	ldr	r3, [pc, #400]	; (8006f9c <UART_SetConfig+0x2cc>)
 8006e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e0e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006e12:	2b30      	cmp	r3, #48	; 0x30
 8006e14:	d013      	beq.n	8006e3e <UART_SetConfig+0x16e>
 8006e16:	2b30      	cmp	r3, #48	; 0x30
 8006e18:	d814      	bhi.n	8006e44 <UART_SetConfig+0x174>
 8006e1a:	2b20      	cmp	r3, #32
 8006e1c:	d009      	beq.n	8006e32 <UART_SetConfig+0x162>
 8006e1e:	2b20      	cmp	r3, #32
 8006e20:	d810      	bhi.n	8006e44 <UART_SetConfig+0x174>
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d002      	beq.n	8006e2c <UART_SetConfig+0x15c>
 8006e26:	2b10      	cmp	r3, #16
 8006e28:	d006      	beq.n	8006e38 <UART_SetConfig+0x168>
 8006e2a:	e00b      	b.n	8006e44 <UART_SetConfig+0x174>
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	77fb      	strb	r3, [r7, #31]
 8006e30:	e0f2      	b.n	8007018 <UART_SetConfig+0x348>
 8006e32:	2302      	movs	r3, #2
 8006e34:	77fb      	strb	r3, [r7, #31]
 8006e36:	e0ef      	b.n	8007018 <UART_SetConfig+0x348>
 8006e38:	2304      	movs	r3, #4
 8006e3a:	77fb      	strb	r3, [r7, #31]
 8006e3c:	e0ec      	b.n	8007018 <UART_SetConfig+0x348>
 8006e3e:	2308      	movs	r3, #8
 8006e40:	77fb      	strb	r3, [r7, #31]
 8006e42:	e0e9      	b.n	8007018 <UART_SetConfig+0x348>
 8006e44:	2310      	movs	r3, #16
 8006e46:	77fb      	strb	r3, [r7, #31]
 8006e48:	e0e6      	b.n	8007018 <UART_SetConfig+0x348>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a56      	ldr	r2, [pc, #344]	; (8006fa8 <UART_SetConfig+0x2d8>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d120      	bne.n	8006e96 <UART_SetConfig+0x1c6>
 8006e54:	4b51      	ldr	r3, [pc, #324]	; (8006f9c <UART_SetConfig+0x2cc>)
 8006e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e5a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006e5e:	2bc0      	cmp	r3, #192	; 0xc0
 8006e60:	d013      	beq.n	8006e8a <UART_SetConfig+0x1ba>
 8006e62:	2bc0      	cmp	r3, #192	; 0xc0
 8006e64:	d814      	bhi.n	8006e90 <UART_SetConfig+0x1c0>
 8006e66:	2b80      	cmp	r3, #128	; 0x80
 8006e68:	d009      	beq.n	8006e7e <UART_SetConfig+0x1ae>
 8006e6a:	2b80      	cmp	r3, #128	; 0x80
 8006e6c:	d810      	bhi.n	8006e90 <UART_SetConfig+0x1c0>
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d002      	beq.n	8006e78 <UART_SetConfig+0x1a8>
 8006e72:	2b40      	cmp	r3, #64	; 0x40
 8006e74:	d006      	beq.n	8006e84 <UART_SetConfig+0x1b4>
 8006e76:	e00b      	b.n	8006e90 <UART_SetConfig+0x1c0>
 8006e78:	2300      	movs	r3, #0
 8006e7a:	77fb      	strb	r3, [r7, #31]
 8006e7c:	e0cc      	b.n	8007018 <UART_SetConfig+0x348>
 8006e7e:	2302      	movs	r3, #2
 8006e80:	77fb      	strb	r3, [r7, #31]
 8006e82:	e0c9      	b.n	8007018 <UART_SetConfig+0x348>
 8006e84:	2304      	movs	r3, #4
 8006e86:	77fb      	strb	r3, [r7, #31]
 8006e88:	e0c6      	b.n	8007018 <UART_SetConfig+0x348>
 8006e8a:	2308      	movs	r3, #8
 8006e8c:	77fb      	strb	r3, [r7, #31]
 8006e8e:	e0c3      	b.n	8007018 <UART_SetConfig+0x348>
 8006e90:	2310      	movs	r3, #16
 8006e92:	77fb      	strb	r3, [r7, #31]
 8006e94:	e0c0      	b.n	8007018 <UART_SetConfig+0x348>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a44      	ldr	r2, [pc, #272]	; (8006fac <UART_SetConfig+0x2dc>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d125      	bne.n	8006eec <UART_SetConfig+0x21c>
 8006ea0:	4b3e      	ldr	r3, [pc, #248]	; (8006f9c <UART_SetConfig+0x2cc>)
 8006ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eaa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006eae:	d017      	beq.n	8006ee0 <UART_SetConfig+0x210>
 8006eb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006eb4:	d817      	bhi.n	8006ee6 <UART_SetConfig+0x216>
 8006eb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006eba:	d00b      	beq.n	8006ed4 <UART_SetConfig+0x204>
 8006ebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ec0:	d811      	bhi.n	8006ee6 <UART_SetConfig+0x216>
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d003      	beq.n	8006ece <UART_SetConfig+0x1fe>
 8006ec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eca:	d006      	beq.n	8006eda <UART_SetConfig+0x20a>
 8006ecc:	e00b      	b.n	8006ee6 <UART_SetConfig+0x216>
 8006ece:	2300      	movs	r3, #0
 8006ed0:	77fb      	strb	r3, [r7, #31]
 8006ed2:	e0a1      	b.n	8007018 <UART_SetConfig+0x348>
 8006ed4:	2302      	movs	r3, #2
 8006ed6:	77fb      	strb	r3, [r7, #31]
 8006ed8:	e09e      	b.n	8007018 <UART_SetConfig+0x348>
 8006eda:	2304      	movs	r3, #4
 8006edc:	77fb      	strb	r3, [r7, #31]
 8006ede:	e09b      	b.n	8007018 <UART_SetConfig+0x348>
 8006ee0:	2308      	movs	r3, #8
 8006ee2:	77fb      	strb	r3, [r7, #31]
 8006ee4:	e098      	b.n	8007018 <UART_SetConfig+0x348>
 8006ee6:	2310      	movs	r3, #16
 8006ee8:	77fb      	strb	r3, [r7, #31]
 8006eea:	e095      	b.n	8007018 <UART_SetConfig+0x348>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a2f      	ldr	r2, [pc, #188]	; (8006fb0 <UART_SetConfig+0x2e0>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d125      	bne.n	8006f42 <UART_SetConfig+0x272>
 8006ef6:	4b29      	ldr	r3, [pc, #164]	; (8006f9c <UART_SetConfig+0x2cc>)
 8006ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006efc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006f00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f04:	d017      	beq.n	8006f36 <UART_SetConfig+0x266>
 8006f06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f0a:	d817      	bhi.n	8006f3c <UART_SetConfig+0x26c>
 8006f0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f10:	d00b      	beq.n	8006f2a <UART_SetConfig+0x25a>
 8006f12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f16:	d811      	bhi.n	8006f3c <UART_SetConfig+0x26c>
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d003      	beq.n	8006f24 <UART_SetConfig+0x254>
 8006f1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f20:	d006      	beq.n	8006f30 <UART_SetConfig+0x260>
 8006f22:	e00b      	b.n	8006f3c <UART_SetConfig+0x26c>
 8006f24:	2301      	movs	r3, #1
 8006f26:	77fb      	strb	r3, [r7, #31]
 8006f28:	e076      	b.n	8007018 <UART_SetConfig+0x348>
 8006f2a:	2302      	movs	r3, #2
 8006f2c:	77fb      	strb	r3, [r7, #31]
 8006f2e:	e073      	b.n	8007018 <UART_SetConfig+0x348>
 8006f30:	2304      	movs	r3, #4
 8006f32:	77fb      	strb	r3, [r7, #31]
 8006f34:	e070      	b.n	8007018 <UART_SetConfig+0x348>
 8006f36:	2308      	movs	r3, #8
 8006f38:	77fb      	strb	r3, [r7, #31]
 8006f3a:	e06d      	b.n	8007018 <UART_SetConfig+0x348>
 8006f3c:	2310      	movs	r3, #16
 8006f3e:	77fb      	strb	r3, [r7, #31]
 8006f40:	e06a      	b.n	8007018 <UART_SetConfig+0x348>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a1b      	ldr	r2, [pc, #108]	; (8006fb4 <UART_SetConfig+0x2e4>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d138      	bne.n	8006fbe <UART_SetConfig+0x2ee>
 8006f4c:	4b13      	ldr	r3, [pc, #76]	; (8006f9c <UART_SetConfig+0x2cc>)
 8006f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f52:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006f56:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f5a:	d017      	beq.n	8006f8c <UART_SetConfig+0x2bc>
 8006f5c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f60:	d82a      	bhi.n	8006fb8 <UART_SetConfig+0x2e8>
 8006f62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f66:	d00b      	beq.n	8006f80 <UART_SetConfig+0x2b0>
 8006f68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f6c:	d824      	bhi.n	8006fb8 <UART_SetConfig+0x2e8>
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d003      	beq.n	8006f7a <UART_SetConfig+0x2aa>
 8006f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f76:	d006      	beq.n	8006f86 <UART_SetConfig+0x2b6>
 8006f78:	e01e      	b.n	8006fb8 <UART_SetConfig+0x2e8>
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	77fb      	strb	r3, [r7, #31]
 8006f7e:	e04b      	b.n	8007018 <UART_SetConfig+0x348>
 8006f80:	2302      	movs	r3, #2
 8006f82:	77fb      	strb	r3, [r7, #31]
 8006f84:	e048      	b.n	8007018 <UART_SetConfig+0x348>
 8006f86:	2304      	movs	r3, #4
 8006f88:	77fb      	strb	r3, [r7, #31]
 8006f8a:	e045      	b.n	8007018 <UART_SetConfig+0x348>
 8006f8c:	2308      	movs	r3, #8
 8006f8e:	77fb      	strb	r3, [r7, #31]
 8006f90:	e042      	b.n	8007018 <UART_SetConfig+0x348>
 8006f92:	bf00      	nop
 8006f94:	efff69f3 	.word	0xefff69f3
 8006f98:	40011000 	.word	0x40011000
 8006f9c:	40023800 	.word	0x40023800
 8006fa0:	40004400 	.word	0x40004400
 8006fa4:	40004800 	.word	0x40004800
 8006fa8:	40004c00 	.word	0x40004c00
 8006fac:	40005000 	.word	0x40005000
 8006fb0:	40011400 	.word	0x40011400
 8006fb4:	40007800 	.word	0x40007800
 8006fb8:	2310      	movs	r3, #16
 8006fba:	77fb      	strb	r3, [r7, #31]
 8006fbc:	e02c      	b.n	8007018 <UART_SetConfig+0x348>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a72      	ldr	r2, [pc, #456]	; (800718c <UART_SetConfig+0x4bc>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d125      	bne.n	8007014 <UART_SetConfig+0x344>
 8006fc8:	4b71      	ldr	r3, [pc, #452]	; (8007190 <UART_SetConfig+0x4c0>)
 8006fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006fd2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006fd6:	d017      	beq.n	8007008 <UART_SetConfig+0x338>
 8006fd8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006fdc:	d817      	bhi.n	800700e <UART_SetConfig+0x33e>
 8006fde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fe2:	d00b      	beq.n	8006ffc <UART_SetConfig+0x32c>
 8006fe4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fe8:	d811      	bhi.n	800700e <UART_SetConfig+0x33e>
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d003      	beq.n	8006ff6 <UART_SetConfig+0x326>
 8006fee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ff2:	d006      	beq.n	8007002 <UART_SetConfig+0x332>
 8006ff4:	e00b      	b.n	800700e <UART_SetConfig+0x33e>
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	77fb      	strb	r3, [r7, #31]
 8006ffa:	e00d      	b.n	8007018 <UART_SetConfig+0x348>
 8006ffc:	2302      	movs	r3, #2
 8006ffe:	77fb      	strb	r3, [r7, #31]
 8007000:	e00a      	b.n	8007018 <UART_SetConfig+0x348>
 8007002:	2304      	movs	r3, #4
 8007004:	77fb      	strb	r3, [r7, #31]
 8007006:	e007      	b.n	8007018 <UART_SetConfig+0x348>
 8007008:	2308      	movs	r3, #8
 800700a:	77fb      	strb	r3, [r7, #31]
 800700c:	e004      	b.n	8007018 <UART_SetConfig+0x348>
 800700e:	2310      	movs	r3, #16
 8007010:	77fb      	strb	r3, [r7, #31]
 8007012:	e001      	b.n	8007018 <UART_SetConfig+0x348>
 8007014:	2310      	movs	r3, #16
 8007016:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	69db      	ldr	r3, [r3, #28]
 800701c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007020:	d15b      	bne.n	80070da <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007022:	7ffb      	ldrb	r3, [r7, #31]
 8007024:	2b08      	cmp	r3, #8
 8007026:	d828      	bhi.n	800707a <UART_SetConfig+0x3aa>
 8007028:	a201      	add	r2, pc, #4	; (adr r2, 8007030 <UART_SetConfig+0x360>)
 800702a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800702e:	bf00      	nop
 8007030:	08007055 	.word	0x08007055
 8007034:	0800705d 	.word	0x0800705d
 8007038:	08007065 	.word	0x08007065
 800703c:	0800707b 	.word	0x0800707b
 8007040:	0800706b 	.word	0x0800706b
 8007044:	0800707b 	.word	0x0800707b
 8007048:	0800707b 	.word	0x0800707b
 800704c:	0800707b 	.word	0x0800707b
 8007050:	08007073 	.word	0x08007073
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007054:	f7fd fd0e 	bl	8004a74 <HAL_RCC_GetPCLK1Freq>
 8007058:	61b8      	str	r0, [r7, #24]
        break;
 800705a:	e013      	b.n	8007084 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800705c:	f7fd fd1e 	bl	8004a9c <HAL_RCC_GetPCLK2Freq>
 8007060:	61b8      	str	r0, [r7, #24]
        break;
 8007062:	e00f      	b.n	8007084 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007064:	4b4b      	ldr	r3, [pc, #300]	; (8007194 <UART_SetConfig+0x4c4>)
 8007066:	61bb      	str	r3, [r7, #24]
        break;
 8007068:	e00c      	b.n	8007084 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800706a:	f7fd fbf1 	bl	8004850 <HAL_RCC_GetSysClockFreq>
 800706e:	61b8      	str	r0, [r7, #24]
        break;
 8007070:	e008      	b.n	8007084 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007072:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007076:	61bb      	str	r3, [r7, #24]
        break;
 8007078:	e004      	b.n	8007084 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800707a:	2300      	movs	r3, #0
 800707c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	77bb      	strb	r3, [r7, #30]
        break;
 8007082:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007084:	69bb      	ldr	r3, [r7, #24]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d074      	beq.n	8007174 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800708a:	69bb      	ldr	r3, [r7, #24]
 800708c:	005a      	lsls	r2, r3, #1
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	085b      	lsrs	r3, r3, #1
 8007094:	441a      	add	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	fbb2 f3f3 	udiv	r3, r2, r3
 800709e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	2b0f      	cmp	r3, #15
 80070a4:	d916      	bls.n	80070d4 <UART_SetConfig+0x404>
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070ac:	d212      	bcs.n	80070d4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	f023 030f 	bic.w	r3, r3, #15
 80070b6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	085b      	lsrs	r3, r3, #1
 80070bc:	b29b      	uxth	r3, r3
 80070be:	f003 0307 	and.w	r3, r3, #7
 80070c2:	b29a      	uxth	r2, r3
 80070c4:	89fb      	ldrh	r3, [r7, #14]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	89fa      	ldrh	r2, [r7, #14]
 80070d0:	60da      	str	r2, [r3, #12]
 80070d2:	e04f      	b.n	8007174 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	77bb      	strb	r3, [r7, #30]
 80070d8:	e04c      	b.n	8007174 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80070da:	7ffb      	ldrb	r3, [r7, #31]
 80070dc:	2b08      	cmp	r3, #8
 80070de:	d828      	bhi.n	8007132 <UART_SetConfig+0x462>
 80070e0:	a201      	add	r2, pc, #4	; (adr r2, 80070e8 <UART_SetConfig+0x418>)
 80070e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e6:	bf00      	nop
 80070e8:	0800710d 	.word	0x0800710d
 80070ec:	08007115 	.word	0x08007115
 80070f0:	0800711d 	.word	0x0800711d
 80070f4:	08007133 	.word	0x08007133
 80070f8:	08007123 	.word	0x08007123
 80070fc:	08007133 	.word	0x08007133
 8007100:	08007133 	.word	0x08007133
 8007104:	08007133 	.word	0x08007133
 8007108:	0800712b 	.word	0x0800712b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800710c:	f7fd fcb2 	bl	8004a74 <HAL_RCC_GetPCLK1Freq>
 8007110:	61b8      	str	r0, [r7, #24]
        break;
 8007112:	e013      	b.n	800713c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007114:	f7fd fcc2 	bl	8004a9c <HAL_RCC_GetPCLK2Freq>
 8007118:	61b8      	str	r0, [r7, #24]
        break;
 800711a:	e00f      	b.n	800713c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800711c:	4b1d      	ldr	r3, [pc, #116]	; (8007194 <UART_SetConfig+0x4c4>)
 800711e:	61bb      	str	r3, [r7, #24]
        break;
 8007120:	e00c      	b.n	800713c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007122:	f7fd fb95 	bl	8004850 <HAL_RCC_GetSysClockFreq>
 8007126:	61b8      	str	r0, [r7, #24]
        break;
 8007128:	e008      	b.n	800713c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800712a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800712e:	61bb      	str	r3, [r7, #24]
        break;
 8007130:	e004      	b.n	800713c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007132:	2300      	movs	r3, #0
 8007134:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	77bb      	strb	r3, [r7, #30]
        break;
 800713a:	bf00      	nop
    }

    if (pclk != 0U)
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d018      	beq.n	8007174 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	085a      	lsrs	r2, r3, #1
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	441a      	add	r2, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	fbb2 f3f3 	udiv	r3, r2, r3
 8007154:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	2b0f      	cmp	r3, #15
 800715a:	d909      	bls.n	8007170 <UART_SetConfig+0x4a0>
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007162:	d205      	bcs.n	8007170 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	b29a      	uxth	r2, r3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	60da      	str	r2, [r3, #12]
 800716e:	e001      	b.n	8007174 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007180:	7fbb      	ldrb	r3, [r7, #30]
}
 8007182:	4618      	mov	r0, r3
 8007184:	3720      	adds	r7, #32
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	40007c00 	.word	0x40007c00
 8007190:	40023800 	.word	0x40023800
 8007194:	00f42400 	.word	0x00f42400

08007198 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a4:	f003 0301 	and.w	r3, r3, #1
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00a      	beq.n	80071c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	430a      	orrs	r2, r1
 80071c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c6:	f003 0302 	and.w	r3, r3, #2
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00a      	beq.n	80071e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	430a      	orrs	r2, r1
 80071e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e8:	f003 0304 	and.w	r3, r3, #4
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d00a      	beq.n	8007206 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	430a      	orrs	r2, r1
 8007204:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720a:	f003 0308 	and.w	r3, r3, #8
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00a      	beq.n	8007228 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	430a      	orrs	r2, r1
 8007226:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722c:	f003 0310 	and.w	r3, r3, #16
 8007230:	2b00      	cmp	r3, #0
 8007232:	d00a      	beq.n	800724a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	430a      	orrs	r2, r1
 8007248:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724e:	f003 0320 	and.w	r3, r3, #32
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00a      	beq.n	800726c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	430a      	orrs	r2, r1
 800726a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007274:	2b00      	cmp	r3, #0
 8007276:	d01a      	beq.n	80072ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	430a      	orrs	r2, r1
 800728c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007292:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007296:	d10a      	bne.n	80072ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	430a      	orrs	r2, r1
 80072ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00a      	beq.n	80072d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	430a      	orrs	r2, r1
 80072ce:	605a      	str	r2, [r3, #4]
  }
}
 80072d0:	bf00      	nop
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b086      	sub	sp, #24
 80072e0:	af02      	add	r7, sp, #8
 80072e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80072ec:	f7fb fac6 	bl	800287c <HAL_GetTick>
 80072f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f003 0308 	and.w	r3, r3, #8
 80072fc:	2b08      	cmp	r3, #8
 80072fe:	d10e      	bne.n	800731e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007300:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007304:	9300      	str	r3, [sp, #0]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2200      	movs	r2, #0
 800730a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f831 	bl	8007376 <UART_WaitOnFlagUntilTimeout>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d001      	beq.n	800731e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800731a:	2303      	movs	r3, #3
 800731c:	e027      	b.n	800736e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f003 0304 	and.w	r3, r3, #4
 8007328:	2b04      	cmp	r3, #4
 800732a:	d10e      	bne.n	800734a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800732c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007330:	9300      	str	r3, [sp, #0]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2200      	movs	r2, #0
 8007336:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 f81b 	bl	8007376 <UART_WaitOnFlagUntilTimeout>
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d001      	beq.n	800734a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007346:	2303      	movs	r3, #3
 8007348:	e011      	b.n	800736e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2220      	movs	r2, #32
 800734e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2220      	movs	r2, #32
 8007354:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	3710      	adds	r7, #16
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}

08007376 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007376:	b580      	push	{r7, lr}
 8007378:	b09c      	sub	sp, #112	; 0x70
 800737a:	af00      	add	r7, sp, #0
 800737c:	60f8      	str	r0, [r7, #12]
 800737e:	60b9      	str	r1, [r7, #8]
 8007380:	603b      	str	r3, [r7, #0]
 8007382:	4613      	mov	r3, r2
 8007384:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007386:	e0a7      	b.n	80074d8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007388:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800738a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800738e:	f000 80a3 	beq.w	80074d8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007392:	f7fb fa73 	bl	800287c <HAL_GetTick>
 8007396:	4602      	mov	r2, r0
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	1ad3      	subs	r3, r2, r3
 800739c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800739e:	429a      	cmp	r2, r3
 80073a0:	d302      	bcc.n	80073a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80073a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d13f      	bne.n	8007428 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073b0:	e853 3f00 	ldrex	r3, [r3]
 80073b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80073b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80073bc:	667b      	str	r3, [r7, #100]	; 0x64
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	461a      	mov	r2, r3
 80073c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073c8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80073cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80073ce:	e841 2300 	strex	r3, r2, [r1]
 80073d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80073d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d1e6      	bne.n	80073a8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	3308      	adds	r3, #8
 80073e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073e4:	e853 3f00 	ldrex	r3, [r3]
 80073e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ec:	f023 0301 	bic.w	r3, r3, #1
 80073f0:	663b      	str	r3, [r7, #96]	; 0x60
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	3308      	adds	r3, #8
 80073f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80073fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80073fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007400:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007402:	e841 2300 	strex	r3, r2, [r1]
 8007406:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007408:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1e5      	bne.n	80073da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2220      	movs	r2, #32
 8007412:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2220      	movs	r2, #32
 8007418:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2200      	movs	r2, #0
 8007420:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007424:	2303      	movs	r3, #3
 8007426:	e068      	b.n	80074fa <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 0304 	and.w	r3, r3, #4
 8007432:	2b00      	cmp	r3, #0
 8007434:	d050      	beq.n	80074d8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	69db      	ldr	r3, [r3, #28]
 800743c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007440:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007444:	d148      	bne.n	80074d8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800744e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007458:	e853 3f00 	ldrex	r3, [r3]
 800745c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800745e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007460:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007464:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	461a      	mov	r2, r3
 800746c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800746e:	637b      	str	r3, [r7, #52]	; 0x34
 8007470:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007472:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007474:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007476:	e841 2300 	strex	r3, r2, [r1]
 800747a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800747c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800747e:	2b00      	cmp	r3, #0
 8007480:	d1e6      	bne.n	8007450 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	3308      	adds	r3, #8
 8007488:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	e853 3f00 	ldrex	r3, [r3]
 8007490:	613b      	str	r3, [r7, #16]
   return(result);
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	f023 0301 	bic.w	r3, r3, #1
 8007498:	66bb      	str	r3, [r7, #104]	; 0x68
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	3308      	adds	r3, #8
 80074a0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80074a2:	623a      	str	r2, [r7, #32]
 80074a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a6:	69f9      	ldr	r1, [r7, #28]
 80074a8:	6a3a      	ldr	r2, [r7, #32]
 80074aa:	e841 2300 	strex	r3, r2, [r1]
 80074ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d1e5      	bne.n	8007482 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2220      	movs	r2, #32
 80074ba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2220      	movs	r2, #32
 80074c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2220      	movs	r2, #32
 80074c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2200      	movs	r2, #0
 80074d0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80074d4:	2303      	movs	r3, #3
 80074d6:	e010      	b.n	80074fa <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	69da      	ldr	r2, [r3, #28]
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	4013      	ands	r3, r2
 80074e2:	68ba      	ldr	r2, [r7, #8]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	bf0c      	ite	eq
 80074e8:	2301      	moveq	r3, #1
 80074ea:	2300      	movne	r3, #0
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	461a      	mov	r2, r3
 80074f0:	79fb      	ldrb	r3, [r7, #7]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	f43f af48 	beq.w	8007388 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3770      	adds	r7, #112	; 0x70
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
	...

08007504 <findslot>:
 8007504:	4b0a      	ldr	r3, [pc, #40]	; (8007530 <findslot+0x2c>)
 8007506:	b510      	push	{r4, lr}
 8007508:	4604      	mov	r4, r0
 800750a:	6818      	ldr	r0, [r3, #0]
 800750c:	b118      	cbz	r0, 8007516 <findslot+0x12>
 800750e:	6a03      	ldr	r3, [r0, #32]
 8007510:	b90b      	cbnz	r3, 8007516 <findslot+0x12>
 8007512:	f000 fbb5 	bl	8007c80 <__sinit>
 8007516:	2c13      	cmp	r4, #19
 8007518:	d807      	bhi.n	800752a <findslot+0x26>
 800751a:	4806      	ldr	r0, [pc, #24]	; (8007534 <findslot+0x30>)
 800751c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8007520:	3201      	adds	r2, #1
 8007522:	d002      	beq.n	800752a <findslot+0x26>
 8007524:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8007528:	bd10      	pop	{r4, pc}
 800752a:	2000      	movs	r0, #0
 800752c:	e7fc      	b.n	8007528 <findslot+0x24>
 800752e:	bf00      	nop
 8007530:	20000070 	.word	0x20000070
 8007534:	20000730 	.word	0x20000730

08007538 <error>:
 8007538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800753a:	4604      	mov	r4, r0
 800753c:	f000 fd6a 	bl	8008014 <__errno>
 8007540:	2613      	movs	r6, #19
 8007542:	4605      	mov	r5, r0
 8007544:	2700      	movs	r7, #0
 8007546:	4630      	mov	r0, r6
 8007548:	4639      	mov	r1, r7
 800754a:	beab      	bkpt	0x00ab
 800754c:	4606      	mov	r6, r0
 800754e:	602e      	str	r6, [r5, #0]
 8007550:	4620      	mov	r0, r4
 8007552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007554 <checkerror>:
 8007554:	1c43      	adds	r3, r0, #1
 8007556:	d101      	bne.n	800755c <checkerror+0x8>
 8007558:	f7ff bfee 	b.w	8007538 <error>
 800755c:	4770      	bx	lr

0800755e <_swiread>:
 800755e:	b530      	push	{r4, r5, lr}
 8007560:	b085      	sub	sp, #20
 8007562:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8007566:	9203      	str	r2, [sp, #12]
 8007568:	2406      	movs	r4, #6
 800756a:	ad01      	add	r5, sp, #4
 800756c:	4620      	mov	r0, r4
 800756e:	4629      	mov	r1, r5
 8007570:	beab      	bkpt	0x00ab
 8007572:	4604      	mov	r4, r0
 8007574:	4620      	mov	r0, r4
 8007576:	f7ff ffed 	bl	8007554 <checkerror>
 800757a:	b005      	add	sp, #20
 800757c:	bd30      	pop	{r4, r5, pc}

0800757e <_read>:
 800757e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007580:	4615      	mov	r5, r2
 8007582:	9101      	str	r1, [sp, #4]
 8007584:	f7ff ffbe 	bl	8007504 <findslot>
 8007588:	9901      	ldr	r1, [sp, #4]
 800758a:	4604      	mov	r4, r0
 800758c:	b938      	cbnz	r0, 800759e <_read+0x20>
 800758e:	f000 fd41 	bl	8008014 <__errno>
 8007592:	2309      	movs	r3, #9
 8007594:	6003      	str	r3, [r0, #0]
 8007596:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800759a:	b003      	add	sp, #12
 800759c:	bd30      	pop	{r4, r5, pc}
 800759e:	6800      	ldr	r0, [r0, #0]
 80075a0:	462a      	mov	r2, r5
 80075a2:	f7ff ffdc 	bl	800755e <_swiread>
 80075a6:	1c43      	adds	r3, r0, #1
 80075a8:	d0f7      	beq.n	800759a <_read+0x1c>
 80075aa:	6863      	ldr	r3, [r4, #4]
 80075ac:	1a2a      	subs	r2, r5, r0
 80075ae:	4413      	add	r3, r2
 80075b0:	6063      	str	r3, [r4, #4]
 80075b2:	4610      	mov	r0, r2
 80075b4:	e7f1      	b.n	800759a <_read+0x1c>

080075b6 <_swilseek>:
 80075b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075b8:	460c      	mov	r4, r1
 80075ba:	4616      	mov	r6, r2
 80075bc:	f7ff ffa2 	bl	8007504 <findslot>
 80075c0:	4605      	mov	r5, r0
 80075c2:	b940      	cbnz	r0, 80075d6 <_swilseek+0x20>
 80075c4:	f000 fd26 	bl	8008014 <__errno>
 80075c8:	2309      	movs	r3, #9
 80075ca:	6003      	str	r3, [r0, #0]
 80075cc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80075d0:	4620      	mov	r0, r4
 80075d2:	b003      	add	sp, #12
 80075d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075d6:	2e02      	cmp	r6, #2
 80075d8:	d903      	bls.n	80075e2 <_swilseek+0x2c>
 80075da:	f000 fd1b 	bl	8008014 <__errno>
 80075de:	2316      	movs	r3, #22
 80075e0:	e7f3      	b.n	80075ca <_swilseek+0x14>
 80075e2:	2e01      	cmp	r6, #1
 80075e4:	d112      	bne.n	800760c <_swilseek+0x56>
 80075e6:	6843      	ldr	r3, [r0, #4]
 80075e8:	18e4      	adds	r4, r4, r3
 80075ea:	d4f6      	bmi.n	80075da <_swilseek+0x24>
 80075ec:	682b      	ldr	r3, [r5, #0]
 80075ee:	260a      	movs	r6, #10
 80075f0:	e9cd 3400 	strd	r3, r4, [sp]
 80075f4:	466f      	mov	r7, sp
 80075f6:	4630      	mov	r0, r6
 80075f8:	4639      	mov	r1, r7
 80075fa:	beab      	bkpt	0x00ab
 80075fc:	4606      	mov	r6, r0
 80075fe:	4630      	mov	r0, r6
 8007600:	f7ff ffa8 	bl	8007554 <checkerror>
 8007604:	2800      	cmp	r0, #0
 8007606:	dbe1      	blt.n	80075cc <_swilseek+0x16>
 8007608:	606c      	str	r4, [r5, #4]
 800760a:	e7e1      	b.n	80075d0 <_swilseek+0x1a>
 800760c:	2e02      	cmp	r6, #2
 800760e:	6803      	ldr	r3, [r0, #0]
 8007610:	d1ec      	bne.n	80075ec <_swilseek+0x36>
 8007612:	9300      	str	r3, [sp, #0]
 8007614:	260c      	movs	r6, #12
 8007616:	466f      	mov	r7, sp
 8007618:	4630      	mov	r0, r6
 800761a:	4639      	mov	r1, r7
 800761c:	beab      	bkpt	0x00ab
 800761e:	4606      	mov	r6, r0
 8007620:	4630      	mov	r0, r6
 8007622:	f7ff ff97 	bl	8007554 <checkerror>
 8007626:	1c43      	adds	r3, r0, #1
 8007628:	d0d0      	beq.n	80075cc <_swilseek+0x16>
 800762a:	4404      	add	r4, r0
 800762c:	e7de      	b.n	80075ec <_swilseek+0x36>

0800762e <_lseek>:
 800762e:	f7ff bfc2 	b.w	80075b6 <_swilseek>

08007632 <_swiwrite>:
 8007632:	b530      	push	{r4, r5, lr}
 8007634:	b085      	sub	sp, #20
 8007636:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800763a:	9203      	str	r2, [sp, #12]
 800763c:	2405      	movs	r4, #5
 800763e:	ad01      	add	r5, sp, #4
 8007640:	4620      	mov	r0, r4
 8007642:	4629      	mov	r1, r5
 8007644:	beab      	bkpt	0x00ab
 8007646:	4604      	mov	r4, r0
 8007648:	4620      	mov	r0, r4
 800764a:	f7ff ff83 	bl	8007554 <checkerror>
 800764e:	b005      	add	sp, #20
 8007650:	bd30      	pop	{r4, r5, pc}

08007652 <_write>:
 8007652:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007654:	4615      	mov	r5, r2
 8007656:	9101      	str	r1, [sp, #4]
 8007658:	f7ff ff54 	bl	8007504 <findslot>
 800765c:	9901      	ldr	r1, [sp, #4]
 800765e:	4604      	mov	r4, r0
 8007660:	b930      	cbnz	r0, 8007670 <_write+0x1e>
 8007662:	f000 fcd7 	bl	8008014 <__errno>
 8007666:	2309      	movs	r3, #9
 8007668:	6003      	str	r3, [r0, #0]
 800766a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800766e:	e012      	b.n	8007696 <_write+0x44>
 8007670:	6800      	ldr	r0, [r0, #0]
 8007672:	462a      	mov	r2, r5
 8007674:	f7ff ffdd 	bl	8007632 <_swiwrite>
 8007678:	2800      	cmp	r0, #0
 800767a:	dbf6      	blt.n	800766a <_write+0x18>
 800767c:	6862      	ldr	r2, [r4, #4]
 800767e:	1a2b      	subs	r3, r5, r0
 8007680:	441a      	add	r2, r3
 8007682:	42a8      	cmp	r0, r5
 8007684:	6062      	str	r2, [r4, #4]
 8007686:	d105      	bne.n	8007694 <_write+0x42>
 8007688:	2000      	movs	r0, #0
 800768a:	b003      	add	sp, #12
 800768c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007690:	f7ff bf52 	b.w	8007538 <error>
 8007694:	4618      	mov	r0, r3
 8007696:	b003      	add	sp, #12
 8007698:	bd30      	pop	{r4, r5, pc}

0800769a <_swiclose>:
 800769a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800769c:	2402      	movs	r4, #2
 800769e:	9001      	str	r0, [sp, #4]
 80076a0:	ad01      	add	r5, sp, #4
 80076a2:	4620      	mov	r0, r4
 80076a4:	4629      	mov	r1, r5
 80076a6:	beab      	bkpt	0x00ab
 80076a8:	4604      	mov	r4, r0
 80076aa:	4620      	mov	r0, r4
 80076ac:	f7ff ff52 	bl	8007554 <checkerror>
 80076b0:	b003      	add	sp, #12
 80076b2:	bd30      	pop	{r4, r5, pc}

080076b4 <_close>:
 80076b4:	b538      	push	{r3, r4, r5, lr}
 80076b6:	4605      	mov	r5, r0
 80076b8:	f7ff ff24 	bl	8007504 <findslot>
 80076bc:	4604      	mov	r4, r0
 80076be:	b930      	cbnz	r0, 80076ce <_close+0x1a>
 80076c0:	f000 fca8 	bl	8008014 <__errno>
 80076c4:	2309      	movs	r3, #9
 80076c6:	6003      	str	r3, [r0, #0]
 80076c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076cc:	bd38      	pop	{r3, r4, r5, pc}
 80076ce:	3d01      	subs	r5, #1
 80076d0:	2d01      	cmp	r5, #1
 80076d2:	d809      	bhi.n	80076e8 <_close+0x34>
 80076d4:	4b09      	ldr	r3, [pc, #36]	; (80076fc <_close+0x48>)
 80076d6:	689a      	ldr	r2, [r3, #8]
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d104      	bne.n	80076e8 <_close+0x34>
 80076de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076e2:	6003      	str	r3, [r0, #0]
 80076e4:	2000      	movs	r0, #0
 80076e6:	e7f1      	b.n	80076cc <_close+0x18>
 80076e8:	6820      	ldr	r0, [r4, #0]
 80076ea:	f7ff ffd6 	bl	800769a <_swiclose>
 80076ee:	2800      	cmp	r0, #0
 80076f0:	d1ec      	bne.n	80076cc <_close+0x18>
 80076f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076f6:	6023      	str	r3, [r4, #0]
 80076f8:	e7e8      	b.n	80076cc <_close+0x18>
 80076fa:	bf00      	nop
 80076fc:	20000730 	.word	0x20000730

08007700 <_swistat>:
 8007700:	b570      	push	{r4, r5, r6, lr}
 8007702:	460c      	mov	r4, r1
 8007704:	f7ff fefe 	bl	8007504 <findslot>
 8007708:	4605      	mov	r5, r0
 800770a:	b930      	cbnz	r0, 800771a <_swistat+0x1a>
 800770c:	f000 fc82 	bl	8008014 <__errno>
 8007710:	2309      	movs	r3, #9
 8007712:	6003      	str	r3, [r0, #0]
 8007714:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007718:	bd70      	pop	{r4, r5, r6, pc}
 800771a:	6863      	ldr	r3, [r4, #4]
 800771c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007720:	6063      	str	r3, [r4, #4]
 8007722:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007726:	64a3      	str	r3, [r4, #72]	; 0x48
 8007728:	260c      	movs	r6, #12
 800772a:	4630      	mov	r0, r6
 800772c:	4629      	mov	r1, r5
 800772e:	beab      	bkpt	0x00ab
 8007730:	4605      	mov	r5, r0
 8007732:	4628      	mov	r0, r5
 8007734:	f7ff ff0e 	bl	8007554 <checkerror>
 8007738:	1c43      	adds	r3, r0, #1
 800773a:	bf1c      	itt	ne
 800773c:	6120      	strne	r0, [r4, #16]
 800773e:	2000      	movne	r0, #0
 8007740:	e7ea      	b.n	8007718 <_swistat+0x18>

08007742 <_fstat>:
 8007742:	460b      	mov	r3, r1
 8007744:	b510      	push	{r4, lr}
 8007746:	2100      	movs	r1, #0
 8007748:	4604      	mov	r4, r0
 800774a:	2258      	movs	r2, #88	; 0x58
 800774c:	4618      	mov	r0, r3
 800774e:	f000 fc13 	bl	8007f78 <memset>
 8007752:	4601      	mov	r1, r0
 8007754:	4620      	mov	r0, r4
 8007756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800775a:	f7ff bfd1 	b.w	8007700 <_swistat>

0800775e <_stat>:
 800775e:	b538      	push	{r3, r4, r5, lr}
 8007760:	460d      	mov	r5, r1
 8007762:	4604      	mov	r4, r0
 8007764:	2258      	movs	r2, #88	; 0x58
 8007766:	2100      	movs	r1, #0
 8007768:	4628      	mov	r0, r5
 800776a:	f000 fc05 	bl	8007f78 <memset>
 800776e:	4620      	mov	r0, r4
 8007770:	2100      	movs	r1, #0
 8007772:	f000 f811 	bl	8007798 <_swiopen>
 8007776:	1c43      	adds	r3, r0, #1
 8007778:	4604      	mov	r4, r0
 800777a:	d00b      	beq.n	8007794 <_stat+0x36>
 800777c:	686b      	ldr	r3, [r5, #4]
 800777e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007782:	606b      	str	r3, [r5, #4]
 8007784:	4629      	mov	r1, r5
 8007786:	f7ff ffbb 	bl	8007700 <_swistat>
 800778a:	4605      	mov	r5, r0
 800778c:	4620      	mov	r0, r4
 800778e:	f7ff ff91 	bl	80076b4 <_close>
 8007792:	462c      	mov	r4, r5
 8007794:	4620      	mov	r0, r4
 8007796:	bd38      	pop	{r3, r4, r5, pc}

08007798 <_swiopen>:
 8007798:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800779c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8007848 <_swiopen+0xb0>
 80077a0:	b097      	sub	sp, #92	; 0x5c
 80077a2:	4607      	mov	r7, r0
 80077a4:	460e      	mov	r6, r1
 80077a6:	2500      	movs	r5, #0
 80077a8:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 80077ac:	1c61      	adds	r1, r4, #1
 80077ae:	d037      	beq.n	8007820 <_swiopen+0x88>
 80077b0:	3501      	adds	r5, #1
 80077b2:	2d14      	cmp	r5, #20
 80077b4:	d1f8      	bne.n	80077a8 <_swiopen+0x10>
 80077b6:	f000 fc2d 	bl	8008014 <__errno>
 80077ba:	2318      	movs	r3, #24
 80077bc:	6003      	str	r3, [r0, #0]
 80077be:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80077c2:	e03d      	b.n	8007840 <_swiopen+0xa8>
 80077c4:	f3c6 4400 	ubfx	r4, r6, #16, #1
 80077c8:	f240 6301 	movw	r3, #1537	; 0x601
 80077cc:	07b2      	lsls	r2, r6, #30
 80077ce:	bf48      	it	mi
 80077d0:	f044 0402 	orrmi.w	r4, r4, #2
 80077d4:	421e      	tst	r6, r3
 80077d6:	bf18      	it	ne
 80077d8:	f044 0404 	orrne.w	r4, r4, #4
 80077dc:	0733      	lsls	r3, r6, #28
 80077de:	bf48      	it	mi
 80077e0:	f024 0404 	bicmi.w	r4, r4, #4
 80077e4:	4638      	mov	r0, r7
 80077e6:	bf48      	it	mi
 80077e8:	f044 0408 	orrmi.w	r4, r4, #8
 80077ec:	9700      	str	r7, [sp, #0]
 80077ee:	f7f8 fd27 	bl	8000240 <strlen>
 80077f2:	e9cd 4001 	strd	r4, r0, [sp, #4]
 80077f6:	2401      	movs	r4, #1
 80077f8:	4620      	mov	r0, r4
 80077fa:	4649      	mov	r1, r9
 80077fc:	beab      	bkpt	0x00ab
 80077fe:	4604      	mov	r4, r0
 8007800:	2c00      	cmp	r4, #0
 8007802:	db08      	blt.n	8007816 <_swiopen+0x7e>
 8007804:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8007808:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 800780c:	2300      	movs	r3, #0
 800780e:	f8c8 3004 	str.w	r3, [r8, #4]
 8007812:	462c      	mov	r4, r5
 8007814:	e014      	b.n	8007840 <_swiopen+0xa8>
 8007816:	4620      	mov	r0, r4
 8007818:	f7ff fe8e 	bl	8007538 <error>
 800781c:	4604      	mov	r4, r0
 800781e:	e00f      	b.n	8007840 <_swiopen+0xa8>
 8007820:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8007824:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8007828:	46e9      	mov	r9, sp
 800782a:	d1cb      	bne.n	80077c4 <_swiopen+0x2c>
 800782c:	4649      	mov	r1, r9
 800782e:	4638      	mov	r0, r7
 8007830:	f7ff ff95 	bl	800775e <_stat>
 8007834:	3001      	adds	r0, #1
 8007836:	d0c5      	beq.n	80077c4 <_swiopen+0x2c>
 8007838:	f000 fbec 	bl	8008014 <__errno>
 800783c:	2311      	movs	r3, #17
 800783e:	6003      	str	r3, [r0, #0]
 8007840:	4620      	mov	r0, r4
 8007842:	b017      	add	sp, #92	; 0x5c
 8007844:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007848:	20000730 	.word	0x20000730

0800784c <_get_semihosting_exts>:
 800784c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007850:	4606      	mov	r6, r0
 8007852:	460f      	mov	r7, r1
 8007854:	482a      	ldr	r0, [pc, #168]	; (8007900 <_get_semihosting_exts+0xb4>)
 8007856:	2100      	movs	r1, #0
 8007858:	4615      	mov	r5, r2
 800785a:	f7ff ff9d 	bl	8007798 <_swiopen>
 800785e:	462a      	mov	r2, r5
 8007860:	4604      	mov	r4, r0
 8007862:	2100      	movs	r1, #0
 8007864:	4630      	mov	r0, r6
 8007866:	f000 fb87 	bl	8007f78 <memset>
 800786a:	1c63      	adds	r3, r4, #1
 800786c:	d016      	beq.n	800789c <_get_semihosting_exts+0x50>
 800786e:	4620      	mov	r0, r4
 8007870:	f7ff fe48 	bl	8007504 <findslot>
 8007874:	f04f 080c 	mov.w	r8, #12
 8007878:	4681      	mov	r9, r0
 800787a:	4640      	mov	r0, r8
 800787c:	4649      	mov	r1, r9
 800787e:	beab      	bkpt	0x00ab
 8007880:	4680      	mov	r8, r0
 8007882:	4640      	mov	r0, r8
 8007884:	f7ff fe66 	bl	8007554 <checkerror>
 8007888:	2803      	cmp	r0, #3
 800788a:	dd02      	ble.n	8007892 <_get_semihosting_exts+0x46>
 800788c:	1ec3      	subs	r3, r0, #3
 800788e:	42ab      	cmp	r3, r5
 8007890:	dc08      	bgt.n	80078a4 <_get_semihosting_exts+0x58>
 8007892:	4620      	mov	r0, r4
 8007894:	f7ff ff0e 	bl	80076b4 <_close>
 8007898:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800789c:	4620      	mov	r0, r4
 800789e:	b003      	add	sp, #12
 80078a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80078a4:	2204      	movs	r2, #4
 80078a6:	eb0d 0102 	add.w	r1, sp, r2
 80078aa:	4620      	mov	r0, r4
 80078ac:	f7ff fe67 	bl	800757e <_read>
 80078b0:	2803      	cmp	r0, #3
 80078b2:	ddee      	ble.n	8007892 <_get_semihosting_exts+0x46>
 80078b4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80078b8:	2b53      	cmp	r3, #83	; 0x53
 80078ba:	d1ea      	bne.n	8007892 <_get_semihosting_exts+0x46>
 80078bc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80078c0:	2b48      	cmp	r3, #72	; 0x48
 80078c2:	d1e6      	bne.n	8007892 <_get_semihosting_exts+0x46>
 80078c4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80078c8:	2b46      	cmp	r3, #70	; 0x46
 80078ca:	d1e2      	bne.n	8007892 <_get_semihosting_exts+0x46>
 80078cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80078d0:	2b42      	cmp	r3, #66	; 0x42
 80078d2:	d1de      	bne.n	8007892 <_get_semihosting_exts+0x46>
 80078d4:	2201      	movs	r2, #1
 80078d6:	4639      	mov	r1, r7
 80078d8:	4620      	mov	r0, r4
 80078da:	f7ff fe6c 	bl	80075b6 <_swilseek>
 80078de:	2800      	cmp	r0, #0
 80078e0:	dbd7      	blt.n	8007892 <_get_semihosting_exts+0x46>
 80078e2:	462a      	mov	r2, r5
 80078e4:	4631      	mov	r1, r6
 80078e6:	4620      	mov	r0, r4
 80078e8:	f7ff fe49 	bl	800757e <_read>
 80078ec:	4605      	mov	r5, r0
 80078ee:	4620      	mov	r0, r4
 80078f0:	f7ff fee0 	bl	80076b4 <_close>
 80078f4:	4628      	mov	r0, r5
 80078f6:	f7ff fe2d 	bl	8007554 <checkerror>
 80078fa:	4604      	mov	r4, r0
 80078fc:	e7ce      	b.n	800789c <_get_semihosting_exts+0x50>
 80078fe:	bf00      	nop
 8007900:	08008b48 	.word	0x08008b48

08007904 <initialise_semihosting_exts>:
 8007904:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007906:	4d0a      	ldr	r5, [pc, #40]	; (8007930 <initialise_semihosting_exts+0x2c>)
 8007908:	4c0a      	ldr	r4, [pc, #40]	; (8007934 <initialise_semihosting_exts+0x30>)
 800790a:	2100      	movs	r1, #0
 800790c:	2201      	movs	r2, #1
 800790e:	a801      	add	r0, sp, #4
 8007910:	6029      	str	r1, [r5, #0]
 8007912:	6022      	str	r2, [r4, #0]
 8007914:	f7ff ff9a 	bl	800784c <_get_semihosting_exts>
 8007918:	2800      	cmp	r0, #0
 800791a:	dd07      	ble.n	800792c <initialise_semihosting_exts+0x28>
 800791c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007920:	f003 0201 	and.w	r2, r3, #1
 8007924:	f003 0302 	and.w	r3, r3, #2
 8007928:	602a      	str	r2, [r5, #0]
 800792a:	6023      	str	r3, [r4, #0]
 800792c:	b003      	add	sp, #12
 800792e:	bd30      	pop	{r4, r5, pc}
 8007930:	20000010 	.word	0x20000010
 8007934:	20000014 	.word	0x20000014

08007938 <_has_ext_stdout_stderr>:
 8007938:	b510      	push	{r4, lr}
 800793a:	4c04      	ldr	r4, [pc, #16]	; (800794c <_has_ext_stdout_stderr+0x14>)
 800793c:	6823      	ldr	r3, [r4, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	da01      	bge.n	8007946 <_has_ext_stdout_stderr+0xe>
 8007942:	f7ff ffdf 	bl	8007904 <initialise_semihosting_exts>
 8007946:	6820      	ldr	r0, [r4, #0]
 8007948:	bd10      	pop	{r4, pc}
 800794a:	bf00      	nop
 800794c:	20000014 	.word	0x20000014

08007950 <initialise_monitor_handles>:
 8007950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007954:	b085      	sub	sp, #20
 8007956:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8007a08 <initialise_monitor_handles+0xb8>
 800795a:	f8cd 9004 	str.w	r9, [sp, #4]
 800795e:	2303      	movs	r3, #3
 8007960:	2400      	movs	r4, #0
 8007962:	9303      	str	r3, [sp, #12]
 8007964:	af01      	add	r7, sp, #4
 8007966:	9402      	str	r4, [sp, #8]
 8007968:	2501      	movs	r5, #1
 800796a:	4628      	mov	r0, r5
 800796c:	4639      	mov	r1, r7
 800796e:	beab      	bkpt	0x00ab
 8007970:	4605      	mov	r5, r0
 8007972:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8007a0c <initialise_monitor_handles+0xbc>
 8007976:	4623      	mov	r3, r4
 8007978:	4c20      	ldr	r4, [pc, #128]	; (80079fc <initialise_monitor_handles+0xac>)
 800797a:	f8c8 5000 	str.w	r5, [r8]
 800797e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007982:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8007986:	3301      	adds	r3, #1
 8007988:	2b14      	cmp	r3, #20
 800798a:	d1fa      	bne.n	8007982 <initialise_monitor_handles+0x32>
 800798c:	f7ff ffd4 	bl	8007938 <_has_ext_stdout_stderr>
 8007990:	4d1b      	ldr	r5, [pc, #108]	; (8007a00 <initialise_monitor_handles+0xb0>)
 8007992:	b1d0      	cbz	r0, 80079ca <initialise_monitor_handles+0x7a>
 8007994:	f04f 0a03 	mov.w	sl, #3
 8007998:	2304      	movs	r3, #4
 800799a:	f8cd 9004 	str.w	r9, [sp, #4]
 800799e:	2601      	movs	r6, #1
 80079a0:	f8cd a00c 	str.w	sl, [sp, #12]
 80079a4:	9302      	str	r3, [sp, #8]
 80079a6:	4630      	mov	r0, r6
 80079a8:	4639      	mov	r1, r7
 80079aa:	beab      	bkpt	0x00ab
 80079ac:	4683      	mov	fp, r0
 80079ae:	4b15      	ldr	r3, [pc, #84]	; (8007a04 <initialise_monitor_handles+0xb4>)
 80079b0:	f8cd 9004 	str.w	r9, [sp, #4]
 80079b4:	f8c3 b000 	str.w	fp, [r3]
 80079b8:	2308      	movs	r3, #8
 80079ba:	f8cd a00c 	str.w	sl, [sp, #12]
 80079be:	9302      	str	r3, [sp, #8]
 80079c0:	4630      	mov	r0, r6
 80079c2:	4639      	mov	r1, r7
 80079c4:	beab      	bkpt	0x00ab
 80079c6:	4606      	mov	r6, r0
 80079c8:	602e      	str	r6, [r5, #0]
 80079ca:	682b      	ldr	r3, [r5, #0]
 80079cc:	3301      	adds	r3, #1
 80079ce:	bf02      	ittt	eq
 80079d0:	4b0c      	ldreq	r3, [pc, #48]	; (8007a04 <initialise_monitor_handles+0xb4>)
 80079d2:	681b      	ldreq	r3, [r3, #0]
 80079d4:	602b      	streq	r3, [r5, #0]
 80079d6:	2600      	movs	r6, #0
 80079d8:	f8d8 3000 	ldr.w	r3, [r8]
 80079dc:	6023      	str	r3, [r4, #0]
 80079de:	6066      	str	r6, [r4, #4]
 80079e0:	f7ff ffaa 	bl	8007938 <_has_ext_stdout_stderr>
 80079e4:	b130      	cbz	r0, 80079f4 <initialise_monitor_handles+0xa4>
 80079e6:	4b07      	ldr	r3, [pc, #28]	; (8007a04 <initialise_monitor_handles+0xb4>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80079ee:	682b      	ldr	r3, [r5, #0]
 80079f0:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80079f4:	b005      	add	sp, #20
 80079f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079fa:	bf00      	nop
 80079fc:	20000730 	.word	0x20000730
 8007a00:	20000724 	.word	0x20000724
 8007a04:	2000072c 	.word	0x2000072c
 8007a08:	08008b5e 	.word	0x08008b5e
 8007a0c:	20000728 	.word	0x20000728

08007a10 <_isatty>:
 8007a10:	b570      	push	{r4, r5, r6, lr}
 8007a12:	f7ff fd77 	bl	8007504 <findslot>
 8007a16:	2509      	movs	r5, #9
 8007a18:	4604      	mov	r4, r0
 8007a1a:	b920      	cbnz	r0, 8007a26 <_isatty+0x16>
 8007a1c:	f000 fafa 	bl	8008014 <__errno>
 8007a20:	6005      	str	r5, [r0, #0]
 8007a22:	4620      	mov	r0, r4
 8007a24:	bd70      	pop	{r4, r5, r6, pc}
 8007a26:	4628      	mov	r0, r5
 8007a28:	4621      	mov	r1, r4
 8007a2a:	beab      	bkpt	0x00ab
 8007a2c:	4604      	mov	r4, r0
 8007a2e:	2c01      	cmp	r4, #1
 8007a30:	d0f7      	beq.n	8007a22 <_isatty+0x12>
 8007a32:	f000 faef 	bl	8008014 <__errno>
 8007a36:	2400      	movs	r4, #0
 8007a38:	4605      	mov	r5, r0
 8007a3a:	2613      	movs	r6, #19
 8007a3c:	4630      	mov	r0, r6
 8007a3e:	4621      	mov	r1, r4
 8007a40:	beab      	bkpt	0x00ab
 8007a42:	4606      	mov	r6, r0
 8007a44:	602e      	str	r6, [r5, #0]
 8007a46:	e7ec      	b.n	8007a22 <_isatty+0x12>

08007a48 <atoi>:
 8007a48:	220a      	movs	r2, #10
 8007a4a:	2100      	movs	r1, #0
 8007a4c:	f000 b882 	b.w	8007b54 <strtol>

08007a50 <_strtol_l.constprop.0>:
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a56:	d001      	beq.n	8007a5c <_strtol_l.constprop.0+0xc>
 8007a58:	2b24      	cmp	r3, #36	; 0x24
 8007a5a:	d906      	bls.n	8007a6a <_strtol_l.constprop.0+0x1a>
 8007a5c:	f000 fada 	bl	8008014 <__errno>
 8007a60:	2316      	movs	r3, #22
 8007a62:	6003      	str	r3, [r0, #0]
 8007a64:	2000      	movs	r0, #0
 8007a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a6a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007b50 <_strtol_l.constprop.0+0x100>
 8007a6e:	460d      	mov	r5, r1
 8007a70:	462e      	mov	r6, r5
 8007a72:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007a76:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8007a7a:	f017 0708 	ands.w	r7, r7, #8
 8007a7e:	d1f7      	bne.n	8007a70 <_strtol_l.constprop.0+0x20>
 8007a80:	2c2d      	cmp	r4, #45	; 0x2d
 8007a82:	d132      	bne.n	8007aea <_strtol_l.constprop.0+0x9a>
 8007a84:	782c      	ldrb	r4, [r5, #0]
 8007a86:	2701      	movs	r7, #1
 8007a88:	1cb5      	adds	r5, r6, #2
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d05b      	beq.n	8007b46 <_strtol_l.constprop.0+0xf6>
 8007a8e:	2b10      	cmp	r3, #16
 8007a90:	d109      	bne.n	8007aa6 <_strtol_l.constprop.0+0x56>
 8007a92:	2c30      	cmp	r4, #48	; 0x30
 8007a94:	d107      	bne.n	8007aa6 <_strtol_l.constprop.0+0x56>
 8007a96:	782c      	ldrb	r4, [r5, #0]
 8007a98:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007a9c:	2c58      	cmp	r4, #88	; 0x58
 8007a9e:	d14d      	bne.n	8007b3c <_strtol_l.constprop.0+0xec>
 8007aa0:	786c      	ldrb	r4, [r5, #1]
 8007aa2:	2310      	movs	r3, #16
 8007aa4:	3502      	adds	r5, #2
 8007aa6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007aaa:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007aae:	f04f 0e00 	mov.w	lr, #0
 8007ab2:	fbb8 f9f3 	udiv	r9, r8, r3
 8007ab6:	4676      	mov	r6, lr
 8007ab8:	fb03 8a19 	mls	sl, r3, r9, r8
 8007abc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007ac0:	f1bc 0f09 	cmp.w	ip, #9
 8007ac4:	d816      	bhi.n	8007af4 <_strtol_l.constprop.0+0xa4>
 8007ac6:	4664      	mov	r4, ip
 8007ac8:	42a3      	cmp	r3, r4
 8007aca:	dd24      	ble.n	8007b16 <_strtol_l.constprop.0+0xc6>
 8007acc:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8007ad0:	d008      	beq.n	8007ae4 <_strtol_l.constprop.0+0x94>
 8007ad2:	45b1      	cmp	r9, r6
 8007ad4:	d31c      	bcc.n	8007b10 <_strtol_l.constprop.0+0xc0>
 8007ad6:	d101      	bne.n	8007adc <_strtol_l.constprop.0+0x8c>
 8007ad8:	45a2      	cmp	sl, r4
 8007ada:	db19      	blt.n	8007b10 <_strtol_l.constprop.0+0xc0>
 8007adc:	fb06 4603 	mla	r6, r6, r3, r4
 8007ae0:	f04f 0e01 	mov.w	lr, #1
 8007ae4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ae8:	e7e8      	b.n	8007abc <_strtol_l.constprop.0+0x6c>
 8007aea:	2c2b      	cmp	r4, #43	; 0x2b
 8007aec:	bf04      	itt	eq
 8007aee:	782c      	ldrbeq	r4, [r5, #0]
 8007af0:	1cb5      	addeq	r5, r6, #2
 8007af2:	e7ca      	b.n	8007a8a <_strtol_l.constprop.0+0x3a>
 8007af4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007af8:	f1bc 0f19 	cmp.w	ip, #25
 8007afc:	d801      	bhi.n	8007b02 <_strtol_l.constprop.0+0xb2>
 8007afe:	3c37      	subs	r4, #55	; 0x37
 8007b00:	e7e2      	b.n	8007ac8 <_strtol_l.constprop.0+0x78>
 8007b02:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007b06:	f1bc 0f19 	cmp.w	ip, #25
 8007b0a:	d804      	bhi.n	8007b16 <_strtol_l.constprop.0+0xc6>
 8007b0c:	3c57      	subs	r4, #87	; 0x57
 8007b0e:	e7db      	b.n	8007ac8 <_strtol_l.constprop.0+0x78>
 8007b10:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8007b14:	e7e6      	b.n	8007ae4 <_strtol_l.constprop.0+0x94>
 8007b16:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8007b1a:	d105      	bne.n	8007b28 <_strtol_l.constprop.0+0xd8>
 8007b1c:	2322      	movs	r3, #34	; 0x22
 8007b1e:	6003      	str	r3, [r0, #0]
 8007b20:	4646      	mov	r6, r8
 8007b22:	b942      	cbnz	r2, 8007b36 <_strtol_l.constprop.0+0xe6>
 8007b24:	4630      	mov	r0, r6
 8007b26:	e79e      	b.n	8007a66 <_strtol_l.constprop.0+0x16>
 8007b28:	b107      	cbz	r7, 8007b2c <_strtol_l.constprop.0+0xdc>
 8007b2a:	4276      	negs	r6, r6
 8007b2c:	2a00      	cmp	r2, #0
 8007b2e:	d0f9      	beq.n	8007b24 <_strtol_l.constprop.0+0xd4>
 8007b30:	f1be 0f00 	cmp.w	lr, #0
 8007b34:	d000      	beq.n	8007b38 <_strtol_l.constprop.0+0xe8>
 8007b36:	1e69      	subs	r1, r5, #1
 8007b38:	6011      	str	r1, [r2, #0]
 8007b3a:	e7f3      	b.n	8007b24 <_strtol_l.constprop.0+0xd4>
 8007b3c:	2430      	movs	r4, #48	; 0x30
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d1b1      	bne.n	8007aa6 <_strtol_l.constprop.0+0x56>
 8007b42:	2308      	movs	r3, #8
 8007b44:	e7af      	b.n	8007aa6 <_strtol_l.constprop.0+0x56>
 8007b46:	2c30      	cmp	r4, #48	; 0x30
 8007b48:	d0a5      	beq.n	8007a96 <_strtol_l.constprop.0+0x46>
 8007b4a:	230a      	movs	r3, #10
 8007b4c:	e7ab      	b.n	8007aa6 <_strtol_l.constprop.0+0x56>
 8007b4e:	bf00      	nop
 8007b50:	08008b63 	.word	0x08008b63

08007b54 <strtol>:
 8007b54:	4613      	mov	r3, r2
 8007b56:	460a      	mov	r2, r1
 8007b58:	4601      	mov	r1, r0
 8007b5a:	4802      	ldr	r0, [pc, #8]	; (8007b64 <strtol+0x10>)
 8007b5c:	6800      	ldr	r0, [r0, #0]
 8007b5e:	f7ff bf77 	b.w	8007a50 <_strtol_l.constprop.0>
 8007b62:	bf00      	nop
 8007b64:	20000070 	.word	0x20000070

08007b68 <std>:
 8007b68:	2300      	movs	r3, #0
 8007b6a:	b510      	push	{r4, lr}
 8007b6c:	4604      	mov	r4, r0
 8007b6e:	e9c0 3300 	strd	r3, r3, [r0]
 8007b72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b76:	6083      	str	r3, [r0, #8]
 8007b78:	8181      	strh	r1, [r0, #12]
 8007b7a:	6643      	str	r3, [r0, #100]	; 0x64
 8007b7c:	81c2      	strh	r2, [r0, #14]
 8007b7e:	6183      	str	r3, [r0, #24]
 8007b80:	4619      	mov	r1, r3
 8007b82:	2208      	movs	r2, #8
 8007b84:	305c      	adds	r0, #92	; 0x5c
 8007b86:	f000 f9f7 	bl	8007f78 <memset>
 8007b8a:	4b0d      	ldr	r3, [pc, #52]	; (8007bc0 <std+0x58>)
 8007b8c:	6263      	str	r3, [r4, #36]	; 0x24
 8007b8e:	4b0d      	ldr	r3, [pc, #52]	; (8007bc4 <std+0x5c>)
 8007b90:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b92:	4b0d      	ldr	r3, [pc, #52]	; (8007bc8 <std+0x60>)
 8007b94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b96:	4b0d      	ldr	r3, [pc, #52]	; (8007bcc <std+0x64>)
 8007b98:	6323      	str	r3, [r4, #48]	; 0x30
 8007b9a:	4b0d      	ldr	r3, [pc, #52]	; (8007bd0 <std+0x68>)
 8007b9c:	6224      	str	r4, [r4, #32]
 8007b9e:	429c      	cmp	r4, r3
 8007ba0:	d006      	beq.n	8007bb0 <std+0x48>
 8007ba2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007ba6:	4294      	cmp	r4, r2
 8007ba8:	d002      	beq.n	8007bb0 <std+0x48>
 8007baa:	33d0      	adds	r3, #208	; 0xd0
 8007bac:	429c      	cmp	r4, r3
 8007bae:	d105      	bne.n	8007bbc <std+0x54>
 8007bb0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bb8:	f000 ba56 	b.w	8008068 <__retarget_lock_init_recursive>
 8007bbc:	bd10      	pop	{r4, pc}
 8007bbe:	bf00      	nop
 8007bc0:	08007dc9 	.word	0x08007dc9
 8007bc4:	08007deb 	.word	0x08007deb
 8007bc8:	08007e23 	.word	0x08007e23
 8007bcc:	08007e47 	.word	0x08007e47
 8007bd0:	200007d0 	.word	0x200007d0

08007bd4 <stdio_exit_handler>:
 8007bd4:	4a02      	ldr	r2, [pc, #8]	; (8007be0 <stdio_exit_handler+0xc>)
 8007bd6:	4903      	ldr	r1, [pc, #12]	; (8007be4 <stdio_exit_handler+0x10>)
 8007bd8:	4803      	ldr	r0, [pc, #12]	; (8007be8 <stdio_exit_handler+0x14>)
 8007bda:	f000 b869 	b.w	8007cb0 <_fwalk_sglue>
 8007bde:	bf00      	nop
 8007be0:	20000018 	.word	0x20000018
 8007be4:	08008915 	.word	0x08008915
 8007be8:	20000024 	.word	0x20000024

08007bec <cleanup_stdio>:
 8007bec:	6841      	ldr	r1, [r0, #4]
 8007bee:	4b0c      	ldr	r3, [pc, #48]	; (8007c20 <cleanup_stdio+0x34>)
 8007bf0:	4299      	cmp	r1, r3
 8007bf2:	b510      	push	{r4, lr}
 8007bf4:	4604      	mov	r4, r0
 8007bf6:	d001      	beq.n	8007bfc <cleanup_stdio+0x10>
 8007bf8:	f000 fe8c 	bl	8008914 <_fflush_r>
 8007bfc:	68a1      	ldr	r1, [r4, #8]
 8007bfe:	4b09      	ldr	r3, [pc, #36]	; (8007c24 <cleanup_stdio+0x38>)
 8007c00:	4299      	cmp	r1, r3
 8007c02:	d002      	beq.n	8007c0a <cleanup_stdio+0x1e>
 8007c04:	4620      	mov	r0, r4
 8007c06:	f000 fe85 	bl	8008914 <_fflush_r>
 8007c0a:	68e1      	ldr	r1, [r4, #12]
 8007c0c:	4b06      	ldr	r3, [pc, #24]	; (8007c28 <cleanup_stdio+0x3c>)
 8007c0e:	4299      	cmp	r1, r3
 8007c10:	d004      	beq.n	8007c1c <cleanup_stdio+0x30>
 8007c12:	4620      	mov	r0, r4
 8007c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c18:	f000 be7c 	b.w	8008914 <_fflush_r>
 8007c1c:	bd10      	pop	{r4, pc}
 8007c1e:	bf00      	nop
 8007c20:	200007d0 	.word	0x200007d0
 8007c24:	20000838 	.word	0x20000838
 8007c28:	200008a0 	.word	0x200008a0

08007c2c <global_stdio_init.part.0>:
 8007c2c:	b510      	push	{r4, lr}
 8007c2e:	4b0b      	ldr	r3, [pc, #44]	; (8007c5c <global_stdio_init.part.0+0x30>)
 8007c30:	4c0b      	ldr	r4, [pc, #44]	; (8007c60 <global_stdio_init.part.0+0x34>)
 8007c32:	4a0c      	ldr	r2, [pc, #48]	; (8007c64 <global_stdio_init.part.0+0x38>)
 8007c34:	601a      	str	r2, [r3, #0]
 8007c36:	4620      	mov	r0, r4
 8007c38:	2200      	movs	r2, #0
 8007c3a:	2104      	movs	r1, #4
 8007c3c:	f7ff ff94 	bl	8007b68 <std>
 8007c40:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007c44:	2201      	movs	r2, #1
 8007c46:	2109      	movs	r1, #9
 8007c48:	f7ff ff8e 	bl	8007b68 <std>
 8007c4c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007c50:	2202      	movs	r2, #2
 8007c52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c56:	2112      	movs	r1, #18
 8007c58:	f7ff bf86 	b.w	8007b68 <std>
 8007c5c:	20000908 	.word	0x20000908
 8007c60:	200007d0 	.word	0x200007d0
 8007c64:	08007bd5 	.word	0x08007bd5

08007c68 <__sfp_lock_acquire>:
 8007c68:	4801      	ldr	r0, [pc, #4]	; (8007c70 <__sfp_lock_acquire+0x8>)
 8007c6a:	f000 b9fe 	b.w	800806a <__retarget_lock_acquire_recursive>
 8007c6e:	bf00      	nop
 8007c70:	20000911 	.word	0x20000911

08007c74 <__sfp_lock_release>:
 8007c74:	4801      	ldr	r0, [pc, #4]	; (8007c7c <__sfp_lock_release+0x8>)
 8007c76:	f000 b9f9 	b.w	800806c <__retarget_lock_release_recursive>
 8007c7a:	bf00      	nop
 8007c7c:	20000911 	.word	0x20000911

08007c80 <__sinit>:
 8007c80:	b510      	push	{r4, lr}
 8007c82:	4604      	mov	r4, r0
 8007c84:	f7ff fff0 	bl	8007c68 <__sfp_lock_acquire>
 8007c88:	6a23      	ldr	r3, [r4, #32]
 8007c8a:	b11b      	cbz	r3, 8007c94 <__sinit+0x14>
 8007c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c90:	f7ff bff0 	b.w	8007c74 <__sfp_lock_release>
 8007c94:	4b04      	ldr	r3, [pc, #16]	; (8007ca8 <__sinit+0x28>)
 8007c96:	6223      	str	r3, [r4, #32]
 8007c98:	4b04      	ldr	r3, [pc, #16]	; (8007cac <__sinit+0x2c>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d1f5      	bne.n	8007c8c <__sinit+0xc>
 8007ca0:	f7ff ffc4 	bl	8007c2c <global_stdio_init.part.0>
 8007ca4:	e7f2      	b.n	8007c8c <__sinit+0xc>
 8007ca6:	bf00      	nop
 8007ca8:	08007bed 	.word	0x08007bed
 8007cac:	20000908 	.word	0x20000908

08007cb0 <_fwalk_sglue>:
 8007cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cb4:	4607      	mov	r7, r0
 8007cb6:	4688      	mov	r8, r1
 8007cb8:	4614      	mov	r4, r2
 8007cba:	2600      	movs	r6, #0
 8007cbc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007cc0:	f1b9 0901 	subs.w	r9, r9, #1
 8007cc4:	d505      	bpl.n	8007cd2 <_fwalk_sglue+0x22>
 8007cc6:	6824      	ldr	r4, [r4, #0]
 8007cc8:	2c00      	cmp	r4, #0
 8007cca:	d1f7      	bne.n	8007cbc <_fwalk_sglue+0xc>
 8007ccc:	4630      	mov	r0, r6
 8007cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cd2:	89ab      	ldrh	r3, [r5, #12]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d907      	bls.n	8007ce8 <_fwalk_sglue+0x38>
 8007cd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007cdc:	3301      	adds	r3, #1
 8007cde:	d003      	beq.n	8007ce8 <_fwalk_sglue+0x38>
 8007ce0:	4629      	mov	r1, r5
 8007ce2:	4638      	mov	r0, r7
 8007ce4:	47c0      	blx	r8
 8007ce6:	4306      	orrs	r6, r0
 8007ce8:	3568      	adds	r5, #104	; 0x68
 8007cea:	e7e9      	b.n	8007cc0 <_fwalk_sglue+0x10>

08007cec <iprintf>:
 8007cec:	b40f      	push	{r0, r1, r2, r3}
 8007cee:	b507      	push	{r0, r1, r2, lr}
 8007cf0:	4906      	ldr	r1, [pc, #24]	; (8007d0c <iprintf+0x20>)
 8007cf2:	ab04      	add	r3, sp, #16
 8007cf4:	6808      	ldr	r0, [r1, #0]
 8007cf6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cfa:	6881      	ldr	r1, [r0, #8]
 8007cfc:	9301      	str	r3, [sp, #4]
 8007cfe:	f000 fad9 	bl	80082b4 <_vfiprintf_r>
 8007d02:	b003      	add	sp, #12
 8007d04:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d08:	b004      	add	sp, #16
 8007d0a:	4770      	bx	lr
 8007d0c:	20000070 	.word	0x20000070

08007d10 <_puts_r>:
 8007d10:	6a03      	ldr	r3, [r0, #32]
 8007d12:	b570      	push	{r4, r5, r6, lr}
 8007d14:	6884      	ldr	r4, [r0, #8]
 8007d16:	4605      	mov	r5, r0
 8007d18:	460e      	mov	r6, r1
 8007d1a:	b90b      	cbnz	r3, 8007d20 <_puts_r+0x10>
 8007d1c:	f7ff ffb0 	bl	8007c80 <__sinit>
 8007d20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d22:	07db      	lsls	r3, r3, #31
 8007d24:	d405      	bmi.n	8007d32 <_puts_r+0x22>
 8007d26:	89a3      	ldrh	r3, [r4, #12]
 8007d28:	0598      	lsls	r0, r3, #22
 8007d2a:	d402      	bmi.n	8007d32 <_puts_r+0x22>
 8007d2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d2e:	f000 f99c 	bl	800806a <__retarget_lock_acquire_recursive>
 8007d32:	89a3      	ldrh	r3, [r4, #12]
 8007d34:	0719      	lsls	r1, r3, #28
 8007d36:	d513      	bpl.n	8007d60 <_puts_r+0x50>
 8007d38:	6923      	ldr	r3, [r4, #16]
 8007d3a:	b18b      	cbz	r3, 8007d60 <_puts_r+0x50>
 8007d3c:	3e01      	subs	r6, #1
 8007d3e:	68a3      	ldr	r3, [r4, #8]
 8007d40:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007d44:	3b01      	subs	r3, #1
 8007d46:	60a3      	str	r3, [r4, #8]
 8007d48:	b9e9      	cbnz	r1, 8007d86 <_puts_r+0x76>
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	da2e      	bge.n	8007dac <_puts_r+0x9c>
 8007d4e:	4622      	mov	r2, r4
 8007d50:	210a      	movs	r1, #10
 8007d52:	4628      	mov	r0, r5
 8007d54:	f000 f87b 	bl	8007e4e <__swbuf_r>
 8007d58:	3001      	adds	r0, #1
 8007d5a:	d007      	beq.n	8007d6c <_puts_r+0x5c>
 8007d5c:	250a      	movs	r5, #10
 8007d5e:	e007      	b.n	8007d70 <_puts_r+0x60>
 8007d60:	4621      	mov	r1, r4
 8007d62:	4628      	mov	r0, r5
 8007d64:	f000 f8b0 	bl	8007ec8 <__swsetup_r>
 8007d68:	2800      	cmp	r0, #0
 8007d6a:	d0e7      	beq.n	8007d3c <_puts_r+0x2c>
 8007d6c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007d70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d72:	07da      	lsls	r2, r3, #31
 8007d74:	d405      	bmi.n	8007d82 <_puts_r+0x72>
 8007d76:	89a3      	ldrh	r3, [r4, #12]
 8007d78:	059b      	lsls	r3, r3, #22
 8007d7a:	d402      	bmi.n	8007d82 <_puts_r+0x72>
 8007d7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d7e:	f000 f975 	bl	800806c <__retarget_lock_release_recursive>
 8007d82:	4628      	mov	r0, r5
 8007d84:	bd70      	pop	{r4, r5, r6, pc}
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	da04      	bge.n	8007d94 <_puts_r+0x84>
 8007d8a:	69a2      	ldr	r2, [r4, #24]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	dc06      	bgt.n	8007d9e <_puts_r+0x8e>
 8007d90:	290a      	cmp	r1, #10
 8007d92:	d004      	beq.n	8007d9e <_puts_r+0x8e>
 8007d94:	6823      	ldr	r3, [r4, #0]
 8007d96:	1c5a      	adds	r2, r3, #1
 8007d98:	6022      	str	r2, [r4, #0]
 8007d9a:	7019      	strb	r1, [r3, #0]
 8007d9c:	e7cf      	b.n	8007d3e <_puts_r+0x2e>
 8007d9e:	4622      	mov	r2, r4
 8007da0:	4628      	mov	r0, r5
 8007da2:	f000 f854 	bl	8007e4e <__swbuf_r>
 8007da6:	3001      	adds	r0, #1
 8007da8:	d1c9      	bne.n	8007d3e <_puts_r+0x2e>
 8007daa:	e7df      	b.n	8007d6c <_puts_r+0x5c>
 8007dac:	6823      	ldr	r3, [r4, #0]
 8007dae:	250a      	movs	r5, #10
 8007db0:	1c5a      	adds	r2, r3, #1
 8007db2:	6022      	str	r2, [r4, #0]
 8007db4:	701d      	strb	r5, [r3, #0]
 8007db6:	e7db      	b.n	8007d70 <_puts_r+0x60>

08007db8 <puts>:
 8007db8:	4b02      	ldr	r3, [pc, #8]	; (8007dc4 <puts+0xc>)
 8007dba:	4601      	mov	r1, r0
 8007dbc:	6818      	ldr	r0, [r3, #0]
 8007dbe:	f7ff bfa7 	b.w	8007d10 <_puts_r>
 8007dc2:	bf00      	nop
 8007dc4:	20000070 	.word	0x20000070

08007dc8 <__sread>:
 8007dc8:	b510      	push	{r4, lr}
 8007dca:	460c      	mov	r4, r1
 8007dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dd0:	f000 f8fc 	bl	8007fcc <_read_r>
 8007dd4:	2800      	cmp	r0, #0
 8007dd6:	bfab      	itete	ge
 8007dd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007dda:	89a3      	ldrhlt	r3, [r4, #12]
 8007ddc:	181b      	addge	r3, r3, r0
 8007dde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007de2:	bfac      	ite	ge
 8007de4:	6563      	strge	r3, [r4, #84]	; 0x54
 8007de6:	81a3      	strhlt	r3, [r4, #12]
 8007de8:	bd10      	pop	{r4, pc}

08007dea <__swrite>:
 8007dea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dee:	461f      	mov	r7, r3
 8007df0:	898b      	ldrh	r3, [r1, #12]
 8007df2:	05db      	lsls	r3, r3, #23
 8007df4:	4605      	mov	r5, r0
 8007df6:	460c      	mov	r4, r1
 8007df8:	4616      	mov	r6, r2
 8007dfa:	d505      	bpl.n	8007e08 <__swrite+0x1e>
 8007dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e00:	2302      	movs	r3, #2
 8007e02:	2200      	movs	r2, #0
 8007e04:	f000 f8d0 	bl	8007fa8 <_lseek_r>
 8007e08:	89a3      	ldrh	r3, [r4, #12]
 8007e0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e12:	81a3      	strh	r3, [r4, #12]
 8007e14:	4632      	mov	r2, r6
 8007e16:	463b      	mov	r3, r7
 8007e18:	4628      	mov	r0, r5
 8007e1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e1e:	f000 b8e7 	b.w	8007ff0 <_write_r>

08007e22 <__sseek>:
 8007e22:	b510      	push	{r4, lr}
 8007e24:	460c      	mov	r4, r1
 8007e26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e2a:	f000 f8bd 	bl	8007fa8 <_lseek_r>
 8007e2e:	1c43      	adds	r3, r0, #1
 8007e30:	89a3      	ldrh	r3, [r4, #12]
 8007e32:	bf15      	itete	ne
 8007e34:	6560      	strne	r0, [r4, #84]	; 0x54
 8007e36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007e3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007e3e:	81a3      	strheq	r3, [r4, #12]
 8007e40:	bf18      	it	ne
 8007e42:	81a3      	strhne	r3, [r4, #12]
 8007e44:	bd10      	pop	{r4, pc}

08007e46 <__sclose>:
 8007e46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e4a:	f000 b89d 	b.w	8007f88 <_close_r>

08007e4e <__swbuf_r>:
 8007e4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e50:	460e      	mov	r6, r1
 8007e52:	4614      	mov	r4, r2
 8007e54:	4605      	mov	r5, r0
 8007e56:	b118      	cbz	r0, 8007e60 <__swbuf_r+0x12>
 8007e58:	6a03      	ldr	r3, [r0, #32]
 8007e5a:	b90b      	cbnz	r3, 8007e60 <__swbuf_r+0x12>
 8007e5c:	f7ff ff10 	bl	8007c80 <__sinit>
 8007e60:	69a3      	ldr	r3, [r4, #24]
 8007e62:	60a3      	str	r3, [r4, #8]
 8007e64:	89a3      	ldrh	r3, [r4, #12]
 8007e66:	071a      	lsls	r2, r3, #28
 8007e68:	d525      	bpl.n	8007eb6 <__swbuf_r+0x68>
 8007e6a:	6923      	ldr	r3, [r4, #16]
 8007e6c:	b31b      	cbz	r3, 8007eb6 <__swbuf_r+0x68>
 8007e6e:	6823      	ldr	r3, [r4, #0]
 8007e70:	6922      	ldr	r2, [r4, #16]
 8007e72:	1a98      	subs	r0, r3, r2
 8007e74:	6963      	ldr	r3, [r4, #20]
 8007e76:	b2f6      	uxtb	r6, r6
 8007e78:	4283      	cmp	r3, r0
 8007e7a:	4637      	mov	r7, r6
 8007e7c:	dc04      	bgt.n	8007e88 <__swbuf_r+0x3a>
 8007e7e:	4621      	mov	r1, r4
 8007e80:	4628      	mov	r0, r5
 8007e82:	f000 fd47 	bl	8008914 <_fflush_r>
 8007e86:	b9e0      	cbnz	r0, 8007ec2 <__swbuf_r+0x74>
 8007e88:	68a3      	ldr	r3, [r4, #8]
 8007e8a:	3b01      	subs	r3, #1
 8007e8c:	60a3      	str	r3, [r4, #8]
 8007e8e:	6823      	ldr	r3, [r4, #0]
 8007e90:	1c5a      	adds	r2, r3, #1
 8007e92:	6022      	str	r2, [r4, #0]
 8007e94:	701e      	strb	r6, [r3, #0]
 8007e96:	6962      	ldr	r2, [r4, #20]
 8007e98:	1c43      	adds	r3, r0, #1
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d004      	beq.n	8007ea8 <__swbuf_r+0x5a>
 8007e9e:	89a3      	ldrh	r3, [r4, #12]
 8007ea0:	07db      	lsls	r3, r3, #31
 8007ea2:	d506      	bpl.n	8007eb2 <__swbuf_r+0x64>
 8007ea4:	2e0a      	cmp	r6, #10
 8007ea6:	d104      	bne.n	8007eb2 <__swbuf_r+0x64>
 8007ea8:	4621      	mov	r1, r4
 8007eaa:	4628      	mov	r0, r5
 8007eac:	f000 fd32 	bl	8008914 <_fflush_r>
 8007eb0:	b938      	cbnz	r0, 8007ec2 <__swbuf_r+0x74>
 8007eb2:	4638      	mov	r0, r7
 8007eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007eb6:	4621      	mov	r1, r4
 8007eb8:	4628      	mov	r0, r5
 8007eba:	f000 f805 	bl	8007ec8 <__swsetup_r>
 8007ebe:	2800      	cmp	r0, #0
 8007ec0:	d0d5      	beq.n	8007e6e <__swbuf_r+0x20>
 8007ec2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007ec6:	e7f4      	b.n	8007eb2 <__swbuf_r+0x64>

08007ec8 <__swsetup_r>:
 8007ec8:	b538      	push	{r3, r4, r5, lr}
 8007eca:	4b2a      	ldr	r3, [pc, #168]	; (8007f74 <__swsetup_r+0xac>)
 8007ecc:	4605      	mov	r5, r0
 8007ece:	6818      	ldr	r0, [r3, #0]
 8007ed0:	460c      	mov	r4, r1
 8007ed2:	b118      	cbz	r0, 8007edc <__swsetup_r+0x14>
 8007ed4:	6a03      	ldr	r3, [r0, #32]
 8007ed6:	b90b      	cbnz	r3, 8007edc <__swsetup_r+0x14>
 8007ed8:	f7ff fed2 	bl	8007c80 <__sinit>
 8007edc:	89a3      	ldrh	r3, [r4, #12]
 8007ede:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ee2:	0718      	lsls	r0, r3, #28
 8007ee4:	d422      	bmi.n	8007f2c <__swsetup_r+0x64>
 8007ee6:	06d9      	lsls	r1, r3, #27
 8007ee8:	d407      	bmi.n	8007efa <__swsetup_r+0x32>
 8007eea:	2309      	movs	r3, #9
 8007eec:	602b      	str	r3, [r5, #0]
 8007eee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007ef2:	81a3      	strh	r3, [r4, #12]
 8007ef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ef8:	e034      	b.n	8007f64 <__swsetup_r+0x9c>
 8007efa:	0758      	lsls	r0, r3, #29
 8007efc:	d512      	bpl.n	8007f24 <__swsetup_r+0x5c>
 8007efe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f00:	b141      	cbz	r1, 8007f14 <__swsetup_r+0x4c>
 8007f02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f06:	4299      	cmp	r1, r3
 8007f08:	d002      	beq.n	8007f10 <__swsetup_r+0x48>
 8007f0a:	4628      	mov	r0, r5
 8007f0c:	f000 f8b0 	bl	8008070 <_free_r>
 8007f10:	2300      	movs	r3, #0
 8007f12:	6363      	str	r3, [r4, #52]	; 0x34
 8007f14:	89a3      	ldrh	r3, [r4, #12]
 8007f16:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007f1a:	81a3      	strh	r3, [r4, #12]
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	6063      	str	r3, [r4, #4]
 8007f20:	6923      	ldr	r3, [r4, #16]
 8007f22:	6023      	str	r3, [r4, #0]
 8007f24:	89a3      	ldrh	r3, [r4, #12]
 8007f26:	f043 0308 	orr.w	r3, r3, #8
 8007f2a:	81a3      	strh	r3, [r4, #12]
 8007f2c:	6923      	ldr	r3, [r4, #16]
 8007f2e:	b94b      	cbnz	r3, 8007f44 <__swsetup_r+0x7c>
 8007f30:	89a3      	ldrh	r3, [r4, #12]
 8007f32:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007f36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f3a:	d003      	beq.n	8007f44 <__swsetup_r+0x7c>
 8007f3c:	4621      	mov	r1, r4
 8007f3e:	4628      	mov	r0, r5
 8007f40:	f000 fd36 	bl	80089b0 <__smakebuf_r>
 8007f44:	89a0      	ldrh	r0, [r4, #12]
 8007f46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f4a:	f010 0301 	ands.w	r3, r0, #1
 8007f4e:	d00a      	beq.n	8007f66 <__swsetup_r+0x9e>
 8007f50:	2300      	movs	r3, #0
 8007f52:	60a3      	str	r3, [r4, #8]
 8007f54:	6963      	ldr	r3, [r4, #20]
 8007f56:	425b      	negs	r3, r3
 8007f58:	61a3      	str	r3, [r4, #24]
 8007f5a:	6923      	ldr	r3, [r4, #16]
 8007f5c:	b943      	cbnz	r3, 8007f70 <__swsetup_r+0xa8>
 8007f5e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007f62:	d1c4      	bne.n	8007eee <__swsetup_r+0x26>
 8007f64:	bd38      	pop	{r3, r4, r5, pc}
 8007f66:	0781      	lsls	r1, r0, #30
 8007f68:	bf58      	it	pl
 8007f6a:	6963      	ldrpl	r3, [r4, #20]
 8007f6c:	60a3      	str	r3, [r4, #8]
 8007f6e:	e7f4      	b.n	8007f5a <__swsetup_r+0x92>
 8007f70:	2000      	movs	r0, #0
 8007f72:	e7f7      	b.n	8007f64 <__swsetup_r+0x9c>
 8007f74:	20000070 	.word	0x20000070

08007f78 <memset>:
 8007f78:	4402      	add	r2, r0
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d100      	bne.n	8007f82 <memset+0xa>
 8007f80:	4770      	bx	lr
 8007f82:	f803 1b01 	strb.w	r1, [r3], #1
 8007f86:	e7f9      	b.n	8007f7c <memset+0x4>

08007f88 <_close_r>:
 8007f88:	b538      	push	{r3, r4, r5, lr}
 8007f8a:	4d06      	ldr	r5, [pc, #24]	; (8007fa4 <_close_r+0x1c>)
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	4604      	mov	r4, r0
 8007f90:	4608      	mov	r0, r1
 8007f92:	602b      	str	r3, [r5, #0]
 8007f94:	f7ff fb8e 	bl	80076b4 <_close>
 8007f98:	1c43      	adds	r3, r0, #1
 8007f9a:	d102      	bne.n	8007fa2 <_close_r+0x1a>
 8007f9c:	682b      	ldr	r3, [r5, #0]
 8007f9e:	b103      	cbz	r3, 8007fa2 <_close_r+0x1a>
 8007fa0:	6023      	str	r3, [r4, #0]
 8007fa2:	bd38      	pop	{r3, r4, r5, pc}
 8007fa4:	2000090c 	.word	0x2000090c

08007fa8 <_lseek_r>:
 8007fa8:	b538      	push	{r3, r4, r5, lr}
 8007faa:	4d07      	ldr	r5, [pc, #28]	; (8007fc8 <_lseek_r+0x20>)
 8007fac:	4604      	mov	r4, r0
 8007fae:	4608      	mov	r0, r1
 8007fb0:	4611      	mov	r1, r2
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	602a      	str	r2, [r5, #0]
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	f7ff fb39 	bl	800762e <_lseek>
 8007fbc:	1c43      	adds	r3, r0, #1
 8007fbe:	d102      	bne.n	8007fc6 <_lseek_r+0x1e>
 8007fc0:	682b      	ldr	r3, [r5, #0]
 8007fc2:	b103      	cbz	r3, 8007fc6 <_lseek_r+0x1e>
 8007fc4:	6023      	str	r3, [r4, #0]
 8007fc6:	bd38      	pop	{r3, r4, r5, pc}
 8007fc8:	2000090c 	.word	0x2000090c

08007fcc <_read_r>:
 8007fcc:	b538      	push	{r3, r4, r5, lr}
 8007fce:	4d07      	ldr	r5, [pc, #28]	; (8007fec <_read_r+0x20>)
 8007fd0:	4604      	mov	r4, r0
 8007fd2:	4608      	mov	r0, r1
 8007fd4:	4611      	mov	r1, r2
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	602a      	str	r2, [r5, #0]
 8007fda:	461a      	mov	r2, r3
 8007fdc:	f7ff facf 	bl	800757e <_read>
 8007fe0:	1c43      	adds	r3, r0, #1
 8007fe2:	d102      	bne.n	8007fea <_read_r+0x1e>
 8007fe4:	682b      	ldr	r3, [r5, #0]
 8007fe6:	b103      	cbz	r3, 8007fea <_read_r+0x1e>
 8007fe8:	6023      	str	r3, [r4, #0]
 8007fea:	bd38      	pop	{r3, r4, r5, pc}
 8007fec:	2000090c 	.word	0x2000090c

08007ff0 <_write_r>:
 8007ff0:	b538      	push	{r3, r4, r5, lr}
 8007ff2:	4d07      	ldr	r5, [pc, #28]	; (8008010 <_write_r+0x20>)
 8007ff4:	4604      	mov	r4, r0
 8007ff6:	4608      	mov	r0, r1
 8007ff8:	4611      	mov	r1, r2
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	602a      	str	r2, [r5, #0]
 8007ffe:	461a      	mov	r2, r3
 8008000:	f7ff fb27 	bl	8007652 <_write>
 8008004:	1c43      	adds	r3, r0, #1
 8008006:	d102      	bne.n	800800e <_write_r+0x1e>
 8008008:	682b      	ldr	r3, [r5, #0]
 800800a:	b103      	cbz	r3, 800800e <_write_r+0x1e>
 800800c:	6023      	str	r3, [r4, #0]
 800800e:	bd38      	pop	{r3, r4, r5, pc}
 8008010:	2000090c 	.word	0x2000090c

08008014 <__errno>:
 8008014:	4b01      	ldr	r3, [pc, #4]	; (800801c <__errno+0x8>)
 8008016:	6818      	ldr	r0, [r3, #0]
 8008018:	4770      	bx	lr
 800801a:	bf00      	nop
 800801c:	20000070 	.word	0x20000070

08008020 <__libc_init_array>:
 8008020:	b570      	push	{r4, r5, r6, lr}
 8008022:	4d0d      	ldr	r5, [pc, #52]	; (8008058 <__libc_init_array+0x38>)
 8008024:	4c0d      	ldr	r4, [pc, #52]	; (800805c <__libc_init_array+0x3c>)
 8008026:	1b64      	subs	r4, r4, r5
 8008028:	10a4      	asrs	r4, r4, #2
 800802a:	2600      	movs	r6, #0
 800802c:	42a6      	cmp	r6, r4
 800802e:	d109      	bne.n	8008044 <__libc_init_array+0x24>
 8008030:	4d0b      	ldr	r5, [pc, #44]	; (8008060 <__libc_init_array+0x40>)
 8008032:	4c0c      	ldr	r4, [pc, #48]	; (8008064 <__libc_init_array+0x44>)
 8008034:	f000 fd2a 	bl	8008a8c <_init>
 8008038:	1b64      	subs	r4, r4, r5
 800803a:	10a4      	asrs	r4, r4, #2
 800803c:	2600      	movs	r6, #0
 800803e:	42a6      	cmp	r6, r4
 8008040:	d105      	bne.n	800804e <__libc_init_array+0x2e>
 8008042:	bd70      	pop	{r4, r5, r6, pc}
 8008044:	f855 3b04 	ldr.w	r3, [r5], #4
 8008048:	4798      	blx	r3
 800804a:	3601      	adds	r6, #1
 800804c:	e7ee      	b.n	800802c <__libc_init_array+0xc>
 800804e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008052:	4798      	blx	r3
 8008054:	3601      	adds	r6, #1
 8008056:	e7f2      	b.n	800803e <__libc_init_array+0x1e>
 8008058:	08008ca0 	.word	0x08008ca0
 800805c:	08008ca0 	.word	0x08008ca0
 8008060:	08008ca0 	.word	0x08008ca0
 8008064:	08008ca4 	.word	0x08008ca4

08008068 <__retarget_lock_init_recursive>:
 8008068:	4770      	bx	lr

0800806a <__retarget_lock_acquire_recursive>:
 800806a:	4770      	bx	lr

0800806c <__retarget_lock_release_recursive>:
 800806c:	4770      	bx	lr
	...

08008070 <_free_r>:
 8008070:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008072:	2900      	cmp	r1, #0
 8008074:	d044      	beq.n	8008100 <_free_r+0x90>
 8008076:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800807a:	9001      	str	r0, [sp, #4]
 800807c:	2b00      	cmp	r3, #0
 800807e:	f1a1 0404 	sub.w	r4, r1, #4
 8008082:	bfb8      	it	lt
 8008084:	18e4      	addlt	r4, r4, r3
 8008086:	f000 f8df 	bl	8008248 <__malloc_lock>
 800808a:	4a1e      	ldr	r2, [pc, #120]	; (8008104 <_free_r+0x94>)
 800808c:	9801      	ldr	r0, [sp, #4]
 800808e:	6813      	ldr	r3, [r2, #0]
 8008090:	b933      	cbnz	r3, 80080a0 <_free_r+0x30>
 8008092:	6063      	str	r3, [r4, #4]
 8008094:	6014      	str	r4, [r2, #0]
 8008096:	b003      	add	sp, #12
 8008098:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800809c:	f000 b8da 	b.w	8008254 <__malloc_unlock>
 80080a0:	42a3      	cmp	r3, r4
 80080a2:	d908      	bls.n	80080b6 <_free_r+0x46>
 80080a4:	6825      	ldr	r5, [r4, #0]
 80080a6:	1961      	adds	r1, r4, r5
 80080a8:	428b      	cmp	r3, r1
 80080aa:	bf01      	itttt	eq
 80080ac:	6819      	ldreq	r1, [r3, #0]
 80080ae:	685b      	ldreq	r3, [r3, #4]
 80080b0:	1949      	addeq	r1, r1, r5
 80080b2:	6021      	streq	r1, [r4, #0]
 80080b4:	e7ed      	b.n	8008092 <_free_r+0x22>
 80080b6:	461a      	mov	r2, r3
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	b10b      	cbz	r3, 80080c0 <_free_r+0x50>
 80080bc:	42a3      	cmp	r3, r4
 80080be:	d9fa      	bls.n	80080b6 <_free_r+0x46>
 80080c0:	6811      	ldr	r1, [r2, #0]
 80080c2:	1855      	adds	r5, r2, r1
 80080c4:	42a5      	cmp	r5, r4
 80080c6:	d10b      	bne.n	80080e0 <_free_r+0x70>
 80080c8:	6824      	ldr	r4, [r4, #0]
 80080ca:	4421      	add	r1, r4
 80080cc:	1854      	adds	r4, r2, r1
 80080ce:	42a3      	cmp	r3, r4
 80080d0:	6011      	str	r1, [r2, #0]
 80080d2:	d1e0      	bne.n	8008096 <_free_r+0x26>
 80080d4:	681c      	ldr	r4, [r3, #0]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	6053      	str	r3, [r2, #4]
 80080da:	440c      	add	r4, r1
 80080dc:	6014      	str	r4, [r2, #0]
 80080de:	e7da      	b.n	8008096 <_free_r+0x26>
 80080e0:	d902      	bls.n	80080e8 <_free_r+0x78>
 80080e2:	230c      	movs	r3, #12
 80080e4:	6003      	str	r3, [r0, #0]
 80080e6:	e7d6      	b.n	8008096 <_free_r+0x26>
 80080e8:	6825      	ldr	r5, [r4, #0]
 80080ea:	1961      	adds	r1, r4, r5
 80080ec:	428b      	cmp	r3, r1
 80080ee:	bf04      	itt	eq
 80080f0:	6819      	ldreq	r1, [r3, #0]
 80080f2:	685b      	ldreq	r3, [r3, #4]
 80080f4:	6063      	str	r3, [r4, #4]
 80080f6:	bf04      	itt	eq
 80080f8:	1949      	addeq	r1, r1, r5
 80080fa:	6021      	streq	r1, [r4, #0]
 80080fc:	6054      	str	r4, [r2, #4]
 80080fe:	e7ca      	b.n	8008096 <_free_r+0x26>
 8008100:	b003      	add	sp, #12
 8008102:	bd30      	pop	{r4, r5, pc}
 8008104:	20000914 	.word	0x20000914

08008108 <sbrk_aligned>:
 8008108:	b570      	push	{r4, r5, r6, lr}
 800810a:	4e0e      	ldr	r6, [pc, #56]	; (8008144 <sbrk_aligned+0x3c>)
 800810c:	460c      	mov	r4, r1
 800810e:	6831      	ldr	r1, [r6, #0]
 8008110:	4605      	mov	r5, r0
 8008112:	b911      	cbnz	r1, 800811a <sbrk_aligned+0x12>
 8008114:	f000 fcaa 	bl	8008a6c <_sbrk_r>
 8008118:	6030      	str	r0, [r6, #0]
 800811a:	4621      	mov	r1, r4
 800811c:	4628      	mov	r0, r5
 800811e:	f000 fca5 	bl	8008a6c <_sbrk_r>
 8008122:	1c43      	adds	r3, r0, #1
 8008124:	d00a      	beq.n	800813c <sbrk_aligned+0x34>
 8008126:	1cc4      	adds	r4, r0, #3
 8008128:	f024 0403 	bic.w	r4, r4, #3
 800812c:	42a0      	cmp	r0, r4
 800812e:	d007      	beq.n	8008140 <sbrk_aligned+0x38>
 8008130:	1a21      	subs	r1, r4, r0
 8008132:	4628      	mov	r0, r5
 8008134:	f000 fc9a 	bl	8008a6c <_sbrk_r>
 8008138:	3001      	adds	r0, #1
 800813a:	d101      	bne.n	8008140 <sbrk_aligned+0x38>
 800813c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008140:	4620      	mov	r0, r4
 8008142:	bd70      	pop	{r4, r5, r6, pc}
 8008144:	20000918 	.word	0x20000918

08008148 <_malloc_r>:
 8008148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800814c:	1ccd      	adds	r5, r1, #3
 800814e:	f025 0503 	bic.w	r5, r5, #3
 8008152:	3508      	adds	r5, #8
 8008154:	2d0c      	cmp	r5, #12
 8008156:	bf38      	it	cc
 8008158:	250c      	movcc	r5, #12
 800815a:	2d00      	cmp	r5, #0
 800815c:	4607      	mov	r7, r0
 800815e:	db01      	blt.n	8008164 <_malloc_r+0x1c>
 8008160:	42a9      	cmp	r1, r5
 8008162:	d905      	bls.n	8008170 <_malloc_r+0x28>
 8008164:	230c      	movs	r3, #12
 8008166:	603b      	str	r3, [r7, #0]
 8008168:	2600      	movs	r6, #0
 800816a:	4630      	mov	r0, r6
 800816c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008170:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008244 <_malloc_r+0xfc>
 8008174:	f000 f868 	bl	8008248 <__malloc_lock>
 8008178:	f8d8 3000 	ldr.w	r3, [r8]
 800817c:	461c      	mov	r4, r3
 800817e:	bb5c      	cbnz	r4, 80081d8 <_malloc_r+0x90>
 8008180:	4629      	mov	r1, r5
 8008182:	4638      	mov	r0, r7
 8008184:	f7ff ffc0 	bl	8008108 <sbrk_aligned>
 8008188:	1c43      	adds	r3, r0, #1
 800818a:	4604      	mov	r4, r0
 800818c:	d155      	bne.n	800823a <_malloc_r+0xf2>
 800818e:	f8d8 4000 	ldr.w	r4, [r8]
 8008192:	4626      	mov	r6, r4
 8008194:	2e00      	cmp	r6, #0
 8008196:	d145      	bne.n	8008224 <_malloc_r+0xdc>
 8008198:	2c00      	cmp	r4, #0
 800819a:	d048      	beq.n	800822e <_malloc_r+0xe6>
 800819c:	6823      	ldr	r3, [r4, #0]
 800819e:	4631      	mov	r1, r6
 80081a0:	4638      	mov	r0, r7
 80081a2:	eb04 0903 	add.w	r9, r4, r3
 80081a6:	f000 fc61 	bl	8008a6c <_sbrk_r>
 80081aa:	4581      	cmp	r9, r0
 80081ac:	d13f      	bne.n	800822e <_malloc_r+0xe6>
 80081ae:	6821      	ldr	r1, [r4, #0]
 80081b0:	1a6d      	subs	r5, r5, r1
 80081b2:	4629      	mov	r1, r5
 80081b4:	4638      	mov	r0, r7
 80081b6:	f7ff ffa7 	bl	8008108 <sbrk_aligned>
 80081ba:	3001      	adds	r0, #1
 80081bc:	d037      	beq.n	800822e <_malloc_r+0xe6>
 80081be:	6823      	ldr	r3, [r4, #0]
 80081c0:	442b      	add	r3, r5
 80081c2:	6023      	str	r3, [r4, #0]
 80081c4:	f8d8 3000 	ldr.w	r3, [r8]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d038      	beq.n	800823e <_malloc_r+0xf6>
 80081cc:	685a      	ldr	r2, [r3, #4]
 80081ce:	42a2      	cmp	r2, r4
 80081d0:	d12b      	bne.n	800822a <_malloc_r+0xe2>
 80081d2:	2200      	movs	r2, #0
 80081d4:	605a      	str	r2, [r3, #4]
 80081d6:	e00f      	b.n	80081f8 <_malloc_r+0xb0>
 80081d8:	6822      	ldr	r2, [r4, #0]
 80081da:	1b52      	subs	r2, r2, r5
 80081dc:	d41f      	bmi.n	800821e <_malloc_r+0xd6>
 80081de:	2a0b      	cmp	r2, #11
 80081e0:	d917      	bls.n	8008212 <_malloc_r+0xca>
 80081e2:	1961      	adds	r1, r4, r5
 80081e4:	42a3      	cmp	r3, r4
 80081e6:	6025      	str	r5, [r4, #0]
 80081e8:	bf18      	it	ne
 80081ea:	6059      	strne	r1, [r3, #4]
 80081ec:	6863      	ldr	r3, [r4, #4]
 80081ee:	bf08      	it	eq
 80081f0:	f8c8 1000 	streq.w	r1, [r8]
 80081f4:	5162      	str	r2, [r4, r5]
 80081f6:	604b      	str	r3, [r1, #4]
 80081f8:	4638      	mov	r0, r7
 80081fa:	f104 060b 	add.w	r6, r4, #11
 80081fe:	f000 f829 	bl	8008254 <__malloc_unlock>
 8008202:	f026 0607 	bic.w	r6, r6, #7
 8008206:	1d23      	adds	r3, r4, #4
 8008208:	1af2      	subs	r2, r6, r3
 800820a:	d0ae      	beq.n	800816a <_malloc_r+0x22>
 800820c:	1b9b      	subs	r3, r3, r6
 800820e:	50a3      	str	r3, [r4, r2]
 8008210:	e7ab      	b.n	800816a <_malloc_r+0x22>
 8008212:	42a3      	cmp	r3, r4
 8008214:	6862      	ldr	r2, [r4, #4]
 8008216:	d1dd      	bne.n	80081d4 <_malloc_r+0x8c>
 8008218:	f8c8 2000 	str.w	r2, [r8]
 800821c:	e7ec      	b.n	80081f8 <_malloc_r+0xb0>
 800821e:	4623      	mov	r3, r4
 8008220:	6864      	ldr	r4, [r4, #4]
 8008222:	e7ac      	b.n	800817e <_malloc_r+0x36>
 8008224:	4634      	mov	r4, r6
 8008226:	6876      	ldr	r6, [r6, #4]
 8008228:	e7b4      	b.n	8008194 <_malloc_r+0x4c>
 800822a:	4613      	mov	r3, r2
 800822c:	e7cc      	b.n	80081c8 <_malloc_r+0x80>
 800822e:	230c      	movs	r3, #12
 8008230:	603b      	str	r3, [r7, #0]
 8008232:	4638      	mov	r0, r7
 8008234:	f000 f80e 	bl	8008254 <__malloc_unlock>
 8008238:	e797      	b.n	800816a <_malloc_r+0x22>
 800823a:	6025      	str	r5, [r4, #0]
 800823c:	e7dc      	b.n	80081f8 <_malloc_r+0xb0>
 800823e:	605b      	str	r3, [r3, #4]
 8008240:	deff      	udf	#255	; 0xff
 8008242:	bf00      	nop
 8008244:	20000914 	.word	0x20000914

08008248 <__malloc_lock>:
 8008248:	4801      	ldr	r0, [pc, #4]	; (8008250 <__malloc_lock+0x8>)
 800824a:	f7ff bf0e 	b.w	800806a <__retarget_lock_acquire_recursive>
 800824e:	bf00      	nop
 8008250:	20000910 	.word	0x20000910

08008254 <__malloc_unlock>:
 8008254:	4801      	ldr	r0, [pc, #4]	; (800825c <__malloc_unlock+0x8>)
 8008256:	f7ff bf09 	b.w	800806c <__retarget_lock_release_recursive>
 800825a:	bf00      	nop
 800825c:	20000910 	.word	0x20000910

08008260 <__sfputc_r>:
 8008260:	6893      	ldr	r3, [r2, #8]
 8008262:	3b01      	subs	r3, #1
 8008264:	2b00      	cmp	r3, #0
 8008266:	b410      	push	{r4}
 8008268:	6093      	str	r3, [r2, #8]
 800826a:	da08      	bge.n	800827e <__sfputc_r+0x1e>
 800826c:	6994      	ldr	r4, [r2, #24]
 800826e:	42a3      	cmp	r3, r4
 8008270:	db01      	blt.n	8008276 <__sfputc_r+0x16>
 8008272:	290a      	cmp	r1, #10
 8008274:	d103      	bne.n	800827e <__sfputc_r+0x1e>
 8008276:	f85d 4b04 	ldr.w	r4, [sp], #4
 800827a:	f7ff bde8 	b.w	8007e4e <__swbuf_r>
 800827e:	6813      	ldr	r3, [r2, #0]
 8008280:	1c58      	adds	r0, r3, #1
 8008282:	6010      	str	r0, [r2, #0]
 8008284:	7019      	strb	r1, [r3, #0]
 8008286:	4608      	mov	r0, r1
 8008288:	f85d 4b04 	ldr.w	r4, [sp], #4
 800828c:	4770      	bx	lr

0800828e <__sfputs_r>:
 800828e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008290:	4606      	mov	r6, r0
 8008292:	460f      	mov	r7, r1
 8008294:	4614      	mov	r4, r2
 8008296:	18d5      	adds	r5, r2, r3
 8008298:	42ac      	cmp	r4, r5
 800829a:	d101      	bne.n	80082a0 <__sfputs_r+0x12>
 800829c:	2000      	movs	r0, #0
 800829e:	e007      	b.n	80082b0 <__sfputs_r+0x22>
 80082a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082a4:	463a      	mov	r2, r7
 80082a6:	4630      	mov	r0, r6
 80082a8:	f7ff ffda 	bl	8008260 <__sfputc_r>
 80082ac:	1c43      	adds	r3, r0, #1
 80082ae:	d1f3      	bne.n	8008298 <__sfputs_r+0xa>
 80082b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080082b4 <_vfiprintf_r>:
 80082b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082b8:	460d      	mov	r5, r1
 80082ba:	b09d      	sub	sp, #116	; 0x74
 80082bc:	4614      	mov	r4, r2
 80082be:	4698      	mov	r8, r3
 80082c0:	4606      	mov	r6, r0
 80082c2:	b118      	cbz	r0, 80082cc <_vfiprintf_r+0x18>
 80082c4:	6a03      	ldr	r3, [r0, #32]
 80082c6:	b90b      	cbnz	r3, 80082cc <_vfiprintf_r+0x18>
 80082c8:	f7ff fcda 	bl	8007c80 <__sinit>
 80082cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082ce:	07d9      	lsls	r1, r3, #31
 80082d0:	d405      	bmi.n	80082de <_vfiprintf_r+0x2a>
 80082d2:	89ab      	ldrh	r3, [r5, #12]
 80082d4:	059a      	lsls	r2, r3, #22
 80082d6:	d402      	bmi.n	80082de <_vfiprintf_r+0x2a>
 80082d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082da:	f7ff fec6 	bl	800806a <__retarget_lock_acquire_recursive>
 80082de:	89ab      	ldrh	r3, [r5, #12]
 80082e0:	071b      	lsls	r3, r3, #28
 80082e2:	d501      	bpl.n	80082e8 <_vfiprintf_r+0x34>
 80082e4:	692b      	ldr	r3, [r5, #16]
 80082e6:	b99b      	cbnz	r3, 8008310 <_vfiprintf_r+0x5c>
 80082e8:	4629      	mov	r1, r5
 80082ea:	4630      	mov	r0, r6
 80082ec:	f7ff fdec 	bl	8007ec8 <__swsetup_r>
 80082f0:	b170      	cbz	r0, 8008310 <_vfiprintf_r+0x5c>
 80082f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082f4:	07dc      	lsls	r4, r3, #31
 80082f6:	d504      	bpl.n	8008302 <_vfiprintf_r+0x4e>
 80082f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082fc:	b01d      	add	sp, #116	; 0x74
 80082fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008302:	89ab      	ldrh	r3, [r5, #12]
 8008304:	0598      	lsls	r0, r3, #22
 8008306:	d4f7      	bmi.n	80082f8 <_vfiprintf_r+0x44>
 8008308:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800830a:	f7ff feaf 	bl	800806c <__retarget_lock_release_recursive>
 800830e:	e7f3      	b.n	80082f8 <_vfiprintf_r+0x44>
 8008310:	2300      	movs	r3, #0
 8008312:	9309      	str	r3, [sp, #36]	; 0x24
 8008314:	2320      	movs	r3, #32
 8008316:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800831a:	f8cd 800c 	str.w	r8, [sp, #12]
 800831e:	2330      	movs	r3, #48	; 0x30
 8008320:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80084d4 <_vfiprintf_r+0x220>
 8008324:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008328:	f04f 0901 	mov.w	r9, #1
 800832c:	4623      	mov	r3, r4
 800832e:	469a      	mov	sl, r3
 8008330:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008334:	b10a      	cbz	r2, 800833a <_vfiprintf_r+0x86>
 8008336:	2a25      	cmp	r2, #37	; 0x25
 8008338:	d1f9      	bne.n	800832e <_vfiprintf_r+0x7a>
 800833a:	ebba 0b04 	subs.w	fp, sl, r4
 800833e:	d00b      	beq.n	8008358 <_vfiprintf_r+0xa4>
 8008340:	465b      	mov	r3, fp
 8008342:	4622      	mov	r2, r4
 8008344:	4629      	mov	r1, r5
 8008346:	4630      	mov	r0, r6
 8008348:	f7ff ffa1 	bl	800828e <__sfputs_r>
 800834c:	3001      	adds	r0, #1
 800834e:	f000 80a9 	beq.w	80084a4 <_vfiprintf_r+0x1f0>
 8008352:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008354:	445a      	add	r2, fp
 8008356:	9209      	str	r2, [sp, #36]	; 0x24
 8008358:	f89a 3000 	ldrb.w	r3, [sl]
 800835c:	2b00      	cmp	r3, #0
 800835e:	f000 80a1 	beq.w	80084a4 <_vfiprintf_r+0x1f0>
 8008362:	2300      	movs	r3, #0
 8008364:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008368:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800836c:	f10a 0a01 	add.w	sl, sl, #1
 8008370:	9304      	str	r3, [sp, #16]
 8008372:	9307      	str	r3, [sp, #28]
 8008374:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008378:	931a      	str	r3, [sp, #104]	; 0x68
 800837a:	4654      	mov	r4, sl
 800837c:	2205      	movs	r2, #5
 800837e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008382:	4854      	ldr	r0, [pc, #336]	; (80084d4 <_vfiprintf_r+0x220>)
 8008384:	f7f7 ff64 	bl	8000250 <memchr>
 8008388:	9a04      	ldr	r2, [sp, #16]
 800838a:	b9d8      	cbnz	r0, 80083c4 <_vfiprintf_r+0x110>
 800838c:	06d1      	lsls	r1, r2, #27
 800838e:	bf44      	itt	mi
 8008390:	2320      	movmi	r3, #32
 8008392:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008396:	0713      	lsls	r3, r2, #28
 8008398:	bf44      	itt	mi
 800839a:	232b      	movmi	r3, #43	; 0x2b
 800839c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083a0:	f89a 3000 	ldrb.w	r3, [sl]
 80083a4:	2b2a      	cmp	r3, #42	; 0x2a
 80083a6:	d015      	beq.n	80083d4 <_vfiprintf_r+0x120>
 80083a8:	9a07      	ldr	r2, [sp, #28]
 80083aa:	4654      	mov	r4, sl
 80083ac:	2000      	movs	r0, #0
 80083ae:	f04f 0c0a 	mov.w	ip, #10
 80083b2:	4621      	mov	r1, r4
 80083b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083b8:	3b30      	subs	r3, #48	; 0x30
 80083ba:	2b09      	cmp	r3, #9
 80083bc:	d94d      	bls.n	800845a <_vfiprintf_r+0x1a6>
 80083be:	b1b0      	cbz	r0, 80083ee <_vfiprintf_r+0x13a>
 80083c0:	9207      	str	r2, [sp, #28]
 80083c2:	e014      	b.n	80083ee <_vfiprintf_r+0x13a>
 80083c4:	eba0 0308 	sub.w	r3, r0, r8
 80083c8:	fa09 f303 	lsl.w	r3, r9, r3
 80083cc:	4313      	orrs	r3, r2
 80083ce:	9304      	str	r3, [sp, #16]
 80083d0:	46a2      	mov	sl, r4
 80083d2:	e7d2      	b.n	800837a <_vfiprintf_r+0xc6>
 80083d4:	9b03      	ldr	r3, [sp, #12]
 80083d6:	1d19      	adds	r1, r3, #4
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	9103      	str	r1, [sp, #12]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	bfbb      	ittet	lt
 80083e0:	425b      	neglt	r3, r3
 80083e2:	f042 0202 	orrlt.w	r2, r2, #2
 80083e6:	9307      	strge	r3, [sp, #28]
 80083e8:	9307      	strlt	r3, [sp, #28]
 80083ea:	bfb8      	it	lt
 80083ec:	9204      	strlt	r2, [sp, #16]
 80083ee:	7823      	ldrb	r3, [r4, #0]
 80083f0:	2b2e      	cmp	r3, #46	; 0x2e
 80083f2:	d10c      	bne.n	800840e <_vfiprintf_r+0x15a>
 80083f4:	7863      	ldrb	r3, [r4, #1]
 80083f6:	2b2a      	cmp	r3, #42	; 0x2a
 80083f8:	d134      	bne.n	8008464 <_vfiprintf_r+0x1b0>
 80083fa:	9b03      	ldr	r3, [sp, #12]
 80083fc:	1d1a      	adds	r2, r3, #4
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	9203      	str	r2, [sp, #12]
 8008402:	2b00      	cmp	r3, #0
 8008404:	bfb8      	it	lt
 8008406:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800840a:	3402      	adds	r4, #2
 800840c:	9305      	str	r3, [sp, #20]
 800840e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80084e4 <_vfiprintf_r+0x230>
 8008412:	7821      	ldrb	r1, [r4, #0]
 8008414:	2203      	movs	r2, #3
 8008416:	4650      	mov	r0, sl
 8008418:	f7f7 ff1a 	bl	8000250 <memchr>
 800841c:	b138      	cbz	r0, 800842e <_vfiprintf_r+0x17a>
 800841e:	9b04      	ldr	r3, [sp, #16]
 8008420:	eba0 000a 	sub.w	r0, r0, sl
 8008424:	2240      	movs	r2, #64	; 0x40
 8008426:	4082      	lsls	r2, r0
 8008428:	4313      	orrs	r3, r2
 800842a:	3401      	adds	r4, #1
 800842c:	9304      	str	r3, [sp, #16]
 800842e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008432:	4829      	ldr	r0, [pc, #164]	; (80084d8 <_vfiprintf_r+0x224>)
 8008434:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008438:	2206      	movs	r2, #6
 800843a:	f7f7 ff09 	bl	8000250 <memchr>
 800843e:	2800      	cmp	r0, #0
 8008440:	d03f      	beq.n	80084c2 <_vfiprintf_r+0x20e>
 8008442:	4b26      	ldr	r3, [pc, #152]	; (80084dc <_vfiprintf_r+0x228>)
 8008444:	bb1b      	cbnz	r3, 800848e <_vfiprintf_r+0x1da>
 8008446:	9b03      	ldr	r3, [sp, #12]
 8008448:	3307      	adds	r3, #7
 800844a:	f023 0307 	bic.w	r3, r3, #7
 800844e:	3308      	adds	r3, #8
 8008450:	9303      	str	r3, [sp, #12]
 8008452:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008454:	443b      	add	r3, r7
 8008456:	9309      	str	r3, [sp, #36]	; 0x24
 8008458:	e768      	b.n	800832c <_vfiprintf_r+0x78>
 800845a:	fb0c 3202 	mla	r2, ip, r2, r3
 800845e:	460c      	mov	r4, r1
 8008460:	2001      	movs	r0, #1
 8008462:	e7a6      	b.n	80083b2 <_vfiprintf_r+0xfe>
 8008464:	2300      	movs	r3, #0
 8008466:	3401      	adds	r4, #1
 8008468:	9305      	str	r3, [sp, #20]
 800846a:	4619      	mov	r1, r3
 800846c:	f04f 0c0a 	mov.w	ip, #10
 8008470:	4620      	mov	r0, r4
 8008472:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008476:	3a30      	subs	r2, #48	; 0x30
 8008478:	2a09      	cmp	r2, #9
 800847a:	d903      	bls.n	8008484 <_vfiprintf_r+0x1d0>
 800847c:	2b00      	cmp	r3, #0
 800847e:	d0c6      	beq.n	800840e <_vfiprintf_r+0x15a>
 8008480:	9105      	str	r1, [sp, #20]
 8008482:	e7c4      	b.n	800840e <_vfiprintf_r+0x15a>
 8008484:	fb0c 2101 	mla	r1, ip, r1, r2
 8008488:	4604      	mov	r4, r0
 800848a:	2301      	movs	r3, #1
 800848c:	e7f0      	b.n	8008470 <_vfiprintf_r+0x1bc>
 800848e:	ab03      	add	r3, sp, #12
 8008490:	9300      	str	r3, [sp, #0]
 8008492:	462a      	mov	r2, r5
 8008494:	4b12      	ldr	r3, [pc, #72]	; (80084e0 <_vfiprintf_r+0x22c>)
 8008496:	a904      	add	r1, sp, #16
 8008498:	4630      	mov	r0, r6
 800849a:	f3af 8000 	nop.w
 800849e:	4607      	mov	r7, r0
 80084a0:	1c78      	adds	r0, r7, #1
 80084a2:	d1d6      	bne.n	8008452 <_vfiprintf_r+0x19e>
 80084a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084a6:	07d9      	lsls	r1, r3, #31
 80084a8:	d405      	bmi.n	80084b6 <_vfiprintf_r+0x202>
 80084aa:	89ab      	ldrh	r3, [r5, #12]
 80084ac:	059a      	lsls	r2, r3, #22
 80084ae:	d402      	bmi.n	80084b6 <_vfiprintf_r+0x202>
 80084b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084b2:	f7ff fddb 	bl	800806c <__retarget_lock_release_recursive>
 80084b6:	89ab      	ldrh	r3, [r5, #12]
 80084b8:	065b      	lsls	r3, r3, #25
 80084ba:	f53f af1d 	bmi.w	80082f8 <_vfiprintf_r+0x44>
 80084be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084c0:	e71c      	b.n	80082fc <_vfiprintf_r+0x48>
 80084c2:	ab03      	add	r3, sp, #12
 80084c4:	9300      	str	r3, [sp, #0]
 80084c6:	462a      	mov	r2, r5
 80084c8:	4b05      	ldr	r3, [pc, #20]	; (80084e0 <_vfiprintf_r+0x22c>)
 80084ca:	a904      	add	r1, sp, #16
 80084cc:	4630      	mov	r0, r6
 80084ce:	f000 f879 	bl	80085c4 <_printf_i>
 80084d2:	e7e4      	b.n	800849e <_vfiprintf_r+0x1ea>
 80084d4:	08008c63 	.word	0x08008c63
 80084d8:	08008c6d 	.word	0x08008c6d
 80084dc:	00000000 	.word	0x00000000
 80084e0:	0800828f 	.word	0x0800828f
 80084e4:	08008c69 	.word	0x08008c69

080084e8 <_printf_common>:
 80084e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084ec:	4616      	mov	r6, r2
 80084ee:	4699      	mov	r9, r3
 80084f0:	688a      	ldr	r2, [r1, #8]
 80084f2:	690b      	ldr	r3, [r1, #16]
 80084f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80084f8:	4293      	cmp	r3, r2
 80084fa:	bfb8      	it	lt
 80084fc:	4613      	movlt	r3, r2
 80084fe:	6033      	str	r3, [r6, #0]
 8008500:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008504:	4607      	mov	r7, r0
 8008506:	460c      	mov	r4, r1
 8008508:	b10a      	cbz	r2, 800850e <_printf_common+0x26>
 800850a:	3301      	adds	r3, #1
 800850c:	6033      	str	r3, [r6, #0]
 800850e:	6823      	ldr	r3, [r4, #0]
 8008510:	0699      	lsls	r1, r3, #26
 8008512:	bf42      	ittt	mi
 8008514:	6833      	ldrmi	r3, [r6, #0]
 8008516:	3302      	addmi	r3, #2
 8008518:	6033      	strmi	r3, [r6, #0]
 800851a:	6825      	ldr	r5, [r4, #0]
 800851c:	f015 0506 	ands.w	r5, r5, #6
 8008520:	d106      	bne.n	8008530 <_printf_common+0x48>
 8008522:	f104 0a19 	add.w	sl, r4, #25
 8008526:	68e3      	ldr	r3, [r4, #12]
 8008528:	6832      	ldr	r2, [r6, #0]
 800852a:	1a9b      	subs	r3, r3, r2
 800852c:	42ab      	cmp	r3, r5
 800852e:	dc26      	bgt.n	800857e <_printf_common+0x96>
 8008530:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008534:	1e13      	subs	r3, r2, #0
 8008536:	6822      	ldr	r2, [r4, #0]
 8008538:	bf18      	it	ne
 800853a:	2301      	movne	r3, #1
 800853c:	0692      	lsls	r2, r2, #26
 800853e:	d42b      	bmi.n	8008598 <_printf_common+0xb0>
 8008540:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008544:	4649      	mov	r1, r9
 8008546:	4638      	mov	r0, r7
 8008548:	47c0      	blx	r8
 800854a:	3001      	adds	r0, #1
 800854c:	d01e      	beq.n	800858c <_printf_common+0xa4>
 800854e:	6823      	ldr	r3, [r4, #0]
 8008550:	6922      	ldr	r2, [r4, #16]
 8008552:	f003 0306 	and.w	r3, r3, #6
 8008556:	2b04      	cmp	r3, #4
 8008558:	bf02      	ittt	eq
 800855a:	68e5      	ldreq	r5, [r4, #12]
 800855c:	6833      	ldreq	r3, [r6, #0]
 800855e:	1aed      	subeq	r5, r5, r3
 8008560:	68a3      	ldr	r3, [r4, #8]
 8008562:	bf0c      	ite	eq
 8008564:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008568:	2500      	movne	r5, #0
 800856a:	4293      	cmp	r3, r2
 800856c:	bfc4      	itt	gt
 800856e:	1a9b      	subgt	r3, r3, r2
 8008570:	18ed      	addgt	r5, r5, r3
 8008572:	2600      	movs	r6, #0
 8008574:	341a      	adds	r4, #26
 8008576:	42b5      	cmp	r5, r6
 8008578:	d11a      	bne.n	80085b0 <_printf_common+0xc8>
 800857a:	2000      	movs	r0, #0
 800857c:	e008      	b.n	8008590 <_printf_common+0xa8>
 800857e:	2301      	movs	r3, #1
 8008580:	4652      	mov	r2, sl
 8008582:	4649      	mov	r1, r9
 8008584:	4638      	mov	r0, r7
 8008586:	47c0      	blx	r8
 8008588:	3001      	adds	r0, #1
 800858a:	d103      	bne.n	8008594 <_printf_common+0xac>
 800858c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008594:	3501      	adds	r5, #1
 8008596:	e7c6      	b.n	8008526 <_printf_common+0x3e>
 8008598:	18e1      	adds	r1, r4, r3
 800859a:	1c5a      	adds	r2, r3, #1
 800859c:	2030      	movs	r0, #48	; 0x30
 800859e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80085a2:	4422      	add	r2, r4
 80085a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80085a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80085ac:	3302      	adds	r3, #2
 80085ae:	e7c7      	b.n	8008540 <_printf_common+0x58>
 80085b0:	2301      	movs	r3, #1
 80085b2:	4622      	mov	r2, r4
 80085b4:	4649      	mov	r1, r9
 80085b6:	4638      	mov	r0, r7
 80085b8:	47c0      	blx	r8
 80085ba:	3001      	adds	r0, #1
 80085bc:	d0e6      	beq.n	800858c <_printf_common+0xa4>
 80085be:	3601      	adds	r6, #1
 80085c0:	e7d9      	b.n	8008576 <_printf_common+0x8e>
	...

080085c4 <_printf_i>:
 80085c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085c8:	7e0f      	ldrb	r7, [r1, #24]
 80085ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80085cc:	2f78      	cmp	r7, #120	; 0x78
 80085ce:	4691      	mov	r9, r2
 80085d0:	4680      	mov	r8, r0
 80085d2:	460c      	mov	r4, r1
 80085d4:	469a      	mov	sl, r3
 80085d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80085da:	d807      	bhi.n	80085ec <_printf_i+0x28>
 80085dc:	2f62      	cmp	r7, #98	; 0x62
 80085de:	d80a      	bhi.n	80085f6 <_printf_i+0x32>
 80085e0:	2f00      	cmp	r7, #0
 80085e2:	f000 80d4 	beq.w	800878e <_printf_i+0x1ca>
 80085e6:	2f58      	cmp	r7, #88	; 0x58
 80085e8:	f000 80c0 	beq.w	800876c <_printf_i+0x1a8>
 80085ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80085f4:	e03a      	b.n	800866c <_printf_i+0xa8>
 80085f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80085fa:	2b15      	cmp	r3, #21
 80085fc:	d8f6      	bhi.n	80085ec <_printf_i+0x28>
 80085fe:	a101      	add	r1, pc, #4	; (adr r1, 8008604 <_printf_i+0x40>)
 8008600:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008604:	0800865d 	.word	0x0800865d
 8008608:	08008671 	.word	0x08008671
 800860c:	080085ed 	.word	0x080085ed
 8008610:	080085ed 	.word	0x080085ed
 8008614:	080085ed 	.word	0x080085ed
 8008618:	080085ed 	.word	0x080085ed
 800861c:	08008671 	.word	0x08008671
 8008620:	080085ed 	.word	0x080085ed
 8008624:	080085ed 	.word	0x080085ed
 8008628:	080085ed 	.word	0x080085ed
 800862c:	080085ed 	.word	0x080085ed
 8008630:	08008775 	.word	0x08008775
 8008634:	0800869d 	.word	0x0800869d
 8008638:	0800872f 	.word	0x0800872f
 800863c:	080085ed 	.word	0x080085ed
 8008640:	080085ed 	.word	0x080085ed
 8008644:	08008797 	.word	0x08008797
 8008648:	080085ed 	.word	0x080085ed
 800864c:	0800869d 	.word	0x0800869d
 8008650:	080085ed 	.word	0x080085ed
 8008654:	080085ed 	.word	0x080085ed
 8008658:	08008737 	.word	0x08008737
 800865c:	682b      	ldr	r3, [r5, #0]
 800865e:	1d1a      	adds	r2, r3, #4
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	602a      	str	r2, [r5, #0]
 8008664:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008668:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800866c:	2301      	movs	r3, #1
 800866e:	e09f      	b.n	80087b0 <_printf_i+0x1ec>
 8008670:	6820      	ldr	r0, [r4, #0]
 8008672:	682b      	ldr	r3, [r5, #0]
 8008674:	0607      	lsls	r7, r0, #24
 8008676:	f103 0104 	add.w	r1, r3, #4
 800867a:	6029      	str	r1, [r5, #0]
 800867c:	d501      	bpl.n	8008682 <_printf_i+0xbe>
 800867e:	681e      	ldr	r6, [r3, #0]
 8008680:	e003      	b.n	800868a <_printf_i+0xc6>
 8008682:	0646      	lsls	r6, r0, #25
 8008684:	d5fb      	bpl.n	800867e <_printf_i+0xba>
 8008686:	f9b3 6000 	ldrsh.w	r6, [r3]
 800868a:	2e00      	cmp	r6, #0
 800868c:	da03      	bge.n	8008696 <_printf_i+0xd2>
 800868e:	232d      	movs	r3, #45	; 0x2d
 8008690:	4276      	negs	r6, r6
 8008692:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008696:	485a      	ldr	r0, [pc, #360]	; (8008800 <_printf_i+0x23c>)
 8008698:	230a      	movs	r3, #10
 800869a:	e012      	b.n	80086c2 <_printf_i+0xfe>
 800869c:	682b      	ldr	r3, [r5, #0]
 800869e:	6820      	ldr	r0, [r4, #0]
 80086a0:	1d19      	adds	r1, r3, #4
 80086a2:	6029      	str	r1, [r5, #0]
 80086a4:	0605      	lsls	r5, r0, #24
 80086a6:	d501      	bpl.n	80086ac <_printf_i+0xe8>
 80086a8:	681e      	ldr	r6, [r3, #0]
 80086aa:	e002      	b.n	80086b2 <_printf_i+0xee>
 80086ac:	0641      	lsls	r1, r0, #25
 80086ae:	d5fb      	bpl.n	80086a8 <_printf_i+0xe4>
 80086b0:	881e      	ldrh	r6, [r3, #0]
 80086b2:	4853      	ldr	r0, [pc, #332]	; (8008800 <_printf_i+0x23c>)
 80086b4:	2f6f      	cmp	r7, #111	; 0x6f
 80086b6:	bf0c      	ite	eq
 80086b8:	2308      	moveq	r3, #8
 80086ba:	230a      	movne	r3, #10
 80086bc:	2100      	movs	r1, #0
 80086be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80086c2:	6865      	ldr	r5, [r4, #4]
 80086c4:	60a5      	str	r5, [r4, #8]
 80086c6:	2d00      	cmp	r5, #0
 80086c8:	bfa2      	ittt	ge
 80086ca:	6821      	ldrge	r1, [r4, #0]
 80086cc:	f021 0104 	bicge.w	r1, r1, #4
 80086d0:	6021      	strge	r1, [r4, #0]
 80086d2:	b90e      	cbnz	r6, 80086d8 <_printf_i+0x114>
 80086d4:	2d00      	cmp	r5, #0
 80086d6:	d04b      	beq.n	8008770 <_printf_i+0x1ac>
 80086d8:	4615      	mov	r5, r2
 80086da:	fbb6 f1f3 	udiv	r1, r6, r3
 80086de:	fb03 6711 	mls	r7, r3, r1, r6
 80086e2:	5dc7      	ldrb	r7, [r0, r7]
 80086e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80086e8:	4637      	mov	r7, r6
 80086ea:	42bb      	cmp	r3, r7
 80086ec:	460e      	mov	r6, r1
 80086ee:	d9f4      	bls.n	80086da <_printf_i+0x116>
 80086f0:	2b08      	cmp	r3, #8
 80086f2:	d10b      	bne.n	800870c <_printf_i+0x148>
 80086f4:	6823      	ldr	r3, [r4, #0]
 80086f6:	07de      	lsls	r6, r3, #31
 80086f8:	d508      	bpl.n	800870c <_printf_i+0x148>
 80086fa:	6923      	ldr	r3, [r4, #16]
 80086fc:	6861      	ldr	r1, [r4, #4]
 80086fe:	4299      	cmp	r1, r3
 8008700:	bfde      	ittt	le
 8008702:	2330      	movle	r3, #48	; 0x30
 8008704:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008708:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800870c:	1b52      	subs	r2, r2, r5
 800870e:	6122      	str	r2, [r4, #16]
 8008710:	f8cd a000 	str.w	sl, [sp]
 8008714:	464b      	mov	r3, r9
 8008716:	aa03      	add	r2, sp, #12
 8008718:	4621      	mov	r1, r4
 800871a:	4640      	mov	r0, r8
 800871c:	f7ff fee4 	bl	80084e8 <_printf_common>
 8008720:	3001      	adds	r0, #1
 8008722:	d14a      	bne.n	80087ba <_printf_i+0x1f6>
 8008724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008728:	b004      	add	sp, #16
 800872a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800872e:	6823      	ldr	r3, [r4, #0]
 8008730:	f043 0320 	orr.w	r3, r3, #32
 8008734:	6023      	str	r3, [r4, #0]
 8008736:	4833      	ldr	r0, [pc, #204]	; (8008804 <_printf_i+0x240>)
 8008738:	2778      	movs	r7, #120	; 0x78
 800873a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800873e:	6823      	ldr	r3, [r4, #0]
 8008740:	6829      	ldr	r1, [r5, #0]
 8008742:	061f      	lsls	r7, r3, #24
 8008744:	f851 6b04 	ldr.w	r6, [r1], #4
 8008748:	d402      	bmi.n	8008750 <_printf_i+0x18c>
 800874a:	065f      	lsls	r7, r3, #25
 800874c:	bf48      	it	mi
 800874e:	b2b6      	uxthmi	r6, r6
 8008750:	07df      	lsls	r7, r3, #31
 8008752:	bf48      	it	mi
 8008754:	f043 0320 	orrmi.w	r3, r3, #32
 8008758:	6029      	str	r1, [r5, #0]
 800875a:	bf48      	it	mi
 800875c:	6023      	strmi	r3, [r4, #0]
 800875e:	b91e      	cbnz	r6, 8008768 <_printf_i+0x1a4>
 8008760:	6823      	ldr	r3, [r4, #0]
 8008762:	f023 0320 	bic.w	r3, r3, #32
 8008766:	6023      	str	r3, [r4, #0]
 8008768:	2310      	movs	r3, #16
 800876a:	e7a7      	b.n	80086bc <_printf_i+0xf8>
 800876c:	4824      	ldr	r0, [pc, #144]	; (8008800 <_printf_i+0x23c>)
 800876e:	e7e4      	b.n	800873a <_printf_i+0x176>
 8008770:	4615      	mov	r5, r2
 8008772:	e7bd      	b.n	80086f0 <_printf_i+0x12c>
 8008774:	682b      	ldr	r3, [r5, #0]
 8008776:	6826      	ldr	r6, [r4, #0]
 8008778:	6961      	ldr	r1, [r4, #20]
 800877a:	1d18      	adds	r0, r3, #4
 800877c:	6028      	str	r0, [r5, #0]
 800877e:	0635      	lsls	r5, r6, #24
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	d501      	bpl.n	8008788 <_printf_i+0x1c4>
 8008784:	6019      	str	r1, [r3, #0]
 8008786:	e002      	b.n	800878e <_printf_i+0x1ca>
 8008788:	0670      	lsls	r0, r6, #25
 800878a:	d5fb      	bpl.n	8008784 <_printf_i+0x1c0>
 800878c:	8019      	strh	r1, [r3, #0]
 800878e:	2300      	movs	r3, #0
 8008790:	6123      	str	r3, [r4, #16]
 8008792:	4615      	mov	r5, r2
 8008794:	e7bc      	b.n	8008710 <_printf_i+0x14c>
 8008796:	682b      	ldr	r3, [r5, #0]
 8008798:	1d1a      	adds	r2, r3, #4
 800879a:	602a      	str	r2, [r5, #0]
 800879c:	681d      	ldr	r5, [r3, #0]
 800879e:	6862      	ldr	r2, [r4, #4]
 80087a0:	2100      	movs	r1, #0
 80087a2:	4628      	mov	r0, r5
 80087a4:	f7f7 fd54 	bl	8000250 <memchr>
 80087a8:	b108      	cbz	r0, 80087ae <_printf_i+0x1ea>
 80087aa:	1b40      	subs	r0, r0, r5
 80087ac:	6060      	str	r0, [r4, #4]
 80087ae:	6863      	ldr	r3, [r4, #4]
 80087b0:	6123      	str	r3, [r4, #16]
 80087b2:	2300      	movs	r3, #0
 80087b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087b8:	e7aa      	b.n	8008710 <_printf_i+0x14c>
 80087ba:	6923      	ldr	r3, [r4, #16]
 80087bc:	462a      	mov	r2, r5
 80087be:	4649      	mov	r1, r9
 80087c0:	4640      	mov	r0, r8
 80087c2:	47d0      	blx	sl
 80087c4:	3001      	adds	r0, #1
 80087c6:	d0ad      	beq.n	8008724 <_printf_i+0x160>
 80087c8:	6823      	ldr	r3, [r4, #0]
 80087ca:	079b      	lsls	r3, r3, #30
 80087cc:	d413      	bmi.n	80087f6 <_printf_i+0x232>
 80087ce:	68e0      	ldr	r0, [r4, #12]
 80087d0:	9b03      	ldr	r3, [sp, #12]
 80087d2:	4298      	cmp	r0, r3
 80087d4:	bfb8      	it	lt
 80087d6:	4618      	movlt	r0, r3
 80087d8:	e7a6      	b.n	8008728 <_printf_i+0x164>
 80087da:	2301      	movs	r3, #1
 80087dc:	4632      	mov	r2, r6
 80087de:	4649      	mov	r1, r9
 80087e0:	4640      	mov	r0, r8
 80087e2:	47d0      	blx	sl
 80087e4:	3001      	adds	r0, #1
 80087e6:	d09d      	beq.n	8008724 <_printf_i+0x160>
 80087e8:	3501      	adds	r5, #1
 80087ea:	68e3      	ldr	r3, [r4, #12]
 80087ec:	9903      	ldr	r1, [sp, #12]
 80087ee:	1a5b      	subs	r3, r3, r1
 80087f0:	42ab      	cmp	r3, r5
 80087f2:	dcf2      	bgt.n	80087da <_printf_i+0x216>
 80087f4:	e7eb      	b.n	80087ce <_printf_i+0x20a>
 80087f6:	2500      	movs	r5, #0
 80087f8:	f104 0619 	add.w	r6, r4, #25
 80087fc:	e7f5      	b.n	80087ea <_printf_i+0x226>
 80087fe:	bf00      	nop
 8008800:	08008c74 	.word	0x08008c74
 8008804:	08008c85 	.word	0x08008c85

08008808 <__sflush_r>:
 8008808:	898a      	ldrh	r2, [r1, #12]
 800880a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800880e:	4605      	mov	r5, r0
 8008810:	0710      	lsls	r0, r2, #28
 8008812:	460c      	mov	r4, r1
 8008814:	d458      	bmi.n	80088c8 <__sflush_r+0xc0>
 8008816:	684b      	ldr	r3, [r1, #4]
 8008818:	2b00      	cmp	r3, #0
 800881a:	dc05      	bgt.n	8008828 <__sflush_r+0x20>
 800881c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800881e:	2b00      	cmp	r3, #0
 8008820:	dc02      	bgt.n	8008828 <__sflush_r+0x20>
 8008822:	2000      	movs	r0, #0
 8008824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008828:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800882a:	2e00      	cmp	r6, #0
 800882c:	d0f9      	beq.n	8008822 <__sflush_r+0x1a>
 800882e:	2300      	movs	r3, #0
 8008830:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008834:	682f      	ldr	r7, [r5, #0]
 8008836:	6a21      	ldr	r1, [r4, #32]
 8008838:	602b      	str	r3, [r5, #0]
 800883a:	d032      	beq.n	80088a2 <__sflush_r+0x9a>
 800883c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800883e:	89a3      	ldrh	r3, [r4, #12]
 8008840:	075a      	lsls	r2, r3, #29
 8008842:	d505      	bpl.n	8008850 <__sflush_r+0x48>
 8008844:	6863      	ldr	r3, [r4, #4]
 8008846:	1ac0      	subs	r0, r0, r3
 8008848:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800884a:	b10b      	cbz	r3, 8008850 <__sflush_r+0x48>
 800884c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800884e:	1ac0      	subs	r0, r0, r3
 8008850:	2300      	movs	r3, #0
 8008852:	4602      	mov	r2, r0
 8008854:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008856:	6a21      	ldr	r1, [r4, #32]
 8008858:	4628      	mov	r0, r5
 800885a:	47b0      	blx	r6
 800885c:	1c43      	adds	r3, r0, #1
 800885e:	89a3      	ldrh	r3, [r4, #12]
 8008860:	d106      	bne.n	8008870 <__sflush_r+0x68>
 8008862:	6829      	ldr	r1, [r5, #0]
 8008864:	291d      	cmp	r1, #29
 8008866:	d82b      	bhi.n	80088c0 <__sflush_r+0xb8>
 8008868:	4a29      	ldr	r2, [pc, #164]	; (8008910 <__sflush_r+0x108>)
 800886a:	410a      	asrs	r2, r1
 800886c:	07d6      	lsls	r6, r2, #31
 800886e:	d427      	bmi.n	80088c0 <__sflush_r+0xb8>
 8008870:	2200      	movs	r2, #0
 8008872:	6062      	str	r2, [r4, #4]
 8008874:	04d9      	lsls	r1, r3, #19
 8008876:	6922      	ldr	r2, [r4, #16]
 8008878:	6022      	str	r2, [r4, #0]
 800887a:	d504      	bpl.n	8008886 <__sflush_r+0x7e>
 800887c:	1c42      	adds	r2, r0, #1
 800887e:	d101      	bne.n	8008884 <__sflush_r+0x7c>
 8008880:	682b      	ldr	r3, [r5, #0]
 8008882:	b903      	cbnz	r3, 8008886 <__sflush_r+0x7e>
 8008884:	6560      	str	r0, [r4, #84]	; 0x54
 8008886:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008888:	602f      	str	r7, [r5, #0]
 800888a:	2900      	cmp	r1, #0
 800888c:	d0c9      	beq.n	8008822 <__sflush_r+0x1a>
 800888e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008892:	4299      	cmp	r1, r3
 8008894:	d002      	beq.n	800889c <__sflush_r+0x94>
 8008896:	4628      	mov	r0, r5
 8008898:	f7ff fbea 	bl	8008070 <_free_r>
 800889c:	2000      	movs	r0, #0
 800889e:	6360      	str	r0, [r4, #52]	; 0x34
 80088a0:	e7c0      	b.n	8008824 <__sflush_r+0x1c>
 80088a2:	2301      	movs	r3, #1
 80088a4:	4628      	mov	r0, r5
 80088a6:	47b0      	blx	r6
 80088a8:	1c41      	adds	r1, r0, #1
 80088aa:	d1c8      	bne.n	800883e <__sflush_r+0x36>
 80088ac:	682b      	ldr	r3, [r5, #0]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d0c5      	beq.n	800883e <__sflush_r+0x36>
 80088b2:	2b1d      	cmp	r3, #29
 80088b4:	d001      	beq.n	80088ba <__sflush_r+0xb2>
 80088b6:	2b16      	cmp	r3, #22
 80088b8:	d101      	bne.n	80088be <__sflush_r+0xb6>
 80088ba:	602f      	str	r7, [r5, #0]
 80088bc:	e7b1      	b.n	8008822 <__sflush_r+0x1a>
 80088be:	89a3      	ldrh	r3, [r4, #12]
 80088c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088c4:	81a3      	strh	r3, [r4, #12]
 80088c6:	e7ad      	b.n	8008824 <__sflush_r+0x1c>
 80088c8:	690f      	ldr	r7, [r1, #16]
 80088ca:	2f00      	cmp	r7, #0
 80088cc:	d0a9      	beq.n	8008822 <__sflush_r+0x1a>
 80088ce:	0793      	lsls	r3, r2, #30
 80088d0:	680e      	ldr	r6, [r1, #0]
 80088d2:	bf08      	it	eq
 80088d4:	694b      	ldreq	r3, [r1, #20]
 80088d6:	600f      	str	r7, [r1, #0]
 80088d8:	bf18      	it	ne
 80088da:	2300      	movne	r3, #0
 80088dc:	eba6 0807 	sub.w	r8, r6, r7
 80088e0:	608b      	str	r3, [r1, #8]
 80088e2:	f1b8 0f00 	cmp.w	r8, #0
 80088e6:	dd9c      	ble.n	8008822 <__sflush_r+0x1a>
 80088e8:	6a21      	ldr	r1, [r4, #32]
 80088ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80088ec:	4643      	mov	r3, r8
 80088ee:	463a      	mov	r2, r7
 80088f0:	4628      	mov	r0, r5
 80088f2:	47b0      	blx	r6
 80088f4:	2800      	cmp	r0, #0
 80088f6:	dc06      	bgt.n	8008906 <__sflush_r+0xfe>
 80088f8:	89a3      	ldrh	r3, [r4, #12]
 80088fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088fe:	81a3      	strh	r3, [r4, #12]
 8008900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008904:	e78e      	b.n	8008824 <__sflush_r+0x1c>
 8008906:	4407      	add	r7, r0
 8008908:	eba8 0800 	sub.w	r8, r8, r0
 800890c:	e7e9      	b.n	80088e2 <__sflush_r+0xda>
 800890e:	bf00      	nop
 8008910:	dfbffffe 	.word	0xdfbffffe

08008914 <_fflush_r>:
 8008914:	b538      	push	{r3, r4, r5, lr}
 8008916:	690b      	ldr	r3, [r1, #16]
 8008918:	4605      	mov	r5, r0
 800891a:	460c      	mov	r4, r1
 800891c:	b913      	cbnz	r3, 8008924 <_fflush_r+0x10>
 800891e:	2500      	movs	r5, #0
 8008920:	4628      	mov	r0, r5
 8008922:	bd38      	pop	{r3, r4, r5, pc}
 8008924:	b118      	cbz	r0, 800892e <_fflush_r+0x1a>
 8008926:	6a03      	ldr	r3, [r0, #32]
 8008928:	b90b      	cbnz	r3, 800892e <_fflush_r+0x1a>
 800892a:	f7ff f9a9 	bl	8007c80 <__sinit>
 800892e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d0f3      	beq.n	800891e <_fflush_r+0xa>
 8008936:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008938:	07d0      	lsls	r0, r2, #31
 800893a:	d404      	bmi.n	8008946 <_fflush_r+0x32>
 800893c:	0599      	lsls	r1, r3, #22
 800893e:	d402      	bmi.n	8008946 <_fflush_r+0x32>
 8008940:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008942:	f7ff fb92 	bl	800806a <__retarget_lock_acquire_recursive>
 8008946:	4628      	mov	r0, r5
 8008948:	4621      	mov	r1, r4
 800894a:	f7ff ff5d 	bl	8008808 <__sflush_r>
 800894e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008950:	07da      	lsls	r2, r3, #31
 8008952:	4605      	mov	r5, r0
 8008954:	d4e4      	bmi.n	8008920 <_fflush_r+0xc>
 8008956:	89a3      	ldrh	r3, [r4, #12]
 8008958:	059b      	lsls	r3, r3, #22
 800895a:	d4e1      	bmi.n	8008920 <_fflush_r+0xc>
 800895c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800895e:	f7ff fb85 	bl	800806c <__retarget_lock_release_recursive>
 8008962:	e7dd      	b.n	8008920 <_fflush_r+0xc>

08008964 <__swhatbuf_r>:
 8008964:	b570      	push	{r4, r5, r6, lr}
 8008966:	460c      	mov	r4, r1
 8008968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800896c:	2900      	cmp	r1, #0
 800896e:	b096      	sub	sp, #88	; 0x58
 8008970:	4615      	mov	r5, r2
 8008972:	461e      	mov	r6, r3
 8008974:	da0d      	bge.n	8008992 <__swhatbuf_r+0x2e>
 8008976:	89a3      	ldrh	r3, [r4, #12]
 8008978:	f013 0f80 	tst.w	r3, #128	; 0x80
 800897c:	f04f 0100 	mov.w	r1, #0
 8008980:	bf0c      	ite	eq
 8008982:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008986:	2340      	movne	r3, #64	; 0x40
 8008988:	2000      	movs	r0, #0
 800898a:	6031      	str	r1, [r6, #0]
 800898c:	602b      	str	r3, [r5, #0]
 800898e:	b016      	add	sp, #88	; 0x58
 8008990:	bd70      	pop	{r4, r5, r6, pc}
 8008992:	466a      	mov	r2, sp
 8008994:	f000 f848 	bl	8008a28 <_fstat_r>
 8008998:	2800      	cmp	r0, #0
 800899a:	dbec      	blt.n	8008976 <__swhatbuf_r+0x12>
 800899c:	9901      	ldr	r1, [sp, #4]
 800899e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80089a2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80089a6:	4259      	negs	r1, r3
 80089a8:	4159      	adcs	r1, r3
 80089aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089ae:	e7eb      	b.n	8008988 <__swhatbuf_r+0x24>

080089b0 <__smakebuf_r>:
 80089b0:	898b      	ldrh	r3, [r1, #12]
 80089b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80089b4:	079d      	lsls	r5, r3, #30
 80089b6:	4606      	mov	r6, r0
 80089b8:	460c      	mov	r4, r1
 80089ba:	d507      	bpl.n	80089cc <__smakebuf_r+0x1c>
 80089bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80089c0:	6023      	str	r3, [r4, #0]
 80089c2:	6123      	str	r3, [r4, #16]
 80089c4:	2301      	movs	r3, #1
 80089c6:	6163      	str	r3, [r4, #20]
 80089c8:	b002      	add	sp, #8
 80089ca:	bd70      	pop	{r4, r5, r6, pc}
 80089cc:	ab01      	add	r3, sp, #4
 80089ce:	466a      	mov	r2, sp
 80089d0:	f7ff ffc8 	bl	8008964 <__swhatbuf_r>
 80089d4:	9900      	ldr	r1, [sp, #0]
 80089d6:	4605      	mov	r5, r0
 80089d8:	4630      	mov	r0, r6
 80089da:	f7ff fbb5 	bl	8008148 <_malloc_r>
 80089de:	b948      	cbnz	r0, 80089f4 <__smakebuf_r+0x44>
 80089e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089e4:	059a      	lsls	r2, r3, #22
 80089e6:	d4ef      	bmi.n	80089c8 <__smakebuf_r+0x18>
 80089e8:	f023 0303 	bic.w	r3, r3, #3
 80089ec:	f043 0302 	orr.w	r3, r3, #2
 80089f0:	81a3      	strh	r3, [r4, #12]
 80089f2:	e7e3      	b.n	80089bc <__smakebuf_r+0xc>
 80089f4:	89a3      	ldrh	r3, [r4, #12]
 80089f6:	6020      	str	r0, [r4, #0]
 80089f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089fc:	81a3      	strh	r3, [r4, #12]
 80089fe:	9b00      	ldr	r3, [sp, #0]
 8008a00:	6163      	str	r3, [r4, #20]
 8008a02:	9b01      	ldr	r3, [sp, #4]
 8008a04:	6120      	str	r0, [r4, #16]
 8008a06:	b15b      	cbz	r3, 8008a20 <__smakebuf_r+0x70>
 8008a08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a0c:	4630      	mov	r0, r6
 8008a0e:	f000 f81d 	bl	8008a4c <_isatty_r>
 8008a12:	b128      	cbz	r0, 8008a20 <__smakebuf_r+0x70>
 8008a14:	89a3      	ldrh	r3, [r4, #12]
 8008a16:	f023 0303 	bic.w	r3, r3, #3
 8008a1a:	f043 0301 	orr.w	r3, r3, #1
 8008a1e:	81a3      	strh	r3, [r4, #12]
 8008a20:	89a3      	ldrh	r3, [r4, #12]
 8008a22:	431d      	orrs	r5, r3
 8008a24:	81a5      	strh	r5, [r4, #12]
 8008a26:	e7cf      	b.n	80089c8 <__smakebuf_r+0x18>

08008a28 <_fstat_r>:
 8008a28:	b538      	push	{r3, r4, r5, lr}
 8008a2a:	4d07      	ldr	r5, [pc, #28]	; (8008a48 <_fstat_r+0x20>)
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	4604      	mov	r4, r0
 8008a30:	4608      	mov	r0, r1
 8008a32:	4611      	mov	r1, r2
 8008a34:	602b      	str	r3, [r5, #0]
 8008a36:	f7fe fe84 	bl	8007742 <_fstat>
 8008a3a:	1c43      	adds	r3, r0, #1
 8008a3c:	d102      	bne.n	8008a44 <_fstat_r+0x1c>
 8008a3e:	682b      	ldr	r3, [r5, #0]
 8008a40:	b103      	cbz	r3, 8008a44 <_fstat_r+0x1c>
 8008a42:	6023      	str	r3, [r4, #0]
 8008a44:	bd38      	pop	{r3, r4, r5, pc}
 8008a46:	bf00      	nop
 8008a48:	2000090c 	.word	0x2000090c

08008a4c <_isatty_r>:
 8008a4c:	b538      	push	{r3, r4, r5, lr}
 8008a4e:	4d06      	ldr	r5, [pc, #24]	; (8008a68 <_isatty_r+0x1c>)
 8008a50:	2300      	movs	r3, #0
 8008a52:	4604      	mov	r4, r0
 8008a54:	4608      	mov	r0, r1
 8008a56:	602b      	str	r3, [r5, #0]
 8008a58:	f7fe ffda 	bl	8007a10 <_isatty>
 8008a5c:	1c43      	adds	r3, r0, #1
 8008a5e:	d102      	bne.n	8008a66 <_isatty_r+0x1a>
 8008a60:	682b      	ldr	r3, [r5, #0]
 8008a62:	b103      	cbz	r3, 8008a66 <_isatty_r+0x1a>
 8008a64:	6023      	str	r3, [r4, #0]
 8008a66:	bd38      	pop	{r3, r4, r5, pc}
 8008a68:	2000090c 	.word	0x2000090c

08008a6c <_sbrk_r>:
 8008a6c:	b538      	push	{r3, r4, r5, lr}
 8008a6e:	4d06      	ldr	r5, [pc, #24]	; (8008a88 <_sbrk_r+0x1c>)
 8008a70:	2300      	movs	r3, #0
 8008a72:	4604      	mov	r4, r0
 8008a74:	4608      	mov	r0, r1
 8008a76:	602b      	str	r3, [r5, #0]
 8008a78:	f7f9 fcfe 	bl	8002478 <_sbrk>
 8008a7c:	1c43      	adds	r3, r0, #1
 8008a7e:	d102      	bne.n	8008a86 <_sbrk_r+0x1a>
 8008a80:	682b      	ldr	r3, [r5, #0]
 8008a82:	b103      	cbz	r3, 8008a86 <_sbrk_r+0x1a>
 8008a84:	6023      	str	r3, [r4, #0]
 8008a86:	bd38      	pop	{r3, r4, r5, pc}
 8008a88:	2000090c 	.word	0x2000090c

08008a8c <_init>:
 8008a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a8e:	bf00      	nop
 8008a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a92:	bc08      	pop	{r3}
 8008a94:	469e      	mov	lr, r3
 8008a96:	4770      	bx	lr

08008a98 <_fini>:
 8008a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a9a:	bf00      	nop
 8008a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a9e:	bc08      	pop	{r3}
 8008aa0:	469e      	mov	lr, r3
 8008aa2:	4770      	bx	lr
